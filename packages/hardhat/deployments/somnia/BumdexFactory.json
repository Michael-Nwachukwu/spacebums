{
  "address": "0xA5f8f44614D6ADAcF924bc3143E0356d9A37A748",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x52061399eb75d40dfebd951ce7944394f78273204d0ba4e036f39a84f43c89ff",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x7FBbE68068A3Aa7E479A1E51e792F4C2073b018f",
    "contractAddress": "0xA5f8f44614D6ADAcF924bc3143E0356d9A37A748",
    "transactionIndex": 0,
    "gasUsed": "23250264",
    "logsBloom": "0x
    "blockHash": "0x63dc3bc9c63d8ce30fa3d7e759f10b6a34f3b4c4ede7670659c675b9e1d04b6f",
    "transactionHash": "0x52061399eb75d40dfebd951ce7944394f78273204d0ba4e036f39a84f43c89ff",
    "logs": [],
    "blockNumber": 165923747,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "50f148701f10ff3011b07be7eaa091fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bumdex/BumdexFactory.sol\":\"BumdexFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/bumdex/BumdexFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BumdexPair.sol\\\";\\n\\ncontract BumdexFactory {\\n    mapping(address => mapping(address => address)) public getPair;\\n    address[] public allPairs;\\n    \\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n    \\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n    \\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\n        require(tokenA != tokenB, 'IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'PAIR_EXISTS');\\n        \\n        bytes memory bytecode = type(BumdexPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        \\n        BumdexPair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair;\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n}\\n\",\"keccak256\":\"0xcb35a2700c83a1428eb25b9690f8576ea546011478d6a3d41a7dc35d9a7630aa\",\"license\":\"MIT\"},\"contracts/bumdex/BumdexPair.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract BumdexPair is IERC20 {\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    \\n    address public factory;\\n    address public token0;\\n    address public token1;\\n    \\n    uint112 private reserve0;\\n    uint112 private reserve1;\\n    uint32 private blockTimestampLast;\\n    \\n    uint256 public kLast;\\n    \\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n    \\n    // ERC-20 Implementation\\n    string public constant name = \\\"Bumdex LP Token\\\";\\n    string public constant symbol = \\\"BLP\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    \\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n    \\n    constructor() {\\n        factory = msg.sender;\\n    }\\n    \\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, 'FORBIDDEN');\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n    \\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n    \\n    function _safeTransfer(address token, address to, uint256 value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FAILED');\\n    }\\n    \\n    function _update(uint256 balance0, uint256 balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        require(balance0 <= type(uint112).max && balance1 <= type(uint112).max, 'OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n    \\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0 - _reserve0;\\n        uint256 amount1 = balance1 - _reserve1;\\n        \\n        uint256 _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = min(amount0 * _totalSupply / _reserve0, amount1 * _totalSupply / _reserve1);\\n        }\\n        require(liquidity > 0, 'INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n        \\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        kLast = uint256(reserve0) * reserve1;\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n    \\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n        \\n        uint256 _totalSupply = totalSupply;\\n        amount0 = liquidity * balance0 / _totalSupply;\\n        amount1 = liquidity * balance1 / _totalSupply;\\n        require(amount0 > 0 && amount1 > 0, 'INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n        \\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        kLast = uint256(reserve0) * reserve1;\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n    \\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'INSUFFICIENT_LIQUIDITY');\\n        \\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, 'INVALID_TO');\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'INSUFFICIENT_INPUT_AMOUNT');\\n        {\\n            uint256 balance0Adjusted = balance0 * 1000 - amount0In * 3;\\n            uint256 balance1Adjusted = balance1 * 1000 - amount1In * 3;\\n            require(balance0Adjusted * balance1Adjusted >= uint256(_reserve0) * _reserve1 * 1000**2, 'K');\\n        }\\n        \\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n    \\n    // Helper functions\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n    \\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n    \\n    // ERC-20 functions\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply += value;\\n        balanceOf[to] += value;\\n        emit Transfer(address(0), to, value);\\n    }\\n    \\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] -= value;\\n        totalSupply -= value;\\n        emit Transfer(from, address(0), value);\\n    }\\n    \\n    function approve(address spender, uint256 value) external returns (bool) {\\n        allowance[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n    \\n    function transfer(address to, uint256 value) external returns (bool) {\\n        balanceOf[msg.sender] -= value;\\n        balanceOf[to] += value;\\n        emit Transfer(msg.sender, to, value);\\n        return true;\\n    }\\n    \\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= value;\\n        }\\n        balanceOf[from] -= value;\\n        balanceOf[to] += value;\\n        emit Transfer(from, to, value);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xf7f373d9921be6f8986fa64356cbe279cd0e434f6392f93c5a7c5d3336a2baa8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611b1a908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c9081631e3dd18b1461005a57508063574f2ba314610055578063c9c65396146100505763e6a439051461004b57600080fd5b610369565b610113565b6100c9565b346100b65760203660031901126100b657600435906001548210156100b657600190527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601546001600160a01b0316608052607f1960a0016080f35b80fd5b60009103126100c457565b600080fd5b346100c45760003660031901126100c4576020600154604051908152f35b600435906001600160a01b03821682036100c457565b602435906001600160a01b03821682036100c457565b346100c45760403660031901126100c45761012c6100e7565b6101346100fd565b6001600160a01b039181831681841661014f818314156103c0565b101561036457905b828216610165811515610402565b6101c46101be6101b26101a58561018e8860018060a01b03166000526000602052604060002090565b9060018060a01b0316600052602052604060002090565b546001600160a01b031690565b6001600160a01b031690565b1561043d565b6115816101d3602082016104c8565b9080825260208201906105648239604051606086811b6bffffffffffffffffffffffff19908116602084019081529187901b166034830152602882529061021b6048826104a6565b5190209151906000f59284841694853b156100c45760405163485cc95560e01b81526001600160a01b03838116600483015285166024820152956000908790604490829084905af191821561035f57856102c26102fe92610342997f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e996610346575b506102e1836102c28a61018e8560018060a01b03166000526000602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b038816600090815260208190526040902061018e565b610307856104e4565b600154604080516001600160a01b038816815260208101929092529190941693a36040516001600160a01b0390911681529081906020820190565b0390f35b806103536103599261048d565b806100b9565b3861029d565b6104d8565b610157565b346100c45760403660031901126100c45760206103846100e7565b6103b661038f6100fd565b6001600160a01b039283166000908152808552604080822092851682526020929092522090565b5416604051908152f35b156103c757565b60405162461bcd60e51b81526020600482015260136024820152724944454e544943414c5f41444452455353455360681b6044820152606490fd5b1561040957565b60405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b6044820152606490fd5b1561044457565b60405162461bcd60e51b815260206004820152600b60248201526a504149525f45584953545360a81b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116104a157604052565b610477565b90601f8019910116810190811067ffffffffffffffff8211176104a157604052565b906104d660405192836104a6565b565b6040513d6000823e3d90fd5b600154680100000000000000008110156104a157600181018060015581101561054d5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03909216919091179055565b634e487b7160e01b600052603260045260246000fdfe6080806040523461002d576001600555600080546001600160a01b0319163317905561154e90816100338239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8063022c0d9f14610d5c57806306fdde0314610d145780630902f1ac14610cbb578063095ea7b314610c425780630dfe168114610c1957806318160ddd14610bfb57806323b872dd14610b25578063313ce56714610b09578063485cc95514610a775780636a6278421461065957806370a082311461061f5780637464fc3d1461060157806389afcb441461027357806395d89b4114610233578063a9059cbb146101b2578063ba9a7a5614610195578063c45a01551461016c578063d21220a7146101435763dd62ed3e146100ed57600080fd5b3461013e57604036600319011261013e5761010661127c565b61010e611292565b9060018060a01b038091166000526008602052604060002091166000526020526020604060002054604051908152f35b600080fd5b3461013e57600036600319011261013e576002546040516001600160a01b039091168152602090f35b3461013e57600036600319011261013e576000546040516001600160a01b039091168152602090f35b3461013e57600036600319011261013e5760206040516103e88152f35b3461013e57604036600319011261013e576101cb61127c565b6024359033600052600760205260406000206101e883825461137a565b905560018060a01b031690816000526007602052604060002061020c8282546114eb565b90556040519081526000805160206114f983398151915260203392a3602060405160018152f35b3461013e57600036600319011261013e5761026f604051610253816112a8565b60038152620424c560ec1b6020820152604051918291826112fc565b0390f35b3461013e5760208060031936011261013e5761028d61127c565b9061029c600160055414611345565b600060055560018060a01b03806001541691816002541693604051926370a0823160e01b95868552306004860152602496848689818a5afa958615610519576000966105d2575b506040519681885230600489015285888a81865afa978815610519576000986105a3575b50306000526007865261033b61032f61032f6103346040600020549a6006549384918d611387565b61139a565b9a8a611387565b968815158061059a575b1561055657899160008892308252600784526040822061036682825461137a565b90556103748160065461137a565b6006556040519081526000805160206114f9833981519152843092a361039b8a88836113ba565b6103a68988876113ba565b604051928380928682523060048301525afa918215610519578691600093610525575b50896040518095819382523060048301525afa918215610519576000926104ea575b506001600160701b039081811115806104e0575b156104b15760409850908061046d939216918263ffffffff60e01b4260e01b16916001600160701b0360701b9060701b1617178060035560701c16907f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad18980518381528489820152a1611387565b600455855191858352848484015216907fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496863392a360016005558351928352820152f35b60405162461bcd60e51b8152600481018790526008818b0152674f564552464c4f5760c01b6044820152606490fd5b50818311156103ff565b9091508481813d8311610512575b61050281836112da565b8101031261013e575190886103eb565b503d6104f8565b6040513d6000823e3d90fd5b8281939294503d831161054f575b61053d81836112da565b8101031261013e57859051918a6103c9565b503d610533565b60405162461bcd60e51b815260048101889052601d818c01527f494e53554646494349454e545f4c49515549444954595f4255524e45440000006044820152606490fd5b50871515610345565b9097508581813d83116105cb575b6105bb81836112da565b8101031261013e57519689610307565b503d6105b1565b9095508481813d83116105fa575b6105ea81836112da565b8101031261013e575194886102e3565b503d6105e0565b3461013e57600036600319011261013e576020600454604051908152f35b3461013e57602036600319011261013e576001600160a01b0361064061127c565b1660005260076020526020604060002054604051908152f35b3461013e57602036600319011261013e5761067261127c565b610680600160055414611345565b60006005556106a46003546001600160701b0391828216928260701c169160e01c90565b5060018060a01b036001541692604051926020846024816370a0823160e01b988982523060048301525afa93841561051957600094610a43575b50600254604051958652306004870152602090869060249082906001600160a01b03165afa94851561051957600095610a08575b506001600160701b0316926001600160701b0361072f858361137a565b93169161073c838761137a565b926006549586156000146109d25750506107568385611387565b600060038211156109c45750808060011c6001810180911161098f57905b8282106109a55750505b6103e719810190811161098f57946103e8810180911161098f576006556000805260076020527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df80546103e88101811161098f576103e80190556000806000805160206114f983398151915260206040516103e88152a35b841561094a57610808856006546114eb565b6006556001600160a01b03166000818152600760205260409020805461082f9087906114eb565b905560006000805160206114f98339815191526020604051888152a36001600160701b0381111580610939575b15610909576020946001600160701b03806108c99316918263ffffffff60e01b4260e01b16918360701b9060701b1617178060035560701c16907f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad160408051838152848a820152a1611387565b600455604051918252838201527f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f60403392a26001600555604051908152f35b60405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b6044820152606490fd5b506001600160701b0385111561085c565b60405162461bcd60e51b815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e5445440000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b9091506109bb826109b6818461139a565b6114eb565b60011c90610774565b901561077e5750600161077e565b9061032f6109ea6109f19361032f8a8a9b979b611387565b9386611387565b80821015610a0157505b936107f6565b90506109fb565b9094506020813d602011610a3b575b81610a24602093836112da565b8101031261013e5751936001600160701b03610712565b3d9150610a17565b9093506020813d602011610a6f575b81610a5f602093836112da565b8101031261013e575192856106de565b3d9150610a52565b3461013e57604036600319011261013e57610a9061127c565b610a98611292565b6000546001600160a01b03919082163303610ad857816bffffffffffffffffffffffff60a01b931683600154161760015516906002541617600255600080f35b60405162461bcd60e51b81526020600482015260096024820152682327a92124a22222a760b91b6044820152606490fd5b3461013e57600036600319011261013e57602060405160128152f35b3461013e57606036600319011261013e57610b3e61127c565b610b46611292565b604435906000805160206114f983398151915260018060a01b038094169182600052602094859160088352604060002033600052835260001960406000205403610bd1575b84600052600783526040600020610ba387825461137a565b9055169384600052600782526040600020610bbf8282546114eb565b9055604051908152a360405160018152f35b846000526008835260406000203360005283526040600020610bf487825461137a565b9055610b8b565b3461013e57600036600319011261013e576020600654604051908152f35b3461013e57600036600319011261013e576001546040516001600160a01b039091168152602090f35b3461013e57604036600319011261013e57610c5b61127c565b60243533600052600860205260406000209160018060a01b03169182600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b3461013e57600036600319011261013e57606063ffffffff610cf26003546001600160701b0391828216928260701c169160e01c90565b909291604051936001600160701b038092168552166020840152166040820152f35b3461013e57600036600319011261013e5761026f604051610d34816112a8565b600f81526e213ab6b232bc102628102a37b5b2b760891b6020820152604051918291826112fc565b3461013e57608036600319011261013e576044356001600160a01b038181169182810361013e5760643567ffffffffffffffff80821161013e573660238301121561013e57816004013590811161013e573691016024011161013e57610dc6600160055414611345565b60006005556004351580158091611271575b1561122c57610dfc6003546001600160701b0391828216928260701c169160e01c90565b509390926001600160701b0384166004351080611218575b156111da57816001541691600254169282871415806111d0575b1561119e5761118c575b602435611178575b50604051906020826024816370a0823160e01b948582523060048301525afa91821561051957600092611143575b5060209060246040518095819382523060048301525afa9182156105195760009261110f575b50610eaa6004356001600160701b03851661137a565b81111561110757610ecf610ec96004356001600160701b03861661137a565b8261137a565b935b610ee66024356001600160701b03831661137a565b8311156110ff57610f0b610f056024356001600160701b03841661137a565b8461137a565b935b85151586156110f6575b156110b157826103e88102046103e8148315171561098f57600386028681046003148715171561098f57610f4f906103e8850261137a565b906103e88502918583046103e8148615171561098f5760038702928784046003148815171561098f57610f986001600160701b0392610f92610fa196859461137a565b90611387565b94169116611387565b90620f42409182810292818404149015171561098f5710611088576001600160701b0381111580611077575b15610909577f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1916001600160701b038060409316918263ffffffff60e01b4260e01b16918360701b9060701b16171780600355835192835260701c166020820152a16040519182526020820152600435604082015260243560608201527fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82260803392a36001600555005b506001600160701b03821115610fcd565b60405162461bcd60e51b81526020600482015260016024820152604b60f81b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e54000000000000006044820152606490fd5b50841515610f17565b600093610f0d565b600093610ed1565b9091506020813d60201161113b575b8161112b602093836112da565b8101031261013e57519085610e94565b3d915061111e565b9091506020813d602011611170575b8161115f602093836112da565b8101031261013e5751906020610e6e565b3d9150611152565b6111869060243590846113ba565b85610e40565b61119960043582846113ba565b610e38565b60405162461bcd60e51b815260206004820152600a602482015269494e56414c49445f544f60b01b6044820152606490fd5b5083871415610e2e565b60405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b6044820152606490fd5b506001600160701b03851660243510610e14565b60405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e540000000000006044820152606490fd5b506024351515610dd8565b600435906001600160a01b038216820361013e57565b602435906001600160a01b038216820361013e57565b6040810190811067ffffffffffffffff8211176112c457604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176112c457604052565b6020808252825181830181905290939260005b82811061133157505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161130f565b1561134c57565b60405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606490fd5b9190820391821161098f57565b8181029291811591840414171561098f57565b81156113a4570490565b634e487b7160e01b600052601260045260246000fd5b60405163a9059cbb60e01b60208083019182526001600160a01b039094166024830152604480830195909552938152919267ffffffffffffffff9260808101848111828210176112c457604052600092839283809351925af1913d156114e3573d9081116114cf5760405190611439601f8201601f19168601836112da565b81523d828583013e5b82611488575b5050156114525750565b6064906040519062461bcd60e51b82526004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152fd5b80519250821591908483156114a4575b50505090503880611448565b9193818094500103126114cb578201519081151582036114c8575080388084611498565b80fd5b5080fd5b634e487b7160e01b82526041600452602482fd5b506060611442565b9190820180921161098f5756feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220e55ea5cd86e73ea1f9c81d5e1be68ebebc630c98215516ac50ec5097ea8866ae64736f6c63430008140033a264697066735822122030ee0687f17cd63b8254a952d45c0cd8a20e185314fed1ea2affe8d67b673e8f64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c9081631e3dd18b1461005a57508063574f2ba314610055578063c9c65396146100505763e6a439051461004b57600080fd5b610369565b610113565b6100c9565b346100b65760203660031901126100b657600435906001548210156100b657600190527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601546001600160a01b0316608052607f1960a0016080f35b80fd5b60009103126100c457565b600080fd5b346100c45760003660031901126100c4576020600154604051908152f35b600435906001600160a01b03821682036100c457565b602435906001600160a01b03821682036100c457565b346100c45760403660031901126100c45761012c6100e7565b6101346100fd565b6001600160a01b039181831681841661014f818314156103c0565b101561036457905b828216610165811515610402565b6101c46101be6101b26101a58561018e8860018060a01b03166000526000602052604060002090565b9060018060a01b0316600052602052604060002090565b546001600160a01b031690565b6001600160a01b031690565b1561043d565b6115816101d3602082016104c8565b9080825260208201906105648239604051606086811b6bffffffffffffffffffffffff19908116602084019081529187901b166034830152602882529061021b6048826104a6565b5190209151906000f59284841694853b156100c45760405163485cc95560e01b81526001600160a01b03838116600483015285166024820152956000908790604490829084905af191821561035f57856102c26102fe92610342997f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e996610346575b506102e1836102c28a61018e8560018060a01b03166000526000602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b038816600090815260208190526040902061018e565b610307856104e4565b600154604080516001600160a01b038816815260208101929092529190941693a36040516001600160a01b0390911681529081906020820190565b0390f35b806103536103599261048d565b806100b9565b3861029d565b6104d8565b610157565b346100c45760403660031901126100c45760206103846100e7565b6103b661038f6100fd565b6001600160a01b039283166000908152808552604080822092851682526020929092522090565b5416604051908152f35b156103c757565b60405162461bcd60e51b81526020600482015260136024820152724944454e544943414c5f41444452455353455360681b6044820152606490fd5b1561040957565b60405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b6044820152606490fd5b1561044457565b60405162461bcd60e51b815260206004820152600b60248201526a504149525f45584953545360a81b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116104a157604052565b610477565b90601f8019910116810190811067ffffffffffffffff8211176104a157604052565b906104d660405192836104a6565b565b6040513d6000823e3d90fd5b600154680100000000000000008110156104a157600181018060015581101561054d5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b03909216919091179055565b634e487b7160e01b600052603260045260246000fdfe6080806040523461002d576001600555600080546001600160a01b0319163317905561154e90816100338239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8063022c0d9f14610d5c57806306fdde0314610d145780630902f1ac14610cbb578063095ea7b314610c425780630dfe168114610c1957806318160ddd14610bfb57806323b872dd14610b25578063313ce56714610b09578063485cc95514610a775780636a6278421461065957806370a082311461061f5780637464fc3d1461060157806389afcb441461027357806395d89b4114610233578063a9059cbb146101b2578063ba9a7a5614610195578063c45a01551461016c578063d21220a7146101435763dd62ed3e146100ed57600080fd5b3461013e57604036600319011261013e5761010661127c565b61010e611292565b9060018060a01b038091166000526008602052604060002091166000526020526020604060002054604051908152f35b600080fd5b3461013e57600036600319011261013e576002546040516001600160a01b039091168152602090f35b3461013e57600036600319011261013e576000546040516001600160a01b039091168152602090f35b3461013e57600036600319011261013e5760206040516103e88152f35b3461013e57604036600319011261013e576101cb61127c565b6024359033600052600760205260406000206101e883825461137a565b905560018060a01b031690816000526007602052604060002061020c8282546114eb565b90556040519081526000805160206114f983398151915260203392a3602060405160018152f35b3461013e57600036600319011261013e5761026f604051610253816112a8565b60038152620424c560ec1b6020820152604051918291826112fc565b0390f35b3461013e5760208060031936011261013e5761028d61127c565b9061029c600160055414611345565b600060055560018060a01b03806001541691816002541693604051926370a0823160e01b95868552306004860152602496848689818a5afa958615610519576000966105d2575b506040519681885230600489015285888a81865afa978815610519576000986105a3575b50306000526007865261033b61032f61032f6103346040600020549a6006549384918d611387565b61139a565b9a8a611387565b968815158061059a575b1561055657899160008892308252600784526040822061036682825461137a565b90556103748160065461137a565b6006556040519081526000805160206114f9833981519152843092a361039b8a88836113ba565b6103a68988876113ba565b604051928380928682523060048301525afa918215610519578691600093610525575b50896040518095819382523060048301525afa918215610519576000926104ea575b506001600160701b039081811115806104e0575b156104b15760409850908061046d939216918263ffffffff60e01b4260e01b16916001600160701b0360701b9060701b1617178060035560701c16907f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad18980518381528489820152a1611387565b600455855191858352848484015216907fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496863392a360016005558351928352820152f35b60405162461bcd60e51b8152600481018790526008818b0152674f564552464c4f5760c01b6044820152606490fd5b50818311156103ff565b9091508481813d8311610512575b61050281836112da565b8101031261013e575190886103eb565b503d6104f8565b6040513d6000823e3d90fd5b8281939294503d831161054f575b61053d81836112da565b8101031261013e57859051918a6103c9565b503d610533565b60405162461bcd60e51b815260048101889052601d818c01527f494e53554646494349454e545f4c49515549444954595f4255524e45440000006044820152606490fd5b50871515610345565b9097508581813d83116105cb575b6105bb81836112da565b8101031261013e57519689610307565b503d6105b1565b9095508481813d83116105fa575b6105ea81836112da565b8101031261013e575194886102e3565b503d6105e0565b3461013e57600036600319011261013e576020600454604051908152f35b3461013e57602036600319011261013e576001600160a01b0361064061127c565b1660005260076020526020604060002054604051908152f35b3461013e57602036600319011261013e5761067261127c565b610680600160055414611345565b60006005556106a46003546001600160701b0391828216928260701c169160e01c90565b5060018060a01b036001541692604051926020846024816370a0823160e01b988982523060048301525afa93841561051957600094610a43575b50600254604051958652306004870152602090869060249082906001600160a01b03165afa94851561051957600095610a08575b506001600160701b0316926001600160701b0361072f858361137a565b93169161073c838761137a565b926006549586156000146109d25750506107568385611387565b600060038211156109c45750808060011c6001810180911161098f57905b8282106109a55750505b6103e719810190811161098f57946103e8810180911161098f576006556000805260076020527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df80546103e88101811161098f576103e80190556000806000805160206114f983398151915260206040516103e88152a35b841561094a57610808856006546114eb565b6006556001600160a01b03166000818152600760205260409020805461082f9087906114eb565b905560006000805160206114f98339815191526020604051888152a36001600160701b0381111580610939575b15610909576020946001600160701b03806108c99316918263ffffffff60e01b4260e01b16918360701b9060701b1617178060035560701c16907f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad160408051838152848a820152a1611387565b600455604051918252838201527f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f60403392a26001600555604051908152f35b60405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b6044820152606490fd5b506001600160701b0385111561085c565b60405162461bcd60e51b815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e5445440000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b9091506109bb826109b6818461139a565b6114eb565b60011c90610774565b901561077e5750600161077e565b9061032f6109ea6109f19361032f8a8a9b979b611387565b9386611387565b80821015610a0157505b936107f6565b90506109fb565b9094506020813d602011610a3b575b81610a24602093836112da565b8101031261013e5751936001600160701b03610712565b3d9150610a17565b9093506020813d602011610a6f575b81610a5f602093836112da565b8101031261013e575192856106de565b3d9150610a52565b3461013e57604036600319011261013e57610a9061127c565b610a98611292565b6000546001600160a01b03919082163303610ad857816bffffffffffffffffffffffff60a01b931683600154161760015516906002541617600255600080f35b60405162461bcd60e51b81526020600482015260096024820152682327a92124a22222a760b91b6044820152606490fd5b3461013e57600036600319011261013e57602060405160128152f35b3461013e57606036600319011261013e57610b3e61127c565b610b46611292565b604435906000805160206114f983398151915260018060a01b038094169182600052602094859160088352604060002033600052835260001960406000205403610bd1575b84600052600783526040600020610ba387825461137a565b9055169384600052600782526040600020610bbf8282546114eb565b9055604051908152a360405160018152f35b846000526008835260406000203360005283526040600020610bf487825461137a565b9055610b8b565b3461013e57600036600319011261013e576020600654604051908152f35b3461013e57600036600319011261013e576001546040516001600160a01b039091168152602090f35b3461013e57604036600319011261013e57610c5b61127c565b60243533600052600860205260406000209160018060a01b03169182600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b3461013e57600036600319011261013e57606063ffffffff610cf26003546001600160701b0391828216928260701c169160e01c90565b909291604051936001600160701b038092168552166020840152166040820152f35b3461013e57600036600319011261013e5761026f604051610d34816112a8565b600f81526e213ab6b232bc102628102a37b5b2b760891b6020820152604051918291826112fc565b3461013e57608036600319011261013e576044356001600160a01b038181169182810361013e5760643567ffffffffffffffff80821161013e573660238301121561013e57816004013590811161013e573691016024011161013e57610dc6600160055414611345565b60006005556004351580158091611271575b1561122c57610dfc6003546001600160701b0391828216928260701c169160e01c90565b509390926001600160701b0384166004351080611218575b156111da57816001541691600254169282871415806111d0575b1561119e5761118c575b602435611178575b50604051906020826024816370a0823160e01b948582523060048301525afa91821561051957600092611143575b5060209060246040518095819382523060048301525afa9182156105195760009261110f575b50610eaa6004356001600160701b03851661137a565b81111561110757610ecf610ec96004356001600160701b03861661137a565b8261137a565b935b610ee66024356001600160701b03831661137a565b8311156110ff57610f0b610f056024356001600160701b03841661137a565b8461137a565b935b85151586156110f6575b156110b157826103e88102046103e8148315171561098f57600386028681046003148715171561098f57610f4f906103e8850261137a565b906103e88502918583046103e8148615171561098f5760038702928784046003148815171561098f57610f986001600160701b0392610f92610fa196859461137a565b90611387565b94169116611387565b90620f42409182810292818404149015171561098f5710611088576001600160701b0381111580611077575b15610909577f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1916001600160701b038060409316918263ffffffff60e01b4260e01b16918360701b9060701b16171780600355835192835260701c166020820152a16040519182526020820152600435604082015260243560608201527fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82260803392a36001600555005b506001600160701b03821115610fcd565b60405162461bcd60e51b81526020600482015260016024820152604b60f81b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e54000000000000006044820152606490fd5b50841515610f17565b600093610f0d565b600093610ed1565b9091506020813d60201161113b575b8161112b602093836112da565b8101031261013e57519085610e94565b3d915061111e565b9091506020813d602011611170575b8161115f602093836112da565b8101031261013e5751906020610e6e565b3d9150611152565b6111869060243590846113ba565b85610e40565b61119960043582846113ba565b610e38565b60405162461bcd60e51b815260206004820152600a602482015269494e56414c49445f544f60b01b6044820152606490fd5b5083871415610e2e565b60405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b6044820152606490fd5b506001600160701b03851660243510610e14565b60405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e540000000000006044820152606490fd5b506024351515610dd8565b600435906001600160a01b038216820361013e57565b602435906001600160a01b038216820361013e57565b6040810190811067ffffffffffffffff8211176112c457604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176112c457604052565b6020808252825181830181905290939260005b82811061133157505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161130f565b1561134c57565b60405162461bcd60e51b81526020600482015260066024820152651313d0d2d15160d21b6044820152606490fd5b9190820391821161098f57565b8181029291811591840414171561098f57565b81156113a4570490565b634e487b7160e01b600052601260045260246000fd5b60405163a9059cbb60e01b60208083019182526001600160a01b039094166024830152604480830195909552938152919267ffffffffffffffff9260808101848111828210176112c457604052600092839283809351925af1913d156114e3573d9081116114cf5760405190611439601f8201601f19168601836112da565b81523d828583013e5b82611488575b5050156114525750565b6064906040519062461bcd60e51b82526004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152fd5b80519250821591908483156114a4575b50505090503880611448565b9193818094500103126114cb578201519081151582036114c8575080388084611498565b80fd5b5080fd5b634e487b7160e01b82526041600452602482fd5b506060611442565b9190820180921161098f5756feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220e55ea5cd86e73ea1f9c81d5e1be68ebebc630c98215516ac50ec5097ea8866ae64736f6c63430008140033a264697066735822122030ee0687f17cd63b8254a952d45c0cd8a20e185314fed1ea2affe8d67b673e8f64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5339,
        "contract": "contracts/bumdex/BumdexFactory.sol:BumdexFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 5342,
        "contract": "contracts/bumdex/BumdexFactory.sol:BumdexFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}