{
  "language": "Solidity",
  "sources": {
    "contracts/Coffe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ncontract BuyMeCoffee {\n    event CoffeeBought(\n        address indexed supporter,\n        uint256 amount,\n        string message,\n        uint256 timestamp\n    );\n\n    address public owner;\n\n    struct Contribution {\n        address supporter;\n        uint256 amount;\n        string message;\n        uint256 timestamp;\n    }\n    \n    Contribution[] public contributions;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function buyCoffee(string memory message) external payable {\n        require(msg.value > 0, \"Amount must be greater than zero.\");\n        contributions.push(\n            Contribution(msg.sender, msg.value, message, block.timestamp)\n        );\n\n        emit CoffeeBought(msg.sender, msg.value, message, block.timestamp);\n    }\n\n    function withdraw() external {\n        require(msg.sender == owner, \"Only the owner can withdraw funds.\");\n        payable(owner).transfer(address(this).balance);\n    }\n\n    function getContributions() external view returns (Contribution[] memory) {\n        return contributions;\n    }\n\n    function setOwner(address newOwner) external {\n        require(msg.sender == owner, \"Only the owner can set a new owner.\");\n        owner = newOwner;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}