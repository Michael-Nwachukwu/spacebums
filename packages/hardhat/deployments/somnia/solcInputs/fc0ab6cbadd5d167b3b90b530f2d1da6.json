{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/CampaignTokenStaking.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\n/**\n * @title TokenStaking Contract\n * @dev Allows users to stake tokens from completed launchpad campaigns and earn rewards\n */\n\ninterface ILaunchpad {\n    function campaigns(\n        uint256 campaignId\n    )\n        external\n        view\n        returns (\n            address creator,\n            address token,\n            address uniswapPair,\n            uint128 targetAmount,\n            uint128 amountRaised,\n            uint64 deadline,\n            uint32 reserveRatio,\n            uint32 blockNumberCreated,\n            bool isActive,\n            bool isFundingComplete,\n            bool isCancelled,\n            bool isPromoted\n        );\n\n    function campaignCount() external view returns (uint32);\n}\n\ncontract CampaignTokenStaking is Initializable, ReentrancyGuardUpgradeable, OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n\n    // Custom errors\n    error InvalidInput();\n    error Unauthorized();\n    error CampaignNotCompleted();\n    error StakingNotEnabled();\n    error InsufficientBalance();\n    error NoRewardsAvailable();\n    error StakingPeriodNotEnded();\n\n    // Events\n    event StakingPoolCreated(uint32 indexed campaignId, address indexed token, uint256 apy, uint256 minStakingPeriod);\n    event TokensStaked(uint32 indexed campaignId, address indexed user, uint256 amount, uint256 timestamp);\n    event TokensUnstaked(\n        uint32 indexed campaignId,\n        address indexed user,\n        uint256 amount,\n        uint256 rewards,\n        uint256 timestamp\n    );\n    event RewardsClaimed(uint32 indexed campaignId, address indexed user, uint256 rewards, uint256 timestamp);\n    event StakingPoolUpdated(uint32 indexed campaignId, uint256 newApy, bool enabled);\n    event RewardsAdded(uint32 indexed campaignId, uint256 amount);\n    event EmergencyWithdraw(uint32 indexed campaignId, address indexed user, uint256 amount);\n\n    // Staking pool structure\n    struct StakingPool {\n        IERC20 stakingToken; // Token to be staked\n        uint128 totalStaked; // Total amount staked in this pool\n        uint128 rewardPool; // Available rewards for distribution\n        uint64 apy; // Annual percentage yield (in basis points, e.g., 1000 = 10%)\n        uint64 minStakingPeriod; // Minimum staking period in seconds\n        uint32 campaignId; // Associated campaign ID\n        bool enabled; // Whether staking is enabled for this pool\n        bool emergencyMode; // Emergency mode for immediate withdrawals\n    }\n\n    // User stake information\n    struct UserStake {\n        uint128 amount; // Amount staked by user\n        uint128 rewards; // Accumulated rewards\n        uint64 stakingTime; // When user started staking\n        uint64 lastRewardUpdate; // Last time rewards were calculated\n    }\n\n    // Constants\n    uint64 public constant MAX_APY = 10000; // 100% APY max\n    uint64 public constant MIN_STAKING_PERIOD = 1 days;\n    uint64 public constant MAX_STAKING_PERIOD = 365 days;\n    uint16 public constant BASIS_POINTS = 10000;\n    uint256 public constant SECONDS_PER_YEAR = 365 * 24 * 60 * 60;\n\n    // State variables\n    ILaunchpad public launchpad;\n    uint32 public stakingPoolCount;\n\n    // Mappings\n    mapping(uint32 => StakingPool) public stakingPools; // campaignId => StakingPool\n    mapping(uint32 => mapping(address => UserStake)) public userStakes; // campaignId => user => UserStake\n    mapping(address => uint32[]) public userStakingPools; // user => campaignIds they've staked in\n    mapping(uint32 => address[]) public poolStakers; // campaignId => list of stakers\n    mapping(uint32 => mapping(address => bool)) public hasStaked; // campaignId => user => hasStaked\n\n    modifier validCampaign(uint32 _campaignId) {\n        if (_campaignId == 0 || _campaignId > launchpad.campaignCount()) revert InvalidInput();\n        _;\n    }\n\n    modifier campaignCompleted(uint32 _campaignId) {\n        (, , , , , , , , , bool isFundingComplete, bool isCancelled, ) = launchpad.campaigns(_campaignId);\n        if (!isFundingComplete || isCancelled) revert CampaignNotCompleted();\n        _;\n    }\n\n    modifier stakingEnabled(uint32 _campaignId) {\n        if (!stakingPools[_campaignId].enabled) revert StakingNotEnabled();\n        _;\n    }\n\n    function initialize(address _launchpad, address _owner) public initializer {\n        if (_launchpad == address(0) || _owner == address(0)) revert InvalidInput();\n\n        __ReentrancyGuard_init();\n        __Ownable_init(_owner);\n\n        launchpad = ILaunchpad(_launchpad);\n    }\n\n    /**\n     * @notice Creates a staking pool for a completed campaign\n     * @param _campaignId The campaign ID\n     * @param _apy Annual percentage yield in basis points (e.g., 1000 = 10%)\n     * @param _minStakingPeriod Minimum staking period in seconds\n     */\n    function createStakingPool(\n        uint32 _campaignId,\n        uint64 _apy,\n        uint64 _minStakingPeriod\n    ) external onlyOwner validCampaign(_campaignId) campaignCompleted(_campaignId) {\n        if (_apy == 0 || _apy > MAX_APY) revert InvalidInput();\n        if (_minStakingPeriod < MIN_STAKING_PERIOD || _minStakingPeriod > MAX_STAKING_PERIOD) revert InvalidInput();\n        if (address(stakingPools[_campaignId].stakingToken) != address(0)) revert InvalidInput(); // Pool already exists\n\n        // Get token address from launchpad\n        (, address tokenAddress, , , , , , , , , , ) = launchpad.campaigns(_campaignId);\n\n        StakingPool storage pool = stakingPools[_campaignId];\n        pool.stakingToken = IERC20(tokenAddress);\n        pool.apy = _apy;\n        pool.minStakingPeriod = _minStakingPeriod;\n        pool.campaignId = _campaignId;\n        pool.enabled = true;\n\n        stakingPoolCount++;\n\n        emit StakingPoolCreated(_campaignId, tokenAddress, _apy, _minStakingPeriod);\n    }\n\n    /**\n     * @notice Stake tokens in a specific campaign's pool\n     * @param _campaignId The campaign ID\n     * @param _amount Amount of tokens to stake\n     */\n    function stakeTokens(\n        uint32 _campaignId,\n        uint128 _amount\n    ) external nonReentrant validCampaign(_campaignId) stakingEnabled(_campaignId) {\n        if (_amount == 0) revert InvalidInput();\n\n        StakingPool storage pool = stakingPools[_campaignId];\n        UserStake storage userStake = userStakes[_campaignId][msg.sender];\n\n        // Check user balance\n        if (pool.stakingToken.balanceOf(msg.sender) < _amount) revert InsufficientBalance();\n\n        // Update rewards before changing stake amount\n        _updateUserRewards(_campaignId, msg.sender);\n\n        // Transfer tokens to contract\n        pool.stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\n\n        // Update user stake\n        if (userStake.amount == 0) {\n            userStake.stakingTime = uint64(block.timestamp);\n            userStake.lastRewardUpdate = uint64(block.timestamp);\n\n            // Add user to staking pools if first time\n            if (!hasStaked[_campaignId][msg.sender]) {\n                hasStaked[_campaignId][msg.sender] = true;\n                userStakingPools[msg.sender].push(_campaignId);\n                poolStakers[_campaignId].push(msg.sender);\n            }\n        }\n\n        userStake.amount += _amount;\n        pool.totalStaked += _amount;\n\n        emit TokensStaked(_campaignId, msg.sender, _amount, block.timestamp);\n    }\n\n    /**\n     * @notice Unstake tokens and claim rewards\n     * @param _campaignId The campaign ID\n     * @param _amount Amount of tokens to unstake (0 = unstake all)\n     */\n    function unstakeTokens(uint32 _campaignId, uint128 _amount) external nonReentrant validCampaign(_campaignId) {\n        StakingPool storage pool = stakingPools[_campaignId];\n        UserStake storage userStake = userStakes[_campaignId][msg.sender];\n\n        if (userStake.amount == 0) revert InsufficientBalance();\n\n        // Check minimum staking period (unless emergency mode)\n        if (!pool.emergencyMode && block.timestamp < userStake.stakingTime + pool.minStakingPeriod) {\n            revert StakingPeriodNotEnded();\n        }\n\n        // If amount is 0, unstake everything\n        if (_amount == 0 || _amount > userStake.amount) {\n            _amount = userStake.amount;\n        }\n\n        // Update rewards before unstaking\n        _updateUserRewards(_campaignId, msg.sender);\n\n        // Calculate and transfer rewards\n        uint128 rewards = userStake.rewards;\n        if (rewards > 0 && rewards <= pool.rewardPool) {\n            userStake.rewards = 0;\n            pool.rewardPool -= rewards;\n            pool.stakingToken.safeTransfer(msg.sender, rewards);\n        } else if (rewards > pool.rewardPool) {\n            // Transfer available rewards only\n            userStake.rewards -= pool.rewardPool;\n            rewards = pool.rewardPool;\n            pool.rewardPool = 0;\n            if (rewards > 0) {\n                pool.stakingToken.safeTransfer(msg.sender, rewards);\n            }\n        }\n\n        // Update stake amounts\n        userStake.amount -= _amount;\n        pool.totalStaked -= _amount;\n\n        // Transfer staked tokens back to user\n        pool.stakingToken.safeTransfer(msg.sender, _amount);\n\n        emit TokensUnstaked(_campaignId, msg.sender, _amount, rewards, block.timestamp);\n    }\n\n    /**\n     * @notice Claim accumulated rewards without unstaking\n     * @param _campaignId The campaign ID\n     */\n    function claimRewards(uint32 _campaignId) external nonReentrant validCampaign(_campaignId) {\n        StakingPool storage pool = stakingPools[_campaignId];\n        UserStake storage userStake = userStakes[_campaignId][msg.sender];\n\n        if (userStake.amount == 0) revert InsufficientBalance();\n\n        // Update rewards\n        _updateUserRewards(_campaignId, msg.sender);\n\n        uint128 rewards = userStake.rewards;\n        if (rewards == 0) revert NoRewardsAvailable();\n        if (rewards > pool.rewardPool) {\n            rewards = pool.rewardPool;\n        }\n\n        userStake.rewards -= rewards;\n        pool.rewardPool -= rewards;\n\n        pool.stakingToken.safeTransfer(msg.sender, rewards);\n\n        emit RewardsClaimed(_campaignId, msg.sender, rewards, block.timestamp);\n    }\n\n    /**\n     * @notice Add rewards to a staking pool\n     * @param _campaignId The campaign ID\n     * @param _amount Amount of tokens to add as rewards\n     */\n    function addRewards(uint32 _campaignId, uint128 _amount) external validCampaign(_campaignId) {\n        if (_amount == 0) revert InvalidInput();\n\n        StakingPool storage pool = stakingPools[_campaignId];\n\n        pool.stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\n        pool.rewardPool += _amount;\n\n        emit RewardsAdded(_campaignId, _amount);\n    }\n\n    /**\n     * @notice Update staking pool parameters (owner only)\n     * @param _campaignId The campaign ID\n     * @param _apy New APY in basis points\n     * @param _enabled Whether staking is enabled\n     */\n    function updateStakingPool(\n        uint32 _campaignId,\n        uint64 _apy,\n        bool _enabled\n    ) external onlyOwner validCampaign(_campaignId) {\n        if (_apy > MAX_APY) revert InvalidInput();\n\n        StakingPool storage pool = stakingPools[_campaignId];\n        pool.apy = _apy;\n        pool.enabled = _enabled;\n\n        emit StakingPoolUpdated(_campaignId, _apy, _enabled);\n    }\n\n    /**\n     * @notice Enable emergency mode for a pool (owner only)\n     * @param _campaignId The campaign ID\n     * @param _emergencyMode Whether to enable emergency mode\n     */\n    function setEmergencyMode(uint32 _campaignId, bool _emergencyMode) external onlyOwner validCampaign(_campaignId) {\n        stakingPools[_campaignId].emergencyMode = _emergencyMode;\n    }\n\n    /**\n     * @notice Emergency withdraw without rewards (in case of emergency mode)\n     * @param _campaignId The campaign ID\n     */\n    function emergencyWithdraw(uint32 _campaignId) external nonReentrant validCampaign(_campaignId) {\n        StakingPool storage pool = stakingPools[_campaignId];\n        UserStake storage userStake = userStakes[_campaignId][msg.sender];\n\n        if (!pool.emergencyMode) revert InvalidInput();\n        if (userStake.amount == 0) revert InsufficientBalance();\n\n        uint128 amount = userStake.amount;\n\n        // Reset user stake\n        userStake.amount = 0;\n        userStake.rewards = 0;\n\n        // Update pool total\n        pool.totalStaked -= amount;\n\n        // Transfer tokens back\n        pool.stakingToken.safeTransfer(msg.sender, amount);\n\n        emit EmergencyWithdraw(_campaignId, msg.sender, amount);\n    }\n\n    /**\n     * @notice Internal function to update user rewards\n     * @param _campaignId The campaign ID\n     * @param _user User address\n     */\n    function _updateUserRewards(uint32 _campaignId, address _user) internal {\n        StakingPool storage pool = stakingPools[_campaignId];\n        UserStake storage userStake = userStakes[_campaignId][_user];\n\n        if (userStake.amount == 0) return;\n\n        uint256 timeStaked = block.timestamp - userStake.lastRewardUpdate;\n        if (timeStaked == 0) return;\n\n        // Calculate rewards: (amount * apy * timeStaked) / (BASIS_POINTS * SECONDS_PER_YEAR)\n        uint256 rewardEarned = (uint256(userStake.amount) * pool.apy * timeStaked) / (BASIS_POINTS * SECONDS_PER_YEAR);\n\n        userStake.rewards += uint128(rewardEarned);\n        userStake.lastRewardUpdate = uint64(block.timestamp);\n    }\n\n    // View functions\n\n    /**\n     * @notice Get user's stake information for a campaign\n     * @param _campaignId The campaign ID\n     * @param _user User address\n     * @return amount Amount staked\n     * @return rewards Current rewards\n     * @return stakingTime When user started staking\n     * @return timeToUnlock Time until user can unstake\n     */\n    function getUserStakeInfo(\n        uint32 _campaignId,\n        address _user\n    ) external view returns (uint128 amount, uint128 rewards, uint64 stakingTime, uint64 timeToUnlock) {\n        UserStake memory userStake = userStakes[_campaignId][_user];\n        StakingPool memory pool = stakingPools[_campaignId];\n\n        amount = userStake.amount;\n        stakingTime = userStake.stakingTime;\n\n        // Calculate current rewards\n        if (amount > 0) {\n            uint256 timeStaked = block.timestamp - userStake.lastRewardUpdate;\n            uint256 newRewards = (uint256(amount) * pool.apy * timeStaked) / (BASIS_POINTS * SECONDS_PER_YEAR);\n            rewards = userStake.rewards + uint128(newRewards);\n        }\n\n        // Calculate time to unlock\n        uint64 unlockTime = stakingTime + pool.minStakingPeriod;\n        timeToUnlock = block.timestamp >= unlockTime ? 0 : unlockTime - uint64(block.timestamp);\n    }\n\n    /**\n     * @notice Get staking pool information\n     * @param _campaignId The campaign ID\n     */\n    function getStakingPoolInfo(\n        uint32 _campaignId\n    )\n        external\n        view\n        returns (\n            address stakingToken,\n            uint128 totalStaked,\n            uint128 rewardPool,\n            uint64 apy,\n            uint64 minStakingPeriod,\n            bool enabled,\n            bool emergencyMode,\n            uint256 stakerCount\n        )\n    {\n        StakingPool memory pool = stakingPools[_campaignId];\n\n        return (\n            address(pool.stakingToken),\n            pool.totalStaked,\n            pool.rewardPool,\n            pool.apy,\n            pool.minStakingPeriod,\n            pool.enabled,\n            pool.emergencyMode,\n            poolStakers[_campaignId].length\n        );\n    }\n\n    /**\n     * @notice Get all campaigns a user has staked in\n     * @param _user User address\n     */\n    function getUserStakingPools(address _user) external view returns (uint32[] memory) {\n        return userStakingPools[_user];\n    }\n\n    /**\n     * @notice Get all stakers in a pool\n     * @param _campaignId The campaign ID\n     */\n    function getPoolStakers(uint32 _campaignId) external view returns (address[] memory) {\n        return poolStakers[_campaignId];\n    }\n\n    /**\n     * @notice Calculate potential rewards for a given amount and time\n     * @param _campaignId The campaign ID\n     * @param _amount Amount to stake\n     * @param _duration Duration to stake for\n     */\n    function calculateRewards(uint32 _campaignId, uint128 _amount, uint64 _duration) external view returns (uint256) {\n        StakingPool memory pool = stakingPools[_campaignId];\n        return (uint256(_amount) * pool.apy * _duration) / (BASIS_POINTS * SECONDS_PER_YEAR);\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IUniswapV2Factory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function allPairs(uint index) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n}"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IUniswapV2Pair {\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n}"
    },
    "contracts/interfaces/IUniswapV2Router.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n/**\n * @title IUniswapV2Router\n * @dev Interface for Uniswap V2 Router\n */\ninterface IUniswapV2Router {\n    function factory() external pure returns (address);\n    \n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint amountOut,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint[] memory amounts);\n\n    function quote(\n        uint amountA,\n        uint reserveA,\n        uint reserveB\n    ) external pure returns (uint amountB);\n\n    function getAmountOut(\n        uint amountIn,\n        uint reserveIn,\n        uint reserveOut\n    ) external pure returns (uint amountOut);\n\n    function getAmountIn(\n        uint amountOut,\n        uint reserveIn,\n        uint reserveOut\n    ) external pure returns (uint amountIn);\n\n    function getAmountsOut(\n        uint amountIn,\n        address[] calldata path\n    ) external view returns (uint[] memory amounts);\n\n    function getAmountsIn(\n        uint amountOut,\n        address[] calldata path\n    ) external view returns (uint[] memory amounts);\n}"
    },
    "contracts/Launchpad.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\n\nimport \"./library/Math.sol\";\nimport \"./library/LaunchpadCore.sol\";\nimport \"./interfaces/IUniswapV2Router.sol\";\nimport \"./interfaces/IUniswapV2Factory.sol\";\nimport \"./Token.sol\";\n\n/**\n * @title Enhanced Fundraising Launchpad\n * @dev A fundraising platform implementing the Bancor bonding curve with dynamic token allocations\n */\n\ncontract Launchpad is Initializable, ReentrancyGuardUpgradeable {\n    using Math for uint256;\n    using SafeERC20 for IERC20;\n\n    // Packed custom errors\n    error InvalidInput();\n    error Unauthorized();\n    error InactiveCampaign();\n    error InsufficientBalance();\n\n    // Packed events\n    event CampaignCreated(uint256 indexed campaignId, address indexed creator, string name, uint256 targetFunding, uint256 totalSupply, uint256 deadline);\n    event TokensPurchased(uint256 indexed campaignId, address indexed buyer, uint256 usdcAmount, uint256 tokensReceived, uint256 timestamp);\n    event FundingCompleted(uint256 indexed campaignId, uint256 totalFunding);\n    event LiquidityAdded(uint256 indexed campaignId, uint256 usdcAmount, uint256 tokensAmount);\n    event CampaignCancelled(uint256 indexed campaignId, address indexed creator);\n    event RefundClaimed(uint256 indexed campaignId, address indexed investor, uint256 amount);\n    event PlatformFeeUpdated(uint256 newFee);\n    event UserParticipatedInCampaign(uint256 indexed campaignId, address indexed user, uint256 amount);\n    event CampaignPromoted(uint256 indexed campaignId);\n    event OgPointsAwarded(uint256 indexed campaignId, address indexed user, uint256 amount);\n\n    // Packed struct - optimized for storage\n    struct Campaign {\n        address creator;           // 20 bytes\n        IERC20 token;             // 20 bytes\n        address uniswapPair;      // 20 bytes\n        uint128 targetAmount;     // 16 bytes - reduced from uint256\n        uint128 amountRaised;     // 16 bytes - reduced from uint256\n        uint64 deadline;          // 8 bytes - reduced from uint256 (sufficient until year 2554)\n        uint32 reserveRatio;      // 4 bytes\n        uint32 blockNumberCreated; // 4 bytes - reduced from uint256\n        bool isActive;            // 1 byte\n        bool isFundingComplete;   // 1 byte\n        bool isCancelled;         // 1 byte\n        bool isPromoted;          // 1 byte\n        // Total: 112 bytes per slot optimization\n        \n        // Second storage slot\n        uint128 tokensSold;       // 16 bytes\n        uint128 totalSupply;      // 16 bytes\n        uint128 tokensForSale;    // 16 bytes\n        uint128 creatorAllocation; // 16 bytes\n        \n        // Third storage slot\n        uint128 liquidityAllocation; // 16 bytes\n        uint128 platformFeeTokens;   // 16 bytes\n        uint128 promotionalOgPoints; // 16 bytes\n        uint32 id;                   // 4 bytes\n        \n        string name;\n        string symbol;\n        string description;\n        mapping(address => uint128) investments; // reduced from uint256\n    }\n\n    struct CampaignInfo {\n        uint32 id;\n        address creator;\n        uint128 targetAmount;\n        uint128 amountRaised;\n        uint128 tokensSold;\n        uint128 totalSupply;\n        uint128 tokensForSale;\n        uint128 creatorAllocation;\n        uint128 liquidityAllocation;\n        uint128 platformFeeTokens;\n        uint64 deadline;\n        address tokenAddress;\n        bool isActive;\n        bool isFundingComplete;\n        bool isCancelled;\n        string name;\n        string symbol;\n        string description;\n        uint32 reserveRatio;\n        uint32 blockNumberCreated;\n        uint128 promotionalOgPoints;\n        bool isPromoted;\n        address uniswapPair;\n    }\n\n    // Packed constants\n    uint16 public constant TOKENS_FOR_SALE_PCT = 5000;\n    uint16 public constant CREATOR_ALLOCATION_PCT = 2000;\n    uint16 public constant LIQUIDITY_ALLOCATION_PCT = 2500;\n    uint16 public constant BASIS_POINTS = 10000;\n    uint16 public constant OG_POINTS_ALLOCATION = 1000;\n    uint32 public constant MAX_RESERVE_RATIO = 1000000;\n    uint128 public constant MIN_TOTAL_SUPPLY = 1_000_000 * 10 ** 18;\n    uint128 public constant MAX_TOTAL_SUPPLY = 1_000_000_000_000 * 10 ** 18;\n    uint64 public constant MIN_DEADLINE = 1 days;\n    uint64 public constant MAX_DEADLINE = 365 days;\n\n    uint32 public campaignCount;\n    uint128 public totalPlatformFees;\n    uint128 public promotionFee;\n    uint16 public platformFeePercentage;\n\n    IERC20 public usdcToken;\n    IUniswapV2Router public uniswapRouter;\n    IUniswapV2Factory public uniswapFactory;\n\n    mapping(uint256 => Campaign) public campaigns;\n    mapping(address => uint32[]) public creatorCampaigns;\n    mapping(address => uint32[]) public userParticipatedCampaigns;\n    mapping(address => mapping(uint256 => bool)) public userParticipation;\n    mapping(address => uint128) public ogPoints;\n\n    modifier campaignExists(uint256 _campaignId) {\n        if (_campaignId == 0 || _campaignId > campaignCount) revert InvalidInput();\n        _;\n    }\n\n    function initialize(address _contractOwner, address _usdcToken, address _uniswapRouter, address _uniswapFactory, uint128 _promotionFee) public initializer {\n        __ReentrancyGuard_init();\n        if (_usdcToken == address(0) || _uniswapRouter == address(0) || _uniswapFactory == address(0) || _contractOwner == address(0)) revert InvalidInput();\n\n        usdcToken = IERC20(_usdcToken);\n        uniswapRouter = IUniswapV2Router(_uniswapRouter);\n        uniswapFactory = IUniswapV2Factory(_uniswapFactory);\n        platformFeePercentage = 200;\n        promotionFee = _promotionFee;\n    }\n\n    function createCampaign(\n        string memory _name,\n        string memory _symbol,\n        string memory _description,\n        uint128 _targetFunding,\n        uint128 _totalSupply,\n        uint32 _reserveRatio,\n        uint64 _deadline\n    ) external returns (uint32 campaignId) {\n        if (msg.sender == address(0) || _targetFunding == 0) revert InvalidInput();\n        if (_totalSupply < MIN_TOTAL_SUPPLY || _totalSupply > MAX_TOTAL_SUPPLY) revert InvalidInput();\n        if (_reserveRatio < 100000 || _reserveRatio > 900000) revert InvalidInput();\n        if (_deadline <= uint64(block.timestamp) + MIN_DEADLINE || _deadline > uint64(block.timestamp) + MAX_DEADLINE) revert InvalidInput();\n\n        uint128 tokensForSale = _totalSupply * TOKENS_FOR_SALE_PCT / BASIS_POINTS;\n        uint128 creatorAllocation = _totalSupply * CREATOR_ALLOCATION_PCT / BASIS_POINTS;\n        uint128 liquidityAllocation = _totalSupply * LIQUIDITY_ALLOCATION_PCT / BASIS_POINTS;\n        uint128 platformFeeTokens = _totalSupply * platformFeePercentage / BASIS_POINTS;\n\n        require(tokensForSale + creatorAllocation + liquidityAllocation + platformFeeTokens <= _totalSupply, \"Allocations exceed total supply\");\n\n        TokenFacet campaignToken = new TokenFacet(_name, _symbol, address(this));\n\n        campaignId = ++campaignCount;\n        Campaign storage c = campaigns[campaignId];\n\n        c.id = campaignId;\n        c.creator = msg.sender;\n        c.targetAmount = _targetFunding;\n        c.totalSupply = _totalSupply;\n        c.tokensForSale = tokensForSale;\n        c.creatorAllocation = creatorAllocation;\n        c.liquidityAllocation = liquidityAllocation;\n        c.platformFeeTokens = platformFeeTokens;\n        c.deadline = _deadline;\n        c.token = campaignToken;\n        c.isActive = true;\n        c.name = _name;\n        c.symbol = _symbol;\n        c.description = _description;\n        c.reserveRatio = _reserveRatio;\n        c.blockNumberCreated = uint32(block.number);\n\n        creatorCampaigns[msg.sender].push(campaignId);\n\n        emit CampaignCreated(campaignId, msg.sender, _name, _targetFunding, _totalSupply, _deadline);\n    }\n\n    function promoteCampaign(uint32 _campaignId) external {\n        Campaign storage c = campaigns[_campaignId];\n        if (_campaignId == 0 || _campaignId > campaignCount) revert InvalidInput();\n        if (msg.sender != c.creator) revert Unauthorized();\n        if (!c.isActive || c.isCancelled || c.isFundingComplete) revert InactiveCampaign();\n        if (uint64(block.timestamp) > c.deadline) revert InvalidInput();\n        if (usdcToken.balanceOf(msg.sender) < promotionFee) revert InsufficientBalance();\n\n        c.isPromoted = true;\n        c.promotionalOgPoints = OG_POINTS_ALLOCATION;\n        totalPlatformFees += c.platformFeeTokens;\n        usdcToken.safeTransferFrom(msg.sender, address(this), promotionFee);\n        emit CampaignPromoted(_campaignId);\n    }\n\n    function buyTokens(uint32 _campaignId, uint128 _usdcAmount) external nonReentrant campaignExists(_campaignId) {\n        if (_usdcAmount == 0) revert InvalidInput();\n        Campaign storage c = campaigns[_campaignId];\n\n        if (!c.isActive || c.isCancelled || c.isFundingComplete) revert InactiveCampaign();\n        if (uint64(block.timestamp) > c.deadline) revert InvalidInput();\n        if (usdcToken.balanceOf(msg.sender) < _usdcAmount) revert InsufficientBalance();\n\n        uint256 tokensToMint = LaunchPadCore._calculatePurchaseReturn(\n            c.tokensForSale,\n            c.amountRaised,\n            c.reserveRatio,\n            _usdcAmount\n        );\n\n        if (c.tokensSold + uint128(tokensToMint) > c.tokensForSale) {\n            uint128 remainingTokens = c.tokensForSale - c.tokensSold;\n            uint256 usdcNeeded = LaunchPadCore._calculateExactUsdcForTokens(c, remainingTokens);\n            tokensToMint = remainingTokens;\n            _usdcAmount = uint128(usdcNeeded);\n        }\n\n        if (!userParticipation[msg.sender][_campaignId]) {\n            userParticipation[msg.sender][_campaignId] = true;\n            userParticipatedCampaigns[msg.sender].push(_campaignId);\n            emit UserParticipatedInCampaign(_campaignId, msg.sender, _usdcAmount);\n        }\n\n        usdcToken.safeTransferFrom(msg.sender, address(this), _usdcAmount);\n\n        c.amountRaised += _usdcAmount;\n        c.tokensSold += uint128(tokensToMint);\n        c.investments[msg.sender] += _usdcAmount;\n\n        if (c.isPromoted && c.promotionalOgPoints > 0) {\n            uint256 percentage = (uint256(tokensToMint) * 1e18) / c.tokensForSale;\n            uint128 awardedOgPoints = uint128((percentage * c.promotionalOgPoints) / 1e18);\n            if (awardedOgPoints > c.promotionalOgPoints) {\n                awardedOgPoints = c.promotionalOgPoints;\n            }\n            ogPoints[msg.sender] += awardedOgPoints;\n            c.promotionalOgPoints -= awardedOgPoints;\n            emit OgPointsAwarded(_campaignId, msg.sender, awardedOgPoints);\n        }\n\n        TokenFacet(address(c.token)).mint(msg.sender, tokensToMint);\n\n        emit TokensPurchased(_campaignId, msg.sender, _usdcAmount, uint256(tokensToMint), block.timestamp);\n\n        if (c.tokensSold >= c.tokensForSale || c.amountRaised >= c.targetAmount) {\n            _completeFunding(_campaignId);\n        }\n    }\n    \n    function cancelCampaign(uint32 _campaignId) external campaignExists(_campaignId) {\n        Campaign storage c = campaigns[_campaignId];\n\n        if (msg.sender != c.creator) revert Unauthorized();\n        // if (!c.isActive || c.tokensSold > 0) revert InvalidInput();\n\n        c.isActive = false;\n        c.isCancelled = true;\n\n        emit CampaignCancelled(_campaignId, c.creator);\n    }\n\n    function claimRefund(uint32 _campaignId) external nonReentrant {\n        Campaign storage c = campaigns[_campaignId];\n\n        bool refundable = c.isCancelled || (uint64(block.timestamp) > c.deadline && !c.isFundingComplete);\n        if (!refundable) revert InvalidInput();\n\n        uint128 investment = c.investments[msg.sender];\n        c.investments[msg.sender] = 0;\n\n        uint256 tokenBalance = IERC20(address(c.token)).balanceOf(msg.sender);\n        if (tokenBalance > 0) {\n            TokenFacet(address(c.token)).burnFrom(msg.sender, tokenBalance);\n        }\n\n        usdcToken.safeTransfer(msg.sender, investment);\n        emit RefundClaimed(_campaignId, msg.sender, investment);\n    }\n\n    function getUserInvestment(uint32 _campaignId, address _user) campaignExists(_campaignId) external view returns (uint128) {\n        return campaigns[_campaignId].investments[_user];\n    }\n\n    function _completeFunding(uint32 _campaignId) internal {\n        Campaign storage c = campaigns[_campaignId];\n\n        c.isActive = false;\n        c.isFundingComplete = true;\n\n        uint128 creatorFunding = c.amountRaised / 2;\n        uint128 liquidityFunding = c.amountRaised - creatorFunding;\n\n        TokenFacet(address(c.token)).mint(c.creator, c.creatorAllocation);\n        TokenFacet(address(c.token)).mint(address(this), c.platformFeeTokens);\n\n        usdcToken.safeTransfer(c.creator, creatorFunding);\n\n        totalPlatformFees += (liquidityFunding * platformFeePercentage) / BASIS_POINTS;\n\n        _addLiquidity(_campaignId, liquidityFunding);\n\n        emit FundingCompleted(_campaignId, c.amountRaised);\n    }\n\n    function _addLiquidity(uint32 _campaignId, uint128 usdcAmount) internal {\n        Campaign storage c = campaigns[_campaignId];\n\n        TokenFacet(address(c.token)).mint(address(this), c.liquidityAllocation);\n\n        require(IERC20(usdcToken).approve(address(uniswapRouter), usdcAmount), \"approve failed.\");\n        require(IERC20(address(c.token)).approve(address(uniswapRouter), c.liquidityAllocation), \"approve failed.\");\n\n        address pair = IUniswapV2Factory(address(uniswapFactory)).getPair(address(usdcToken), address(c.token));\n\n        if (pair == address(0)) {\n            pair = IUniswapV2Factory(uniswapFactory).createPair(address(usdcToken), address(c.token));\n        }\n\n        c.uniswapPair = pair;\n\n        try uniswapRouter.addLiquidity(\n            address(usdcToken),\n            address(c.token),\n            usdcAmount,\n            c.liquidityAllocation,\n            (usdcAmount * 95) / 100,\n            (c.liquidityAllocation * 95) / 100,\n            c.creator,\n            block.timestamp + 300\n        ) {\n            emit LiquidityAdded(_campaignId, usdcAmount, c.liquidityAllocation);\n        } catch {\n            usdcToken.safeTransfer(c.creator, usdcAmount);\n            IERC20(address(c.token)).safeTransfer(c.creator, c.liquidityAllocation);\n        }\n    }\n\n    function _getCampaignInfo(uint32 _campaignId) public view returns (CampaignInfo memory) {\n        Campaign storage c = campaigns[_campaignId];\n        \n        return CampaignInfo({\n            id: c.id,\n            creator: c.creator,\n            targetAmount: c.targetAmount,\n            amountRaised: c.amountRaised,\n            tokensSold: c.tokensSold,\n            totalSupply: c.totalSupply,\n            tokensForSale: c.tokensForSale,\n            creatorAllocation: c.creatorAllocation,\n            liquidityAllocation: c.liquidityAllocation,\n            platformFeeTokens: c.platformFeeTokens,\n            deadline: c.deadline,\n            tokenAddress: address(c.token),\n            isActive: c.isActive,\n            isFundingComplete: c.isFundingComplete,\n            isCancelled: c.isCancelled,\n            name: c.name,\n            symbol: c.symbol,\n            description: c.description,\n            reserveRatio: c.reserveRatio,\n            uniswapPair: c.uniswapPair,\n            blockNumberCreated: c.blockNumberCreated,\n            promotionalOgPoints: c.promotionalOgPoints,\n            isPromoted: c.isPromoted\n        });\n    }\n\n    receive() external payable {}\n}"
    },
    "contracts/LaunchpadV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport \"./library/LaunchpadCore.sol\";\nimport \"./Token.sol\";\n\nimport \"./interfaces/IUniswapV2Router.sol\";\nimport \"./interfaces/IUniswapV2Factory.sol\";\n\nstruct CampaignInfo {\n    uint256 id;\n    address creator;\n    uint256 targetAmount;\n    uint256 amountRaised;\n    uint256 tokensSold;\n    uint256 totalSupply;\n    uint256 tokensForSale;\n    uint256 creatorAllocation;\n    uint256 liquidityAllocation;\n    uint256 platformFeeTokens;\n    uint256 deadline;\n    address tokenAddress;\n    bool isActive;\n    bool isFundingComplete;\n    bool isCancelled;\n    string name;\n    string symbol;\n    string description;\n    uint32 reserveRatio;\n    uint256 blockNumberCreated;\n    uint256 promotionalOgPoints;\n    bool isPromoted;\n    address uniswapPair;\n}\nstruct Campaign {\n    uint256 id;\n    address creator;\n    uint256 targetAmount;\n    uint256 amountRaised;\n    uint256 tokensSold;\n    uint256 totalSupply;\n    uint256 tokensForSale;\n    uint256 creatorAllocation;\n    uint256 liquidityAllocation;\n    uint256 platformFeeTokens;\n    uint256 deadline;\n    IERC20 token;\n    bool isActive;\n    bool isFundingComplete;\n    bool isCancelled;\n    string name;\n    string symbol;\n    string description;\n    uint32 reserveRatio;\n    address uniswapPair;\n    uint256 blockNumberCreated;\n    uint256 promotionalOgPoints;\n    bool isPromoted;\n    mapping(address => uint256) investments;\n}\n\ninterface IParentContract {\n    function getSummaryStats()\n        external\n        view\n        returns (\n            uint256 totalCampaigns,\n            uint256 activeCampaigns,\n            uint256 completedCampaigns,\n            uint256 cancelledCampaigns,\n            uint256 expiredCampaigns,\n            uint256 totalFundingRaised\n        );\n\n    function campaignCount() external view returns (uint32);\n\n    function campaigns(uint256) external view returns (CampaignInfo memory);\n\n    function _getCampaignInfo(uint32) external view returns (CampaignInfo memory);\n\n    function usdcToken() external view returns (IERC20);\n\n    function userParticipatedCampaigns(address) external view returns (uint32[] memory);\n\n    function creatorCampaigns(address) external view returns (uint32[] memory);\n\n    function getUserInvestment(uint32 campaignId, address user) external view returns (uint128);\n}\n\ncontract LaunchpadV2 is ReentrancyGuard {\n\n    using SafeERC20 for IERC20;\n\n    IParentContract parentContract;\n    // uint256 campaignCount = IParentContract(parentContract).campaignCount();\n    IERC20 public usdcToken;\n    IUniswapV2Router public uniswapRouter;\n    IUniswapV2Factory public uniswapFactory;\n\n    error ZeroValueNotAllowed();\n    error ReserveRatioOutOfBounds();\n    error CampaignInactive();\n    error FundingAlreadyCompleted();\n    error FundingNotMet();\n    error InvalidParameters();\n    error NotCampaignOwner();\n    error NotEnoughTokens();\n    error InsufficientFunds();\n    error AddressZeroDetected();\n    error InvalidSupply();\n    error CampaignDoesNotExist();\n    error DeadlineExpired();\n    error DeadlineTooShort();\n    error UserCannotClaimRefund();\n    error Unauthorized();\n    error InvalidInput();\n\n    event CampaignCancelled(\n        uint256 indexed campaignId,\n        address indexed creator\n    );\n\n    event RefundClaimed(\n        uint256 indexed campaignId,\n        address indexed investor,\n        uint256 amount\n    );\n\n\n    constructor(address _parentContract, address _usdcToken, address _uniswapRouter, address _uniswapFactory) {\n        parentContract = IParentContract(_parentContract);\n        usdcToken = IERC20(_usdcToken);\n        uniswapRouter = IUniswapV2Router(_uniswapRouter);\n        uniswapFactory = IUniswapV2Factory(_uniswapFactory);\n    }\n\n   /**\n     * @dev Swap campaign token for USDC using Uniswap pool\n     * @param _campaignId ID of the campaign\n     * @param _tokenAmount Amount of tokens to swap\n     * @param _minUsdcOut Minimum USDC expected (for slippage protection)\n     * @param _deadline Transaction deadline\n    */\n    function swapTokenForUsdc(\n        uint32 _campaignId,\n        uint256 _tokenAmount,\n        uint256 _minUsdcOut,\n        uint256 _deadline\n    ) external nonReentrant {\n        uint256 campaignCount = IParentContract(parentContract).campaignCount();\n        if (_campaignId == 0 || _campaignId > campaignCount)\n            revert CampaignDoesNotExist();\n        if (_tokenAmount == 0) revert ZeroValueNotAllowed();\n        if (_deadline <= block.timestamp) revert DeadlineExpired();\n\n        CampaignInfo memory campaign = IParentContract(parentContract)._getCampaignInfo(_campaignId);\n\n        if (!campaign.isFundingComplete) revert FundingNotMet();\n        if (campaign.uniswapPair == address(0)) revert InvalidParameters();\n\n        address token = campaign.tokenAddress;\n        \n        // Check user has enough tokens\n        if (IERC20(token).balanceOf(msg.sender) < _tokenAmount) revert NotEnoughTokens();\n\n        // Transfer tokens from user to this contract\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _tokenAmount);\n\n        // Approve router to spend tokens\n        IERC20(token).approve(address(uniswapRouter), _tokenAmount);\n\n        // Set up swap path: token -> USDC (CORRECTED)\n        address[] memory path = new address[](2);\n        path[0] = address(token);  // FROM: campaign token\n        path[1] = address(usdcToken);  // TO: USDC\n\n        // Perform swap: sell exact tokens for minimum USDC\n        uniswapRouter.swapExactTokensForTokens(\n            _tokenAmount,    // exact amount of tokens to sell\n            _minUsdcOut,     // minimum USDC to receive\n            path,            // token -> USDC path\n            msg.sender,      // send USDC directly to user\n            _deadline        // deadline\n        );\n    }\n\n\n    function swapUsdcForToken(\n        uint32 _campaignId,\n        uint256 _usdcAmount,\n        uint256 _minTokenOut,\n        uint256 _deadline\n    ) external nonReentrant {\n        uint256 campaignCount = IParentContract(parentContract).campaignCount();\n        if (_campaignId == 0 || _campaignId > campaignCount) revert CampaignDoesNotExist();\n        if (_usdcAmount == 0) revert ZeroValueNotAllowed();\n        if (_deadline <= block.timestamp) revert DeadlineExpired();\n\n        CampaignInfo memory campaign =  IParentContract(parentContract)._getCampaignInfo(_campaignId);\n\n        if (!campaign.isFundingComplete) revert FundingNotMet();\n        if (campaign.uniswapPair == address(0)) revert InvalidParameters();\n\n        address token = campaign.tokenAddress;\n        IERC20 usdc = usdcToken;\n\n        // Check user has enough USDC\n        if (usdc.balanceOf(msg.sender) < _usdcAmount) revert NotEnoughTokens();\n\n        // Transfer USDC from user to this contract\n        usdc.safeTransferFrom(msg.sender, address(this), _usdcAmount);\n\n        // Approve router to spend USDC\n        usdc.approve(address(uniswapRouter), _usdcAmount);\n\n        // Set up swap path: USDC -> token\n        address[] memory path = new address[](2);\n        path[0] = address(usdc);\n        path[1] = address(token);\n\n        // Perform swap: sell exact USDC for minimum token\n        uniswapRouter.swapExactTokensForTokens(\n            _usdcAmount,\n            _minTokenOut,\n            path,\n            msg.sender,\n            _deadline\n        );\n    }\n\n    /**\n     * @dev Add liquidity to existing pool (for users after campaign completion)\n     * @param _campaignId ID of the campaign\n     * @param _tokenAmount Amount of tokens to add\n     * @param _usdcAmount Amount of USDC to add\n     * @param _minTokenLiquidity Minimum tokens for liquidity\n     * @param _minUsdcLiquidity Minimum USDC for liquidity\n     * @param _deadline Transaction deadline\n     */\n    function addLiquidityToPool(\n        uint32 _campaignId,\n        uint256 _tokenAmount,\n        uint256 _usdcAmount,\n        uint256 _minTokenLiquidity,\n        uint256 _minUsdcLiquidity,\n        uint256 _deadline\n    ) external nonReentrant {\n        uint256 campaignCount = IParentContract(parentContract).campaignCount();\n        if (_campaignId == 0 || _campaignId > campaignCount) revert CampaignDoesNotExist();\n        if (_tokenAmount == 0 || _usdcAmount == 0) revert ZeroValueNotAllowed();\n        if (_deadline <= block.timestamp) revert DeadlineExpired();\n\n        CampaignInfo memory campaign =  IParentContract(parentContract)._getCampaignInfo(_campaignId);\n\n        if (!campaign.isFundingComplete) revert FundingNotMet();\n        if (campaign.uniswapPair == address(0)) revert InvalidParameters();\n\n        address token = campaign.tokenAddress;\n\n        // Check balances\n        if (IERC20(token).balanceOf(msg.sender) < _tokenAmount) revert NotEnoughTokens();\n        if (usdcToken.balanceOf(msg.sender) < _usdcAmount) revert InsufficientFunds();\n\n        // Check allowances\n        if (IERC20(token).allowance(msg.sender, address(this)) < _tokenAmount) revert InsufficientFunds();\n        if (usdcToken.allowance(msg.sender, address(this)) < _usdcAmount) revert InsufficientFunds();\n\n        // Transfer tokens from user\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _tokenAmount);\n        usdcToken.safeTransferFrom(msg.sender, address(this), _usdcAmount);\n\n        // Approve router\n        require(IERC20(token).approve(address(uniswapRouter), _tokenAmount), \"Token approve failed\");\n        require(usdcToken.approve(address(uniswapRouter), _usdcAmount), \"USDC approve failed\");\n\n        // Add liquidity\n        try uniswapRouter.addLiquidity(\n            address(token),\n            address(usdcToken),\n            _tokenAmount,\n            _usdcAmount,\n            _minTokenLiquidity,\n            _minUsdcLiquidity,\n            msg.sender, // LP tokens go to user\n            _deadline\n        ) {\n            // Success - liquidity added\n        } catch {\n            // If failed, return tokens to user\n            IERC20(token).safeTransfer(msg.sender, _tokenAmount);\n            usdcToken.safeTransfer(msg.sender, _usdcAmount);\n            revert(\"Failed to add liquidity\");\n        }\n    }\n\n\n\n    function getUserParticipatedCampaignsWithInvestmentCheck(\n        address _user\n    ) external view returns (CampaignInfo[] memory) {\n        uint32 totalCampaigns = IParentContract(parentContract).campaignCount();\n        IParentContract extendedParent = IParentContract(address(parentContract));\n        \n        // First pass: count participated campaigns\n        uint32 participatedCount = 0;\n        for (uint32 i = 1; i <= totalCampaigns; i++) {\n            try extendedParent.getUserInvestment(i, _user) returns (uint128 investment) {\n                if (investment > 0) {\n                    participatedCount++;\n                }\n            } catch {\n                // Skip if function doesn't exist or reverts\n                continue;\n            }\n        }\n\n        // Second pass: populate array\n        CampaignInfo[] memory participatedCampaigns = new CampaignInfo[](participatedCount);\n        uint32 index = 0;\n        \n        for (uint32 i = 1; i <= totalCampaigns; i++) {\n            try extendedParent.getUserInvestment(i, _user) returns (uint128 investment) {\n                if (investment > 0) {\n                    participatedCampaigns[index] = IParentContract(parentContract)._getCampaignInfo(i);\n                    index++;\n                }\n            } catch {\n                continue;\n            }\n        }\n\n        return participatedCampaigns;\n    }\n\n\n    /**\n     * @dev Get campaigns created by a user by iterating through all campaigns\n     * This is less gas efficient but works without modifying the parent contract\n     */\n    function getCampaignsByCreator(\n        address _creator\n    ) external view returns (CampaignInfo[] memory) {\n        uint32 totalCampaigns = IParentContract(parentContract).campaignCount();\n        \n        // First pass: count campaigns by this creator\n        uint32 creatorCampaignCount = 0;\n        for (uint32 i = 1; i <= totalCampaigns; i++) {\n            CampaignInfo memory campaign = IParentContract(parentContract)._getCampaignInfo(i);\n            if (campaign.creator == _creator) {\n                creatorCampaignCount++;\n            }\n        }\n\n        // Second pass: populate the array\n        CampaignInfo[] memory campaignsLocal = new CampaignInfo[](creatorCampaignCount);\n        uint32 index = 0;\n        \n        for (uint32 i = 1; i <= totalCampaigns; i++) {\n            CampaignInfo memory campaign = IParentContract(parentContract)._getCampaignInfo(i);\n            if (campaign.creator == _creator) {\n                campaignsLocal[index] = campaign;\n                index++;\n            }\n        }\n\n        return campaignsLocal;\n    }\n\n\n    /**\n     * @dev Get summary statistics\n     * @return totalCampaigns Total number of campaigns\n     * @return activeCampaigns Number of active campaigns  \n     * @return completedCampaigns Number of completed campaigns\n     * @return cancelledCampaigns Number of cancelled campaigns\n     * @return expiredCampaigns Number of expired campaigns\n     * @return totalFundingRaised Total USDC raised across all campaigns\n     */\n    function getSummaryStats() external view returns (\n        uint256 totalCampaigns,\n        uint256 activeCampaigns,\n        uint256 completedCampaigns, \n        uint256 cancelledCampaigns,\n        uint256 expiredCampaigns,\n        uint256 totalFundingRaised\n    ) {\n    \n        uint256 campaignCount = IParentContract(parentContract).campaignCount();\n        for (uint32 i = 1; i <= campaignCount; i++) {\n            CampaignInfo memory campaign = IParentContract(parentContract)._getCampaignInfo(i);\n            totalFundingRaised += campaign.amountRaised;\n            \n            if (campaign.isCancelled) {\n                cancelledCampaigns++;\n            } else if (campaign.isFundingComplete) {\n                completedCampaigns++;\n            } else if (block.timestamp > campaign.deadline) {\n                expiredCampaigns++;\n            } else {\n                activeCampaigns++;\n            }\n\n            totalCampaigns++;\n        }\n        \n        return (\n            totalCampaigns,\n            activeCampaigns,\n            completedCampaigns,\n            cancelledCampaigns,\n            expiredCampaigns,\n            totalFundingRaised\n        );\n    }\n\n    /**\n     * @dev Preview tokens received for USDC amount\n     */\n    function previewPurchase(\n        uint32 _campaignId,\n        uint256 _usdcAmount\n    ) external view returns (uint256 tokensReceived) {\n\n        uint256 campaignCount = IParentContract(parentContract).campaignCount();\n\n        if (_campaignId == 0 || _campaignId > campaignCount) revert Launchpad.InvalidInput();\n        CampaignInfo memory campaign = IParentContract(parentContract)._getCampaignInfo(_campaignId);\n\n        if (\n            !campaign.isActive ||\n            campaign.isFundingComplete ||\n            campaign.isCancelled\n        ) {\n            return 0;\n        }\n\n        return\n            LaunchPadCore._calculatePurchaseReturn(\n                campaign.tokensForSale,\n                campaign.amountRaised,\n                campaign.reserveRatio,\n                _usdcAmount\n            );\n    }\n\n\n      /**\n     * @dev Get all campaigns with pagination\n     * @param _offset Starting index for pagination (0-based)\n     * @param _limit Number of campaigns to return (max 50)\n     * @return campaignsLocal Array of campaign info\n     * @return total Total number of campaigns\n     * @return hasMore Whether there are more campaigns after this page\n     */\n    function getAllCampaignsPaginated(\n        uint32 _offset,\n        uint32 _limit\n    )\n        external\n        view\n        returns (\n            CampaignInfo[] memory campaignsLocal,\n            uint32 total,\n            bool hasMore\n        )\n    {\n        if (_limit == 0 || _limit > 50) revert InvalidInput();\n\n        uint32 campaignCount = parentContract.campaignCount();\n        total = campaignCount;\n\n        if (_offset >= campaignCount) {\n            return (new CampaignInfo[](0), total, false);\n        }\n\n        uint32 remaining = campaignCount - _offset;\n        uint32 actualLimit = remaining > _limit ? _limit : remaining;\n\n        campaignsLocal = new CampaignInfo[](actualLimit);\n\n        for (uint32 i = 0; i < actualLimit; i++) {\n            uint32 campaignId = _offset + i + 1; // Campaign IDs start at 1\n            campaignsLocal[i] = parentContract._getCampaignInfo(campaignId);\n        }\n\n        hasMore = _offset + actualLimit < campaignCount;\n\n        return (campaignsLocal, total, hasMore);\n    }    \n\n\n    /**\n     * @dev Get expected swap output for debugging\n     * @param _campaignId ID of the campaign\n     * @param _tokenAmountIn Amount of tokens to swap\n     * @return expectedUsdcOut Expected USDC output\n     */\n    function getSwapAmountOut(\n        uint32 _campaignId, \n        uint256 _tokenAmountIn\n    ) external view returns (uint256 expectedUsdcOut) {\n        CampaignInfo memory campaign = IParentContract(parentContract)._getCampaignInfo(_campaignId);\n\n        \n        if (campaign.uniswapPair == address(0) || _tokenAmountIn == 0) {\n            return 0;\n        }\n\n        // Set up path\n        address[] memory path = new address[](2);\n        path[0] = campaign.tokenAddress;\n        path[1] = address(usdcToken);\n\n        try uniswapRouter.getAmountsOut(_tokenAmountIn, path) returns (uint[] memory amounts) {\n            return amounts[1]; // USDC amount out\n        } catch {\n            return 0;\n        }\n    }\n\n    /**\n     * @dev Get expected token output when swapping USDC\n     * @param _campaignId ID of the campaign\n     * @param _usdcAmountIn Amount of USDC to swap\n     * @return expectedTokenOut Expected token output\n     */\n    function getTokenAmountOut(\n        uint32 _campaignId, \n        uint256 _usdcAmountIn\n    ) external view returns (uint256 expectedTokenOut) {\n        CampaignInfo memory campaign = IParentContract(parentContract)._getCampaignInfo(_campaignId);\n        \n        if (campaign.uniswapPair == address(0) || _usdcAmountIn == 0) {\n            return 0;\n        }\n\n        // Set up path: USDC → Token\n        address[] memory path = new address[](2);\n        path[0] = address(usdcToken);\n        path[1] = campaign.tokenAddress;\n\n        try uniswapRouter.getAmountsOut(_usdcAmountIn, path) returns (uint[] memory amounts) {\n            return amounts[1]; // Token amount out\n        } catch {\n            return 0;\n        }\n    }\n\n\n    /**\n     * @dev Get user's total investment across all campaigns\n     * @param _user The user's address\n     * @return totalInvestment Total USDC amount invested by the user\n     * @return campaignsParticipated Number of campaigns the user participated in\n     */\n    function getUserTotalInvestment(address _user) \n        external \n        view \n        returns (uint256 totalInvestment, uint32 campaignsParticipated) \n    {\n        if (_user == address(0)) revert AddressZeroDetected();\n        \n        uint32 totalCampaigns = IParentContract(parentContract).campaignCount();\n        IParentContract extendedParent = IParentContract(address(parentContract));\n        \n        for (uint32 i = 1; i <= totalCampaigns; i++) {\n            try extendedParent.getUserInvestment(i, _user) returns (uint128 investment) {\n                if (investment > 0) {\n                    totalInvestment += investment;\n                    campaignsParticipated++;\n                }\n            } catch {\n                // Skip if function doesn't exist or reverts\n                continue;\n            }\n        }\n        \n        return (totalInvestment, campaignsParticipated);\n    }\n\n}\n"
    },
    "contracts/library/LaunchpadCore.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\nimport \"../Launchpad.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\nimport \"../library/Power.sol\";\n\nlibrary LaunchPadCore {\n\n    /**\n     * @dev Calculate purchase return using Bancor formula (improved version)\n     */\n\n    uint32 public constant MAX_RESERVE_RATIO = 1000000;\n\n    function _calculatePurchaseReturn(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _reserveRatio,\n        uint256 _depositAmount\n    ) internal pure returns (uint256) {\n        if (_depositAmount == 0) return 0;\n\n        require(\n            _supply > 0 &&\n                _reserveRatio > 0 &&\n                _reserveRatio <= MAX_RESERVE_RATIO,\n            \"Invalid bonding curve parameters\"\n        );\n\n        // Handle first purchase\n        if (_reserveBalance == 0) {\n            // Linear pricing for first purchase to bootstrap the curve\n            return _depositAmount * (10 ** 12); // Convert USDC (6 decimals) to token scale (18 decimals)\n        }\n\n        // Special case for 100% reserve ratio (linear bonding curve)\n        if (_reserveRatio == MAX_RESERVE_RATIO) {\n            return _supply * _depositAmount / _reserveBalance;\n        }\n\n        // Calculate using Bancor power function\n        uint256 result;\n        uint8 precision;\n        uint256 baseN = _depositAmount + _reserveBalance;\n\n        (result, precision) = PowerLib.power(\n            baseN,\n            _reserveBalance,\n            _reserveRatio,\n            MAX_RESERVE_RATIO\n        );\n\n        uint256 newTokenSupply = _supply * result >> precision;\n        return newTokenSupply > _supply ? newTokenSupply - _supply : 0;}\n        /**\n     * @dev Calculate exact USDC needed for remaining tokens (simplified for this example)\n     */\n    function _calculateExactUsdcForTokens(\n        Launchpad.Campaign storage campaign,\n        uint256 remainingTokens\n    ) internal view returns (uint256) {\n        // This is a simplified calculation - in production, you'd want more precise math\n        uint256 avgPrice = campaign.targetAmount * (10 ** 18) / campaign.tokensForSale;\n        return remainingTokens * avgPrice / (10 ** 18);\n    }\n\n}"
    },
    "contracts/library/Math.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n/**\n * @title Math Library\n * @dev Mathematical operations with safety checks\n */\nlibrary Math {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on overflow\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"Math: subtraction underflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"Math: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on division by zero\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"Math: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"Math: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the largest of two numbers\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the square root of a number\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n        \n        // Seven iterations should be enough\n        result = (result + a / result) >> 1;\n        result = (result + a / result) >> 1;\n        result = (result + a / result) >> 1;\n        result = (result + a / result) >> 1;\n        result = (result + a / result) >> 1;\n        result = (result + a / result) >> 1;\n        result = (result + a / result) >> 1;\n        \n        return min(result, a / result);\n    }\n}"
    },
    "contracts/library/Power.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.20;\n\n/**\n * @title Power Library by Bancor\n * @dev https://github.com/bancorprotocol/contracts\n *\n * Modified from the original by Slava Balasanov & Tarrence van As\n * Converted to library from Power.sol\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements;\n * and to You under the Apache License, Version 2.0.\n */\nlibrary PowerLib {\n    string public constant VERSION = \"0.3\";\n\n    uint256 private constant ONE = 1;\n    uint32 private constant MAX_WEIGHT = 1000000;\n    uint8 private constant MIN_PRECISION = 32;\n    uint8 private constant MAX_PRECISION = 127;\n\n    uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\n    uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\n    uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\n\n    uint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\n    uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\n\n    uint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;\n    uint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;\n\n    // Auto-generated maxExpArray\n    function getMaxExpArray() internal pure returns (uint256[128] memory) {\n        uint256[128] memory maxExpArray;\n        maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;\n        maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;\n        maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;\n        maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;\n        maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;\n        maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;\n        maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;\n        maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;\n        maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;\n        maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;\n        maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;\n        maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;\n        maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;\n        maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;\n        maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;\n        maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;\n        maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;\n        maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;\n        maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;\n        maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\n        maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;\n        maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;\n        maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;\n        maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;\n        maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\n        maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;\n        maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;\n        maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;\n        maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;\n        maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;\n        maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;\n        maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;\n        maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;\n        maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;\n        maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;\n        maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\n        maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\n        maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;\n        maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;\n        maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;\n        maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;\n        maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;\n        maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;\n        maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;\n        maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;\n        maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;\n        maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\n        maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\n        maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\n        maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;\n        maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\n        maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\n        maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;\n        maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;\n        maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\n        maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\n        maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;\n        maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\n        maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\n        maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;\n        maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;\n        maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;\n        maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;\n        maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;\n        maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\n        maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\n        maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;\n        maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\n        maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\n        maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\n        maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\n        maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\n        maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\n        maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\n        maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\n        maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\n        maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\n        maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\n        maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\n        maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\n        maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\n        maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\n        maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\n        maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\n        maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\n        maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\n        maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\n        maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\n        maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\n        maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\n        maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\n        maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\n        maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\n        maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\n        maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\n        maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\n        return maxExpArray;\n    }\n\n    function power(uint256 _baseN, uint256 _baseD, uint32 _expN, uint32 _expD) internal pure returns (uint256, uint8) {\n        require(_baseN < MAX_NUM, \"baseN exceeds max value.\");\n        require(_baseN >= _baseD, \"Bases < 1 are not supported.\");\n\n        uint256 baseLog;\n        uint256 base = _baseN * FIXED_1 / _baseD;\n        if (base < OPT_LOG_MAX_VAL) {\n            baseLog = optimalLog(base);\n        } else {\n            baseLog = generalLog(base);\n        }\n\n        uint256 baseLogTimesExp = baseLog * _expN / _expD;\n        if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\n            return (optimalExp(baseLogTimesExp), MAX_PRECISION);\n        } else {\n            uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\n            return (generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision), precision);\n        }\n    }\n\n    function generalLog(uint256 _x) internal pure returns (uint256) {\n        uint256 res = 0;\n        uint256 x = _x;\n\n        if (x >= FIXED_2) {\n            uint8 count = floorLog2(x / FIXED_1);\n            x >>= count;\n            res = count * FIXED_1;\n        }\n\n        if (x > FIXED_1) {\n            for (uint8 i = MAX_PRECISION; i > 0; --i) {\n                x = (x * x) / FIXED_1;\n                if (x >= FIXED_2) {\n                    x >>= 1;\n                    res += ONE << (i - 1);\n                }\n            }\n        }\n\n        return res * LN2_NUMERATOR / LN2_DENOMINATOR;\n    }\n\n    function floorLog2(uint256 _n) internal pure returns (uint8) {\n        uint8 res = 0;\n        uint256 n = _n;\n\n        if (n < 256) {\n            while (n > 1) {\n                n >>= 1;\n                res += 1;\n            }\n        } else {\n            for (uint8 s = 128; s > 0; s >>= 1) {\n                if (n >= (ONE << s)) {\n                    n >>= s;\n                    res |= s;\n                }\n            }\n        }\n\n        return res;\n    }\n\n    function findPositionInMaxExpArray(uint256 _x) internal pure returns (uint8) {\n        uint8 lo = MIN_PRECISION;\n        uint8 hi = MAX_PRECISION;\n\n        while (lo + 1 < hi) {\n            uint8 mid = (lo + hi) / 2;\n            if (getMaxExpArray()[mid] >= _x) {\n                lo = mid;\n            } else {\n                hi = mid;\n            }\n        }\n\n        if (getMaxExpArray()[hi] >= _x) {\n            return hi;\n        }\n        if (getMaxExpArray()[lo] >= _x) {\n            return lo;\n        }\n\n        revert(\"Value not found in maxExpArray\");\n    }\n\n    function generalExp(uint256 _x, uint8 _precision) internal pure returns (uint256) {\n        uint256 xi = _x;\n        uint256 res = 0;\n\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x3442c4e6074a82f1797f72ac0000000; // add x^02 * (33! / 02!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x116b96f757c380fb287fd0e40000000; // add x^03 * (33! / 03!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x045ae5bdd5f0e03eca1ff4390000000; // add x^04 * (33! / 04!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00defabf91302cd95b9ffda50000000; // add x^05 * (33! / 05!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x002529ca9832b22439efff9b8000000; // add x^06 * (33! / 06!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00054f1cf12bd04e516b6da88000000; // add x^07 * (33! / 07!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000a9e39e257a09ca2d6db51000000; // add x^08 * (33! / 08!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000012e066e7b839fa050c309000000; // add x^09 * (33! / 09!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000001e33d7d926c329a1ad1a800000; // add x^10 * (33! / 10!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000002bee513bdb4a6b19b5f800000; // add x^11 * (33! / 11!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000003a9316fa79b88eccf2a00000; // add x^12 * (33! / 12!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000048177ebe1fa812375200000; // add x^13 * (33! / 13!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000005263fe90242dcbacf00000; // add x^14 * (33! / 14!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000057e22099c030d94100000; // add x^15 * (33! / 15!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000057e22099c030d9410000; // add x^16 * (33! / 16!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000052b6b54569976310000; // add x^17 * (33! / 17!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000004985f67696bf748000; // add x^18 * (33! / 18!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000000003dea12ea99e498000; // add x^19 * (33! / 19!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000031880f2214b6e000; // add x^20 * (33! / 20!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000000000025bcff56eb36000; // add x^21 * (33! / 21!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000000000001b722e10ab1000; // add x^22 * (33! / 22!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000001317c70077000; // add x^23 * (33! / 23!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000000000cba84aafa00; // add x^24 * (33! / 24!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000000000082573a0a00; // add x^25 * (33! / 25!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000000000005035ad900; // add x^26 * (33! / 26!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000000000000000002f881b00; // add x^27 * (33! / 27!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000001b29340; // add x^28 * (33! / 28!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000000000000000efc40; // add x^29 * (33! / 29!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000000007fe0; // add x^30 * (33! / 30!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000000000420; // add x^31 * (33! / 31!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000000000021; // add x^32 * (33! / 32!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000000000001; // add x^33 * (33! / 33!)\n\n        return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision);\n    }\n\n    function optimalLog(uint256 x) internal pure returns (uint256) {\n        uint256 res = 0;\n\n        uint256 y;\n        uint256 z;\n        uint256 w;\n\n        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\n            res += 0x40000000000000000000000000000000;\n            x = x * FIXED_1 / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\n        }\n        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\n            res += 0x20000000000000000000000000000000;\n            x = x * FIXED_1 / 0xa45af1e1f40c333b3de1db4dd55f29a7;\n        }\n        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\n            res += 0x10000000000000000000000000000000;\n            x = x * FIXED_1 / 0x910b022db7ae67ce76b441c27035c6a1;\n        }\n        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\n            res += 0x08000000000000000000000000000000;\n            x = x * FIXED_1 / 0x88415abbe9a76bead8d00cf112e4d4a8;\n        }\n        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\n            res += 0x04000000000000000000000000000000;\n            x = x * FIXED_1 / 0x84102b00893f64c705e841d5d4064bd3;\n        }\n        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\n            res += 0x02000000000000000000000000000000;\n            x = x * FIXED_1 / 0x8204055aaef1c8bd5c3259f4822735a2;\n        }\n        if (x >= 0x810100ab00222d861931c15e39b44e99) {\n            res += 0x01000000000000000000000000000000;\n            x = x * FIXED_1 / 0x810100ab00222d861931c15e39b44e99;\n        }\n        if (x >= 0x808040155aabbbe9451521693554f733) {\n            res += 0x00800000000000000000000000000000;\n            x = x * FIXED_1 / 0x808040155aabbbe9451521693554f733;\n        }\n\n        z = y = x - FIXED_1;\n        w = y * y / FIXED_1;\n        res += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000;\n        z = z * w / FIXED_1;\n        res += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000;\n        z = z * w / FIXED_1;\n        res += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000;\n        z = z * w / FIXED_1;\n        res += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000;\n        z = z * w / FIXED_1;\n        res += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000;\n        z = z * w / FIXED_1;\n        res += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000;\n        z = z * w / FIXED_1;\n        res += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000;\n        z = z * w / FIXED_1;\n        res += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;\n\n        return res;\n    }\n\n    function optimalExp(uint256 x) internal pure returns (uint256) {\n        uint256 res = 0;\n\n        uint256 y;\n        uint256 z;\n\n        z = y = x % 0x10000000000000000000000000000000;\n        z = z * y / FIXED_1;\n        res += z\n\n * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = z * y / FIXED_1;\n        res += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = z * y / FIXED_1;\n        res += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = z * y / FIXED_1;\n        res += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = z * y / FIXED_1;\n        res += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = z * y / FIXED_1;\n        res += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = z * y / FIXED_1;\n        res += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = z * y / FIXED_1;\n        res += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = z * y / FIXED_1;\n        res += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = z * y / FIXED_1;\n        res += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = z * y / FIXED_1;\n        res += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = z * y / FIXED_1;\n        res += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = z * y / FIXED_1;\n        res += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = z * y / FIXED_1;\n        res += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = z * y / FIXED_1;\n        res += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = z * y / FIXED_1;\n        res += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = z * y / FIXED_1;\n        res += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = z * y / FIXED_1;\n        res += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = z * y / FIXED_1;\n        res += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        res = res / 0x21c3677c82b40000 + y + FIXED_1;\n\n        if ((x & 0x010000000000000000000000000000000) != 0) {\n            res = res * 0x1c3d6a24ed82218787d624d3e5eba95f9 / 0x18ebef9eac820ae8682b9793ac6d1e776;\n        }\n        if ((x & 0x020000000000000000000000000000000) != 0) {\n            res = res * 0x18ebef9eac820ae8682b9793ac6d1e778 / 0x1368b2fc6f9609fe7aceb46aa619baed4;\n        }\n        if ((x & 0x040000000000000000000000000000000) != 0) {\n            res = res * 0x1368b2fc6f9609fe7aceb46aa619baed5 / 0x0bc5ab1b16779be3575bd8f0520a9f21f;\n        }\n        if ((x & 0x080000000000000000000000000000000) != 0) {\n            res = res * 0x0bc5ab1b16779be3575bd8f0520a9f21e / 0x0454aaa8efe072e7f6ddbab84b40a55c9;\n        }\n        if ((x & 0x100000000000000000000000000000000) != 0) {\n            res = res * 0x0454aaa8efe072e7f6ddbab84b40a55c5 / 0x00960aadc109e7a3bf4578099615711ea;\n        }\n        if ((x & 0x200000000000000000000000000000000) != 0) {\n            res = res * 0x00960aadc109e7a3bf4578099615711d7 / 0x0002bf84208204f5977f9a8cf01fdce3d;\n        }\n        if ((x & 0x400000000000000000000000000000000) != 0) {\n            res = res * 0x0002bf84208204f5977f9a8cf01fdc307 / 0x0000003c6ab775dd0b95b4cbee7e65d11;\n        }\n\n        return res;\n    }\n}"
    },
    "contracts/Token.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title TokenFacet\n * @dev ERC20 token with minting capabilities for the launchpad\n */\ncontract TokenFacet is ERC20, ERC20Burnable, Ownable {\n    \n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _launchpadAddress\n    ) ERC20(_name, _symbol) Ownable(_launchpadAddress) {\n        // The launchpad contract becomes the owner and can mint tokens\n    }\n\n    /**\n     * @dev Mint tokens - only callable by the launchpad (owner)\n     */\n    function mint(address to, uint256 amount) external onlyOwner {\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Burn tokens from a specific address - only callable by the launchpad (owner)\n     */\n    function burnFrom(address from, uint256 amount) public override onlyOwner {\n        _burn(from, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}