{
  "address": "0x6330605C037437270aab6526263595c2297E4B5E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_parentContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressZeroDetected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CampaignDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CampaignInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeadlineExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeadlineTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundingAlreadyCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundingNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParameters",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCampaignOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReserveRatioOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserCannotClaimRefund",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValueNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "CampaignCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RefundClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_usdcAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minTokenLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minUsdcLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityToPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_offset",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_limit",
          "type": "uint32"
        }
      ],
      "name": "getAllCampaignsPaginated",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountRaised",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensSold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensForSale",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creatorAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "platformFeeTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isFundingComplete",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCancelled",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "reserveRatio",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "blockNumberCreated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "promotionalOgPoints",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPromoted",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "uniswapPair",
              "type": "address"
            }
          ],
          "internalType": "struct CampaignInfo[]",
          "name": "campaignsLocal",
          "type": "tuple[]"
        },
        {
          "internalType": "uint32",
          "name": "total",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "hasMore",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getCampaignsByCreator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountRaised",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensSold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensForSale",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creatorAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "platformFeeTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isFundingComplete",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCancelled",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "reserveRatio",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "blockNumberCreated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "promotionalOgPoints",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPromoted",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "uniswapPair",
              "type": "address"
            }
          ],
          "internalType": "struct CampaignInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSummaryStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCampaigns",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeCampaigns",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "completedCampaigns",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cancelledCampaigns",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiredCampaigns",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFundingRaised",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmountIn",
          "type": "uint256"
        }
      ],
      "name": "getSwapAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expectedUsdcOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_usdcAmountIn",
          "type": "uint256"
        }
      ],
      "name": "getTokenAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expectedTokenOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserParticipatedCampaignsWithInvestmentCheck",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountRaised",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensSold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensForSale",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creatorAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "platformFeeTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isFundingComplete",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCancelled",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "reserveRatio",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "blockNumberCreated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "promotionalOgPoints",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPromoted",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "uniswapPair",
              "type": "address"
            }
          ],
          "internalType": "struct CampaignInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserTotalInvestment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalInvestment",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "campaignsParticipated",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_usdcAmount",
          "type": "uint256"
        }
      ],
      "name": "previewPurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensReceived",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minUsdcOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokenForUsdc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_usdcAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minTokenOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapUsdcForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapFactory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdcad7c7ffaf61c31d1d5b3a8d349574c10cd042cfe7c20edd6f0c3e6ed56559d",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x7FBbE68068A3Aa7E479A1E51e792F4C2073b018f",
    "contractAddress": "0x6330605C037437270aab6526263595c2297E4B5E",
    "transactionIndex": 2,
    "gasUsed": "57456114",
    "logsBloom": "0x
    "blockHash": "0x88e4888630def4754c3f9c3aad9ffd008bb78323a88b0492cf1822a566920911",
    "transactionHash": "0xdcad7c7ffaf61c31d1d5b3a8d349574c10cd042cfe7c20edd6f0c3e6ed56559d",
    "logs": [],
    "blockNumber": 165946141,
    "cumulativeGasUsed": "42000",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBb88E6126FdcD4ae6b9e3038a2255D66645AEA7a",
    "0xf2A558c41e9A5505d2E5614a4AAb85f397816d00",
    "0x125933626e9AAadCDe4D776e2fC31d2e715Bc1d3",
    "0xA5f8f44614D6ADAcF924bc3143E0356d9A37A748"
  ],
  "numDeployments": 1,
  "solcInputHash": "50f148701f10ff3011b07be7eaa091fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parentContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressZeroDetected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CampaignDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CampaignInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingAlreadyCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCampaignOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReserveRatioOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserCannotClaimRefund\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValueNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CampaignCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUsdcLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_offset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_limit\",\"type\":\"uint32\"}],\"name\":\"getAllCampaignsPaginated\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFundingComplete\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCancelled\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"reserveRatio\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumberCreated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promotionalOgPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPromoted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"uniswapPair\",\"type\":\"address\"}],\"internalType\":\"struct CampaignInfo[]\",\"name\":\"campaignsLocal\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"total\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"hasMore\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getCampaignsByCreator\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFundingComplete\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCancelled\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"reserveRatio\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumberCreated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promotionalOgPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPromoted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"uniswapPair\",\"type\":\"address\"}],\"internalType\":\"struct CampaignInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSummaryStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCampaigns\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeCampaigns\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"completedCampaigns\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancelledCampaigns\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredCampaigns\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFundingRaised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountIn\",\"type\":\"uint256\"}],\"name\":\"getSwapAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedUsdcOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_usdcAmountIn\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedTokenOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserParticipatedCampaignsWithInvestmentCheck\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFundingComplete\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCancelled\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"reserveRatio\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumberCreated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promotionalOgPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPromoted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"uniswapPair\",\"type\":\"address\"}],\"internalType\":\"struct CampaignInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTotalInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"campaignsParticipated\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_usdcAmount\",\"type\":\"uint256\"}],\"name\":\"previewPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUsdcOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokenForUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_usdcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapUsdcForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"addLiquidityToPool(uint32,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Add liquidity to existing pool (for users after campaign completion)\",\"params\":{\"_campaignId\":\"ID of the campaign\",\"_deadline\":\"Transaction deadline\",\"_minTokenLiquidity\":\"Minimum tokens for liquidity\",\"_minUsdcLiquidity\":\"Minimum USDC for liquidity\",\"_tokenAmount\":\"Amount of tokens to add\",\"_usdcAmount\":\"Amount of USDC to add\"}},\"getAllCampaignsPaginated(uint32,uint32)\":{\"details\":\"Get all campaigns with pagination\",\"params\":{\"_limit\":\"Number of campaigns to return (max 50)\",\"_offset\":\"Starting index for pagination (0-based)\"},\"returns\":{\"campaignsLocal\":\"Array of campaign info\",\"hasMore\":\"Whether there are more campaigns after this page\",\"total\":\"Total number of campaigns\"}},\"getCampaignsByCreator(address)\":{\"details\":\"Get campaigns created by a user by iterating through all campaigns This is less gas efficient but works without modifying the parent contract\"},\"getSummaryStats()\":{\"details\":\"Get summary statistics\",\"returns\":{\"activeCampaigns\":\"Number of active campaigns  \",\"cancelledCampaigns\":\"Number of cancelled campaigns\",\"completedCampaigns\":\"Number of completed campaigns\",\"expiredCampaigns\":\"Number of expired campaigns\",\"totalCampaigns\":\"Total number of campaigns\",\"totalFundingRaised\":\"Total USDC raised across all campaigns\"}},\"getSwapAmountOut(uint32,uint256)\":{\"details\":\"Get expected swap output for debugging\",\"params\":{\"_campaignId\":\"ID of the campaign\",\"_tokenAmountIn\":\"Amount of tokens to swap\"},\"returns\":{\"expectedUsdcOut\":\"Expected USDC output\"}},\"getTokenAmountOut(uint32,uint256)\":{\"details\":\"Get expected token output when swapping USDC\",\"params\":{\"_campaignId\":\"ID of the campaign\",\"_usdcAmountIn\":\"Amount of USDC to swap\"},\"returns\":{\"expectedTokenOut\":\"Expected token output\"}},\"getUserTotalInvestment(address)\":{\"details\":\"Get user's total investment across all campaigns\",\"params\":{\"_user\":\"The user's address\"},\"returns\":{\"campaignsParticipated\":\"Number of campaigns the user participated in\",\"totalInvestment\":\"Total USDC amount invested by the user\"}},\"previewPurchase(uint32,uint256)\":{\"details\":\"Preview tokens received for USDC amount\"},\"swapTokenForUsdc(uint32,uint256,uint256,uint256)\":{\"details\":\"Swap campaign token for USDC using Uniswap pool\",\"params\":{\"_campaignId\":\"ID of the campaign\",\"_deadline\":\"Transaction deadline\",\"_minUsdcOut\":\"Minimum USDC expected (for slippage protection)\",\"_tokenAmount\":\"Amount of tokens to swap\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LaunchpadV2.sol\":\"LaunchpadV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/Launchpad.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./library/Math.sol\\\";\\nimport \\\"./library/LaunchpadCore.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./Token.sol\\\";\\n\\n/**\\n * @title Enhanced Fundraising Launchpad\\n * @dev A fundraising platform implementing the Bancor bonding curve with dynamic token allocations\\n */\\n\\ncontract Launchpad is Initializable, ReentrancyGuardUpgradeable {\\n    using Math for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Packed custom errors\\n    error InvalidInput();\\n    error Unauthorized();\\n    error InactiveCampaign();\\n    error InsufficientBalance();\\n\\n    // Packed events\\n    event CampaignCreated(uint256 indexed campaignId, address indexed creator, string name, uint256 targetFunding, uint256 totalSupply, uint256 deadline);\\n    event TokensPurchased(uint256 indexed campaignId, address indexed buyer, uint256 usdcAmount, uint256 tokensReceived, uint256 timestamp);\\n    event FundingCompleted(uint256 indexed campaignId, uint256 totalFunding);\\n    event LiquidityAdded(uint256 indexed campaignId, uint256 usdcAmount, uint256 tokensAmount);\\n    event CampaignCancelled(uint256 indexed campaignId, address indexed creator);\\n    event RefundClaimed(uint256 indexed campaignId, address indexed investor, uint256 amount);\\n    event PlatformFeeUpdated(uint256 newFee);\\n    event UserParticipatedInCampaign(uint256 indexed campaignId, address indexed user, uint256 amount);\\n    event CampaignPromoted(uint256 indexed campaignId);\\n    event OgPointsAwarded(uint256 indexed campaignId, address indexed user, uint256 amount);\\n\\n    // Packed struct - optimized for storage\\n    struct Campaign {\\n        address creator;           // 20 bytes\\n        IERC20 token;             // 20 bytes\\n        address uniswapPair;      // 20 bytes\\n        uint128 targetAmount;     // 16 bytes - reduced from uint256\\n        uint128 amountRaised;     // 16 bytes - reduced from uint256\\n        uint64 deadline;          // 8 bytes - reduced from uint256 (sufficient until year 2554)\\n        uint32 reserveRatio;      // 4 bytes\\n        uint32 blockNumberCreated; // 4 bytes - reduced from uint256\\n        bool isActive;            // 1 byte\\n        bool isFundingComplete;   // 1 byte\\n        bool isCancelled;         // 1 byte\\n        bool isPromoted;          // 1 byte\\n        // Total: 112 bytes per slot optimization\\n        \\n        // Second storage slot\\n        uint128 tokensSold;       // 16 bytes\\n        uint128 totalSupply;      // 16 bytes\\n        uint128 tokensForSale;    // 16 bytes\\n        uint128 creatorAllocation; // 16 bytes\\n        \\n        // Third storage slot\\n        uint128 liquidityAllocation; // 16 bytes\\n        uint128 platformFeeTokens;   // 16 bytes\\n        uint128 promotionalOgPoints; // 16 bytes\\n        uint32 id;                   // 4 bytes\\n        \\n        string name;\\n        string symbol;\\n        string description;\\n        mapping(address => uint128) investments; // reduced from uint256\\n    }\\n\\n    struct CampaignInfo {\\n        uint32 id;\\n        address creator;\\n        uint128 targetAmount;\\n        uint128 amountRaised;\\n        uint128 tokensSold;\\n        uint128 totalSupply;\\n        uint128 tokensForSale;\\n        uint128 creatorAllocation;\\n        uint128 liquidityAllocation;\\n        uint128 platformFeeTokens;\\n        uint64 deadline;\\n        address tokenAddress;\\n        bool isActive;\\n        bool isFundingComplete;\\n        bool isCancelled;\\n        string name;\\n        string symbol;\\n        string description;\\n        uint32 reserveRatio;\\n        uint32 blockNumberCreated;\\n        uint128 promotionalOgPoints;\\n        bool isPromoted;\\n        address uniswapPair;\\n    }\\n\\n    // Packed constants\\n    uint16 public constant TOKENS_FOR_SALE_PCT = 5000;\\n    uint16 public constant CREATOR_ALLOCATION_PCT = 2000;\\n    uint16 public constant LIQUIDITY_ALLOCATION_PCT = 2500;\\n    uint16 public constant BASIS_POINTS = 10000;\\n    uint16 public constant OG_POINTS_ALLOCATION = 1000;\\n    uint32 public constant MAX_RESERVE_RATIO = 1000000;\\n    uint128 public constant MIN_TOTAL_SUPPLY = 1_000_000 * 10 ** 18;\\n    uint128 public constant MAX_TOTAL_SUPPLY = 1_000_000_000_000 * 10 ** 18;\\n    uint64 public constant MIN_DEADLINE = 1 days;\\n    uint64 public constant MAX_DEADLINE = 365 days;\\n\\n    uint32 public campaignCount;\\n    uint128 public totalPlatformFees;\\n    uint128 public promotionFee;\\n    uint16 public platformFeePercentage;\\n\\n    IERC20 public usdcToken;\\n    IUniswapV2Router public uniswapRouter;\\n    IUniswapV2Factory public uniswapFactory;\\n\\n    mapping(uint256 => Campaign) public campaigns;\\n    mapping(address => uint32[]) public creatorCampaigns;\\n    mapping(address => uint32[]) public userParticipatedCampaigns;\\n    mapping(address => mapping(uint256 => bool)) public userParticipation;\\n    mapping(address => uint128) public ogPoints;\\n\\n    modifier campaignExists(uint256 _campaignId) {\\n        if (_campaignId == 0 || _campaignId > campaignCount) revert InvalidInput();\\n        _;\\n    }\\n\\n    function initialize(address _contractOwner, address _usdcToken, address _uniswapRouter, address _uniswapFactory, uint128 _promotionFee) public initializer {\\n        __ReentrancyGuard_init();\\n        if (_usdcToken == address(0) || _uniswapRouter == address(0) || _uniswapFactory == address(0) || _contractOwner == address(0)) revert InvalidInput();\\n\\n        usdcToken = IERC20(_usdcToken);\\n        uniswapRouter = IUniswapV2Router(_uniswapRouter);\\n        uniswapFactory = IUniswapV2Factory(_uniswapFactory);\\n        platformFeePercentage = 200;\\n        promotionFee = _promotionFee;\\n    }\\n\\n    function createCampaign(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        uint128 _targetFunding,\\n        uint128 _totalSupply,\\n        uint32 _reserveRatio,\\n        uint64 _deadline\\n    ) external returns (uint32 campaignId) {\\n        if (msg.sender == address(0) || _targetFunding == 0) revert InvalidInput();\\n        if (_totalSupply < MIN_TOTAL_SUPPLY || _totalSupply > MAX_TOTAL_SUPPLY) revert InvalidInput();\\n        if (_reserveRatio < 100000 || _reserveRatio > 900000) revert InvalidInput();\\n        if (_deadline <= uint64(block.timestamp) + MIN_DEADLINE || _deadline > uint64(block.timestamp) + MAX_DEADLINE) revert InvalidInput();\\n\\n        uint128 tokensForSale = _totalSupply * TOKENS_FOR_SALE_PCT / BASIS_POINTS;\\n        uint128 creatorAllocation = _totalSupply * CREATOR_ALLOCATION_PCT / BASIS_POINTS;\\n        uint128 liquidityAllocation = _totalSupply * LIQUIDITY_ALLOCATION_PCT / BASIS_POINTS;\\n        uint128 platformFeeTokens = _totalSupply * platformFeePercentage / BASIS_POINTS;\\n\\n        require(tokensForSale + creatorAllocation + liquidityAllocation + platformFeeTokens <= _totalSupply, \\\"Allocations exceed total supply\\\");\\n\\n        TokenFacet campaignToken = new TokenFacet(_name, _symbol, address(this));\\n\\n        campaignId = ++campaignCount;\\n        Campaign storage c = campaigns[campaignId];\\n\\n        c.id = campaignId;\\n        c.creator = msg.sender;\\n        c.targetAmount = _targetFunding;\\n        c.totalSupply = _totalSupply;\\n        c.tokensForSale = tokensForSale;\\n        c.creatorAllocation = creatorAllocation;\\n        c.liquidityAllocation = liquidityAllocation;\\n        c.platformFeeTokens = platformFeeTokens;\\n        c.deadline = _deadline;\\n        c.token = campaignToken;\\n        c.isActive = true;\\n        c.name = _name;\\n        c.symbol = _symbol;\\n        c.description = _description;\\n        c.reserveRatio = _reserveRatio;\\n        c.blockNumberCreated = uint32(block.number);\\n\\n        creatorCampaigns[msg.sender].push(campaignId);\\n\\n        emit CampaignCreated(campaignId, msg.sender, _name, _targetFunding, _totalSupply, _deadline);\\n    }\\n\\n    function promoteCampaign(uint32 _campaignId) external {\\n        Campaign storage c = campaigns[_campaignId];\\n        if (_campaignId == 0 || _campaignId > campaignCount) revert InvalidInput();\\n        if (msg.sender != c.creator) revert Unauthorized();\\n        if (!c.isActive || c.isCancelled || c.isFundingComplete) revert InactiveCampaign();\\n        if (uint64(block.timestamp) > c.deadline) revert InvalidInput();\\n        if (usdcToken.balanceOf(msg.sender) < promotionFee) revert InsufficientBalance();\\n\\n        c.isPromoted = true;\\n        c.promotionalOgPoints = OG_POINTS_ALLOCATION;\\n        totalPlatformFees += c.platformFeeTokens;\\n        usdcToken.safeTransferFrom(msg.sender, address(this), promotionFee);\\n        emit CampaignPromoted(_campaignId);\\n    }\\n\\n    function buyTokens(uint32 _campaignId, uint128 _usdcAmount) external nonReentrant campaignExists(_campaignId) {\\n        if (_usdcAmount == 0) revert InvalidInput();\\n        Campaign storage c = campaigns[_campaignId];\\n\\n        if (!c.isActive || c.isCancelled || c.isFundingComplete) revert InactiveCampaign();\\n        if (uint64(block.timestamp) > c.deadline) revert InvalidInput();\\n        if (usdcToken.balanceOf(msg.sender) < _usdcAmount) revert InsufficientBalance();\\n\\n        uint256 tokensToMint = LaunchPadCore._calculatePurchaseReturn(\\n            c.tokensForSale,\\n            c.amountRaised,\\n            c.reserveRatio,\\n            _usdcAmount\\n        );\\n\\n        if (c.tokensSold + uint128(tokensToMint) > c.tokensForSale) {\\n            uint128 remainingTokens = c.tokensForSale - c.tokensSold;\\n            uint256 usdcNeeded = LaunchPadCore._calculateExactUsdcForTokens(c, remainingTokens);\\n            tokensToMint = remainingTokens;\\n            _usdcAmount = uint128(usdcNeeded);\\n        }\\n\\n        if (!userParticipation[msg.sender][_campaignId]) {\\n            userParticipation[msg.sender][_campaignId] = true;\\n            userParticipatedCampaigns[msg.sender].push(_campaignId);\\n            emit UserParticipatedInCampaign(_campaignId, msg.sender, _usdcAmount);\\n        }\\n\\n        usdcToken.safeTransferFrom(msg.sender, address(this), _usdcAmount);\\n\\n        c.amountRaised += _usdcAmount;\\n        c.tokensSold += uint128(tokensToMint);\\n        c.investments[msg.sender] += _usdcAmount;\\n\\n        if (c.isPromoted && c.promotionalOgPoints > 0) {\\n            uint256 percentage = (uint256(tokensToMint) * 1e18) / c.tokensForSale;\\n            uint128 awardedOgPoints = uint128((percentage * c.promotionalOgPoints) / 1e18);\\n            if (awardedOgPoints > c.promotionalOgPoints) {\\n                awardedOgPoints = c.promotionalOgPoints;\\n            }\\n            ogPoints[msg.sender] += awardedOgPoints;\\n            c.promotionalOgPoints -= awardedOgPoints;\\n            emit OgPointsAwarded(_campaignId, msg.sender, awardedOgPoints);\\n        }\\n\\n        TokenFacet(address(c.token)).mint(msg.sender, tokensToMint);\\n\\n        emit TokensPurchased(_campaignId, msg.sender, _usdcAmount, uint256(tokensToMint), block.timestamp);\\n\\n        if (c.tokensSold >= c.tokensForSale || c.amountRaised >= c.targetAmount) {\\n            _completeFunding(_campaignId);\\n        }\\n    }\\n    \\n    function cancelCampaign(uint32 _campaignId) external campaignExists(_campaignId) {\\n        Campaign storage c = campaigns[_campaignId];\\n\\n        if (msg.sender != c.creator) revert Unauthorized();\\n        if (!c.isActive || c.tokensSold > 0) revert InvalidInput();\\n\\n        c.isActive = false;\\n        c.isCancelled = true;\\n\\n        emit CampaignCancelled(_campaignId, c.creator);\\n    }\\n\\n    function claimRefund(uint32 _campaignId) external nonReentrant {\\n        Campaign storage c = campaigns[_campaignId];\\n\\n        bool refundable = c.isCancelled || (uint64(block.timestamp) > c.deadline && !c.isFundingComplete);\\n        if (!refundable) revert InvalidInput();\\n\\n        uint128 investment = c.investments[msg.sender];\\n        c.investments[msg.sender] = 0;\\n\\n        uint256 tokenBalance = IERC20(address(c.token)).balanceOf(msg.sender);\\n        if (tokenBalance > 0) {\\n            TokenFacet(address(c.token)).burnFrom(msg.sender, tokenBalance);\\n        }\\n\\n        usdcToken.safeTransfer(msg.sender, investment);\\n        emit RefundClaimed(_campaignId, msg.sender, investment);\\n    }\\n\\n    function getUserInvestment(uint32 _campaignId, address _user) campaignExists(_campaignId) external view returns (uint128) {\\n        return campaigns[_campaignId].investments[_user];\\n    }\\n\\n    function _completeFunding(uint32 _campaignId) internal {\\n        Campaign storage c = campaigns[_campaignId];\\n\\n        c.isActive = false;\\n        c.isFundingComplete = true;\\n\\n        uint128 creatorFunding = c.amountRaised / 2;\\n        uint128 liquidityFunding = c.amountRaised - creatorFunding;\\n\\n        TokenFacet(address(c.token)).mint(c.creator, c.creatorAllocation);\\n        TokenFacet(address(c.token)).mint(address(this), c.platformFeeTokens);\\n\\n        usdcToken.safeTransfer(c.creator, creatorFunding);\\n\\n        totalPlatformFees += (liquidityFunding * platformFeePercentage) / BASIS_POINTS;\\n\\n        _addLiquidity(_campaignId, liquidityFunding);\\n\\n        emit FundingCompleted(_campaignId, c.amountRaised);\\n    }\\n\\n    function _addLiquidity(uint32 _campaignId, uint128 usdcAmount) internal {\\n        Campaign storage c = campaigns[_campaignId];\\n\\n        TokenFacet(address(c.token)).mint(address(this), c.liquidityAllocation);\\n\\n        require(IERC20(usdcToken).approve(address(uniswapRouter), usdcAmount), \\\"approve failed.\\\");\\n        require(IERC20(address(c.token)).approve(address(uniswapRouter), c.liquidityAllocation), \\\"approve failed.\\\");\\n\\n        address pair = IUniswapV2Factory(address(uniswapFactory)).getPair(address(usdcToken), address(c.token));\\n\\n        if (pair == address(0)) {\\n            pair = IUniswapV2Factory(uniswapFactory).createPair(address(usdcToken), address(c.token));\\n        }\\n\\n        c.uniswapPair = pair;\\n\\n        try uniswapRouter.addLiquidity(\\n            address(usdcToken),\\n            address(c.token),\\n            usdcAmount,\\n            c.liquidityAllocation,\\n            (usdcAmount * 95) / 100,\\n            (c.liquidityAllocation * 95) / 100,\\n            c.creator,\\n            block.timestamp + 300\\n        ) {\\n            emit LiquidityAdded(_campaignId, usdcAmount, c.liquidityAllocation);\\n        } catch {\\n            usdcToken.safeTransfer(c.creator, usdcAmount);\\n            IERC20(address(c.token)).safeTransfer(c.creator, c.liquidityAllocation);\\n        }\\n    }\\n\\n    function _getCampaignInfo(uint32 _campaignId) public view returns (CampaignInfo memory) {\\n        Campaign storage c = campaigns[_campaignId];\\n        \\n        return CampaignInfo({\\n            id: c.id,\\n            creator: c.creator,\\n            targetAmount: c.targetAmount,\\n            amountRaised: c.amountRaised,\\n            tokensSold: c.tokensSold,\\n            totalSupply: c.totalSupply,\\n            tokensForSale: c.tokensForSale,\\n            creatorAllocation: c.creatorAllocation,\\n            liquidityAllocation: c.liquidityAllocation,\\n            platformFeeTokens: c.platformFeeTokens,\\n            deadline: c.deadline,\\n            tokenAddress: address(c.token),\\n            isActive: c.isActive,\\n            isFundingComplete: c.isFundingComplete,\\n            isCancelled: c.isCancelled,\\n            name: c.name,\\n            symbol: c.symbol,\\n            description: c.description,\\n            reserveRatio: c.reserveRatio,\\n            uniswapPair: c.uniswapPair,\\n            blockNumberCreated: c.blockNumberCreated,\\n            promotionalOgPoints: c.promotionalOgPoints,\\n            isPromoted: c.isPromoted\\n        });\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x1294886bb4ff9e336854ebd9bc66b67501806ce54367a6efea013c925f677315\",\"license\":\"MIT\"},\"contracts/LaunchpadV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./library/LaunchpadCore.sol\\\";\\nimport \\\"./Token.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\n\\nstruct CampaignInfo {\\n    uint256 id;\\n    address creator;\\n    uint256 targetAmount;\\n    uint256 amountRaised;\\n    uint256 tokensSold;\\n    uint256 totalSupply;\\n    uint256 tokensForSale;\\n    uint256 creatorAllocation;\\n    uint256 liquidityAllocation;\\n    uint256 platformFeeTokens;\\n    uint256 deadline;\\n    address tokenAddress;\\n    bool isActive;\\n    bool isFundingComplete;\\n    bool isCancelled;\\n    string name;\\n    string symbol;\\n    string description;\\n    uint32 reserveRatio;\\n    uint256 blockNumberCreated;\\n    uint256 promotionalOgPoints;\\n    bool isPromoted;\\n    address uniswapPair;\\n}\\nstruct Campaign {\\n    uint256 id;\\n    address creator;\\n    uint256 targetAmount;\\n    uint256 amountRaised;\\n    uint256 tokensSold;\\n    uint256 totalSupply;\\n    uint256 tokensForSale;\\n    uint256 creatorAllocation;\\n    uint256 liquidityAllocation;\\n    uint256 platformFeeTokens;\\n    uint256 deadline;\\n    IERC20 token;\\n    bool isActive;\\n    bool isFundingComplete;\\n    bool isCancelled;\\n    string name;\\n    string symbol;\\n    string description;\\n    uint32 reserveRatio;\\n    address uniswapPair;\\n    uint256 blockNumberCreated;\\n    uint256 promotionalOgPoints;\\n    bool isPromoted;\\n    mapping(address => uint256) investments;\\n}\\n\\ninterface IParentContract {\\n    function getSummaryStats()\\n        external\\n        view\\n        returns (\\n            uint256 totalCampaigns,\\n            uint256 activeCampaigns,\\n            uint256 completedCampaigns,\\n            uint256 cancelledCampaigns,\\n            uint256 expiredCampaigns,\\n            uint256 totalFundingRaised\\n        );\\n\\n    function campaignCount() external view returns (uint32);\\n\\n    function campaigns(uint256) external view returns (CampaignInfo memory);\\n\\n    function _getCampaignInfo(uint32) external view returns (CampaignInfo memory);\\n\\n    function usdcToken() external view returns (IERC20);\\n\\n    function userParticipatedCampaigns(address) external view returns (uint32[] memory);\\n\\n    function creatorCampaigns(address) external view returns (uint32[] memory);\\n\\n    function getUserInvestment(uint32 campaignId, address user) external view returns (uint128);\\n}\\n\\ncontract LaunchpadV2 is ReentrancyGuard {\\n\\n    using SafeERC20 for IERC20;\\n\\n    IParentContract parentContract;\\n    // uint256 campaignCount = IParentContract(parentContract).campaignCount();\\n    IERC20 public usdcToken;\\n    IUniswapV2Router public uniswapRouter;\\n    IUniswapV2Factory public uniswapFactory;\\n\\n    error ZeroValueNotAllowed();\\n    error ReserveRatioOutOfBounds();\\n    error CampaignInactive();\\n    error FundingAlreadyCompleted();\\n    error FundingNotMet();\\n    error InvalidParameters();\\n    error NotCampaignOwner();\\n    error NotEnoughTokens();\\n    error InsufficientFunds();\\n    error AddressZeroDetected();\\n    error InvalidSupply();\\n    error CampaignDoesNotExist();\\n    error DeadlineExpired();\\n    error DeadlineTooShort();\\n    error UserCannotClaimRefund();\\n    error Unauthorized();\\n    error InvalidInput();\\n\\n    event CampaignCancelled(\\n        uint256 indexed campaignId,\\n        address indexed creator\\n    );\\n\\n    event RefundClaimed(\\n        uint256 indexed campaignId,\\n        address indexed investor,\\n        uint256 amount\\n    );\\n\\n\\n    constructor(address _parentContract, address _usdcToken, address _uniswapRouter, address _uniswapFactory) {\\n        parentContract = IParentContract(_parentContract);\\n        usdcToken = IERC20(_usdcToken);\\n        uniswapRouter = IUniswapV2Router(_uniswapRouter);\\n        uniswapFactory = IUniswapV2Factory(_uniswapFactory);\\n    }\\n\\n   /**\\n     * @dev Swap campaign token for USDC using Uniswap pool\\n     * @param _campaignId ID of the campaign\\n     * @param _tokenAmount Amount of tokens to swap\\n     * @param _minUsdcOut Minimum USDC expected (for slippage protection)\\n     * @param _deadline Transaction deadline\\n    */\\n    function swapTokenForUsdc(\\n        uint32 _campaignId,\\n        uint256 _tokenAmount,\\n        uint256 _minUsdcOut,\\n        uint256 _deadline\\n    ) external nonReentrant {\\n        uint256 campaignCount = IParentContract(parentContract).campaignCount();\\n        if (_campaignId == 0 || _campaignId > campaignCount)\\n            revert CampaignDoesNotExist();\\n        if (_tokenAmount == 0) revert ZeroValueNotAllowed();\\n        if (_deadline <= block.timestamp) revert DeadlineExpired();\\n\\n        CampaignInfo memory campaign = IParentContract(parentContract)._getCampaignInfo(_campaignId);\\n\\n        if (!campaign.isFundingComplete) revert FundingNotMet();\\n        if (campaign.uniswapPair == address(0)) revert InvalidParameters();\\n\\n        address token = campaign.tokenAddress;\\n        \\n        // Check user has enough tokens\\n        if (IERC20(token).balanceOf(msg.sender) < _tokenAmount) revert NotEnoughTokens();\\n\\n        // Transfer tokens from user to this contract\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n\\n        // Approve router to spend tokens\\n        IERC20(token).approve(address(uniswapRouter), _tokenAmount);\\n\\n        // Set up swap path: token -> USDC (CORRECTED)\\n        address[] memory path = new address[](2);\\n        path[0] = address(token);  // FROM: campaign token\\n        path[1] = address(usdcToken);  // TO: USDC\\n\\n        // Perform swap: sell exact tokens for minimum USDC\\n        uniswapRouter.swapExactTokensForTokens(\\n            _tokenAmount,    // exact amount of tokens to sell\\n            _minUsdcOut,     // minimum USDC to receive\\n            path,            // token -> USDC path\\n            msg.sender,      // send USDC directly to user\\n            _deadline        // deadline\\n        );\\n    }\\n\\n\\n    function swapUsdcForToken(\\n        uint32 _campaignId,\\n        uint256 _usdcAmount,\\n        uint256 _minTokenOut,\\n        uint256 _deadline\\n    ) external nonReentrant {\\n        uint256 campaignCount = IParentContract(parentContract).campaignCount();\\n        if (_campaignId == 0 || _campaignId > campaignCount) revert CampaignDoesNotExist();\\n        if (_usdcAmount == 0) revert ZeroValueNotAllowed();\\n        if (_deadline <= block.timestamp) revert DeadlineExpired();\\n\\n        CampaignInfo memory campaign =  IParentContract(parentContract)._getCampaignInfo(_campaignId);\\n\\n        if (!campaign.isFundingComplete) revert FundingNotMet();\\n        if (campaign.uniswapPair == address(0)) revert InvalidParameters();\\n\\n        address token = campaign.tokenAddress;\\n        IERC20 usdc = usdcToken;\\n\\n        // Check user has enough USDC\\n        if (usdc.balanceOf(msg.sender) < _usdcAmount) revert NotEnoughTokens();\\n\\n        // Transfer USDC from user to this contract\\n        usdc.safeTransferFrom(msg.sender, address(this), _usdcAmount);\\n\\n        // Approve router to spend USDC\\n        usdc.approve(address(uniswapRouter), _usdcAmount);\\n\\n        // Set up swap path: USDC -> token\\n        address[] memory path = new address[](2);\\n        path[0] = address(usdc);\\n        path[1] = address(token);\\n\\n        // Perform swap: sell exact USDC for minimum token\\n        uniswapRouter.swapExactTokensForTokens(\\n            _usdcAmount,\\n            _minTokenOut,\\n            path,\\n            msg.sender,\\n            _deadline\\n        );\\n    }\\n\\n    /**\\n     * @dev Add liquidity to existing pool (for users after campaign completion)\\n     * @param _campaignId ID of the campaign\\n     * @param _tokenAmount Amount of tokens to add\\n     * @param _usdcAmount Amount of USDC to add\\n     * @param _minTokenLiquidity Minimum tokens for liquidity\\n     * @param _minUsdcLiquidity Minimum USDC for liquidity\\n     * @param _deadline Transaction deadline\\n     */\\n    function addLiquidityToPool(\\n        uint32 _campaignId,\\n        uint256 _tokenAmount,\\n        uint256 _usdcAmount,\\n        uint256 _minTokenLiquidity,\\n        uint256 _minUsdcLiquidity,\\n        uint256 _deadline\\n    ) external nonReentrant {\\n        uint256 campaignCount = IParentContract(parentContract).campaignCount();\\n        if (_campaignId == 0 || _campaignId > campaignCount) revert CampaignDoesNotExist();\\n        if (_tokenAmount == 0 || _usdcAmount == 0) revert ZeroValueNotAllowed();\\n        if (_deadline <= block.timestamp) revert DeadlineExpired();\\n\\n        CampaignInfo memory campaign =  IParentContract(parentContract)._getCampaignInfo(_campaignId);\\n\\n        if (!campaign.isFundingComplete) revert FundingNotMet();\\n        if (campaign.uniswapPair == address(0)) revert InvalidParameters();\\n\\n        address token = campaign.tokenAddress;\\n\\n        // Check balances\\n        if (IERC20(token).balanceOf(msg.sender) < _tokenAmount) revert NotEnoughTokens();\\n        if (usdcToken.balanceOf(msg.sender) < _usdcAmount) revert InsufficientFunds();\\n\\n        // Check allowances\\n        if (IERC20(token).allowance(msg.sender, address(this)) < _tokenAmount) revert InsufficientFunds();\\n        if (usdcToken.allowance(msg.sender, address(this)) < _usdcAmount) revert InsufficientFunds();\\n\\n        // Transfer tokens from user\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n        usdcToken.safeTransferFrom(msg.sender, address(this), _usdcAmount);\\n\\n        // Approve router\\n        require(IERC20(token).approve(address(uniswapRouter), _tokenAmount), \\\"Token approve failed\\\");\\n        require(usdcToken.approve(address(uniswapRouter), _usdcAmount), \\\"USDC approve failed\\\");\\n\\n        // Add liquidity\\n        try uniswapRouter.addLiquidity(\\n            address(token),\\n            address(usdcToken),\\n            _tokenAmount,\\n            _usdcAmount,\\n            _minTokenLiquidity,\\n            _minUsdcLiquidity,\\n            msg.sender, // LP tokens go to user\\n            _deadline\\n        ) {\\n            // Success - liquidity added\\n        } catch {\\n            // If failed, return tokens to user\\n            IERC20(token).safeTransfer(msg.sender, _tokenAmount);\\n            usdcToken.safeTransfer(msg.sender, _usdcAmount);\\n            revert(\\\"Failed to add liquidity\\\");\\n        }\\n    }\\n\\n\\n\\n    function getUserParticipatedCampaignsWithInvestmentCheck(\\n        address _user\\n    ) external view returns (CampaignInfo[] memory) {\\n        uint32 totalCampaigns = IParentContract(parentContract).campaignCount();\\n        IParentContract extendedParent = IParentContract(address(parentContract));\\n        \\n        // First pass: count participated campaigns\\n        uint32 participatedCount = 0;\\n        for (uint32 i = 1; i <= totalCampaigns; i++) {\\n            try extendedParent.getUserInvestment(i, _user) returns (uint128 investment) {\\n                if (investment > 0) {\\n                    participatedCount++;\\n                }\\n            } catch {\\n                // Skip if function doesn't exist or reverts\\n                continue;\\n            }\\n        }\\n\\n        // Second pass: populate array\\n        CampaignInfo[] memory participatedCampaigns = new CampaignInfo[](participatedCount);\\n        uint32 index = 0;\\n        \\n        for (uint32 i = 1; i <= totalCampaigns; i++) {\\n            try extendedParent.getUserInvestment(i, _user) returns (uint128 investment) {\\n                if (investment > 0) {\\n                    participatedCampaigns[index] = IParentContract(parentContract)._getCampaignInfo(i);\\n                    index++;\\n                }\\n            } catch {\\n                continue;\\n            }\\n        }\\n\\n        return participatedCampaigns;\\n    }\\n\\n\\n    /**\\n     * @dev Get campaigns created by a user by iterating through all campaigns\\n     * This is less gas efficient but works without modifying the parent contract\\n     */\\n    function getCampaignsByCreator(\\n        address _creator\\n    ) external view returns (CampaignInfo[] memory) {\\n        uint32 totalCampaigns = IParentContract(parentContract).campaignCount();\\n        \\n        // First pass: count campaigns by this creator\\n        uint32 creatorCampaignCount = 0;\\n        for (uint32 i = 1; i <= totalCampaigns; i++) {\\n            CampaignInfo memory campaign = IParentContract(parentContract)._getCampaignInfo(i);\\n            if (campaign.creator == _creator) {\\n                creatorCampaignCount++;\\n            }\\n        }\\n\\n        // Second pass: populate the array\\n        CampaignInfo[] memory campaignsLocal = new CampaignInfo[](creatorCampaignCount);\\n        uint32 index = 0;\\n        \\n        for (uint32 i = 1; i <= totalCampaigns; i++) {\\n            CampaignInfo memory campaign = IParentContract(parentContract)._getCampaignInfo(i);\\n            if (campaign.creator == _creator) {\\n                campaignsLocal[index] = campaign;\\n                index++;\\n            }\\n        }\\n\\n        return campaignsLocal;\\n    }\\n\\n\\n    /**\\n     * @dev Get summary statistics\\n     * @return totalCampaigns Total number of campaigns\\n     * @return activeCampaigns Number of active campaigns  \\n     * @return completedCampaigns Number of completed campaigns\\n     * @return cancelledCampaigns Number of cancelled campaigns\\n     * @return expiredCampaigns Number of expired campaigns\\n     * @return totalFundingRaised Total USDC raised across all campaigns\\n     */\\n    function getSummaryStats() external view returns (\\n        uint256 totalCampaigns,\\n        uint256 activeCampaigns,\\n        uint256 completedCampaigns, \\n        uint256 cancelledCampaigns,\\n        uint256 expiredCampaigns,\\n        uint256 totalFundingRaised\\n    ) {\\n    \\n        uint256 campaignCount = IParentContract(parentContract).campaignCount();\\n        for (uint32 i = 1; i <= campaignCount; i++) {\\n            CampaignInfo memory campaign = IParentContract(parentContract)._getCampaignInfo(i);\\n            totalFundingRaised += campaign.amountRaised;\\n            \\n            if (campaign.isCancelled) {\\n                cancelledCampaigns++;\\n            } else if (campaign.isFundingComplete) {\\n                completedCampaigns++;\\n            } else if (block.timestamp > campaign.deadline) {\\n                expiredCampaigns++;\\n            } else {\\n                activeCampaigns++;\\n            }\\n\\n            totalCampaigns++;\\n        }\\n        \\n        return (\\n            totalCampaigns,\\n            activeCampaigns,\\n            completedCampaigns,\\n            cancelledCampaigns,\\n            expiredCampaigns,\\n            totalFundingRaised\\n        );\\n    }\\n\\n    /**\\n     * @dev Preview tokens received for USDC amount\\n     */\\n    function previewPurchase(\\n        uint32 _campaignId,\\n        uint256 _usdcAmount\\n    ) external view returns (uint256 tokensReceived) {\\n\\n        uint256 campaignCount = IParentContract(parentContract).campaignCount();\\n\\n        if (_campaignId == 0 || _campaignId > campaignCount) revert Launchpad.InvalidInput();\\n        CampaignInfo memory campaign = IParentContract(parentContract)._getCampaignInfo(_campaignId);\\n\\n        if (\\n            !campaign.isActive ||\\n            campaign.isFundingComplete ||\\n            campaign.isCancelled\\n        ) {\\n            return 0;\\n        }\\n\\n        return\\n            LaunchPadCore._calculatePurchaseReturn(\\n                campaign.tokensForSale,\\n                campaign.amountRaised,\\n                campaign.reserveRatio,\\n                _usdcAmount\\n            );\\n    }\\n\\n\\n      /**\\n     * @dev Get all campaigns with pagination\\n     * @param _offset Starting index for pagination (0-based)\\n     * @param _limit Number of campaigns to return (max 50)\\n     * @return campaignsLocal Array of campaign info\\n     * @return total Total number of campaigns\\n     * @return hasMore Whether there are more campaigns after this page\\n     */\\n    function getAllCampaignsPaginated(\\n        uint32 _offset,\\n        uint32 _limit\\n    )\\n        external\\n        view\\n        returns (\\n            CampaignInfo[] memory campaignsLocal,\\n            uint32 total,\\n            bool hasMore\\n        )\\n    {\\n        if (_limit == 0 || _limit > 50) revert InvalidInput();\\n\\n        uint32 campaignCount = parentContract.campaignCount();\\n        total = campaignCount;\\n\\n        if (_offset >= campaignCount) {\\n            return (new CampaignInfo[](0), total, false);\\n        }\\n\\n        uint32 remaining = campaignCount - _offset;\\n        uint32 actualLimit = remaining > _limit ? _limit : remaining;\\n\\n        campaignsLocal = new CampaignInfo[](actualLimit);\\n\\n        for (uint32 i = 0; i < actualLimit; i++) {\\n            uint32 campaignId = _offset + i + 1; // Campaign IDs start at 1\\n            campaignsLocal[i] = parentContract._getCampaignInfo(campaignId);\\n        }\\n\\n        hasMore = _offset + actualLimit < campaignCount;\\n\\n        return (campaignsLocal, total, hasMore);\\n    }    \\n\\n\\n    /**\\n     * @dev Get expected swap output for debugging\\n     * @param _campaignId ID of the campaign\\n     * @param _tokenAmountIn Amount of tokens to swap\\n     * @return expectedUsdcOut Expected USDC output\\n     */\\n    function getSwapAmountOut(\\n        uint32 _campaignId, \\n        uint256 _tokenAmountIn\\n    ) external view returns (uint256 expectedUsdcOut) {\\n        CampaignInfo memory campaign = IParentContract(parentContract)._getCampaignInfo(_campaignId);\\n\\n        \\n        if (campaign.uniswapPair == address(0) || _tokenAmountIn == 0) {\\n            return 0;\\n        }\\n\\n        // Set up path\\n        address[] memory path = new address[](2);\\n        path[0] = campaign.tokenAddress;\\n        path[1] = address(usdcToken);\\n\\n        try uniswapRouter.getAmountsOut(_tokenAmountIn, path) returns (uint[] memory amounts) {\\n            return amounts[1]; // USDC amount out\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Get expected token output when swapping USDC\\n     * @param _campaignId ID of the campaign\\n     * @param _usdcAmountIn Amount of USDC to swap\\n     * @return expectedTokenOut Expected token output\\n     */\\n    function getTokenAmountOut(\\n        uint32 _campaignId, \\n        uint256 _usdcAmountIn\\n    ) external view returns (uint256 expectedTokenOut) {\\n        CampaignInfo memory campaign = IParentContract(parentContract)._getCampaignInfo(_campaignId);\\n        \\n        if (campaign.uniswapPair == address(0) || _usdcAmountIn == 0) {\\n            return 0;\\n        }\\n\\n        // Set up path: USDC \\u2192 Token\\n        address[] memory path = new address[](2);\\n        path[0] = address(usdcToken);\\n        path[1] = campaign.tokenAddress;\\n\\n        try uniswapRouter.getAmountsOut(_usdcAmountIn, path) returns (uint[] memory amounts) {\\n            return amounts[1]; // Token amount out\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n\\n    /**\\n     * @dev Get user's total investment across all campaigns\\n     * @param _user The user's address\\n     * @return totalInvestment Total USDC amount invested by the user\\n     * @return campaignsParticipated Number of campaigns the user participated in\\n     */\\n    function getUserTotalInvestment(address _user) \\n        external \\n        view \\n        returns (uint256 totalInvestment, uint32 campaignsParticipated) \\n    {\\n        if (_user == address(0)) revert AddressZeroDetected();\\n        \\n        uint32 totalCampaigns = IParentContract(parentContract).campaignCount();\\n        IParentContract extendedParent = IParentContract(address(parentContract));\\n        \\n        for (uint32 i = 1; i <= totalCampaigns; i++) {\\n            try extendedParent.getUserInvestment(i, _user) returns (uint128 investment) {\\n                if (investment > 0) {\\n                    totalInvestment += investment;\\n                    campaignsParticipated++;\\n                }\\n            } catch {\\n                // Skip if function doesn't exist or reverts\\n                continue;\\n            }\\n        }\\n        \\n        return (totalInvestment, campaignsParticipated);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xbc8f48da18fadd1e01fadfbc344466806ff53df3682f572fb6c0cfa300e69766\",\"license\":\"MIT\"},\"contracts/Token.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title TokenFacet\\n * @dev ERC20 token with minting capabilities for the launchpad\\n */\\ncontract TokenFacet is ERC20, ERC20Burnable, Ownable {\\n    \\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _launchpadAddress\\n    ) ERC20(_name, _symbol) Ownable(_launchpadAddress) {\\n        // The launchpad contract becomes the owner and can mint tokens\\n    }\\n\\n    /**\\n     * @dev Mint tokens - only callable by the launchpad (owner)\\n     */\\n    function mint(address to, uint256 amount) external onlyOwner {\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Burn tokens from a specific address - only callable by the launchpad (owner)\\n     */\\n    function burnFrom(address from, uint256 amount) public override onlyOwner {\\n        _burn(from, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1ca64fdef4ac26b402f91c037cd05df9177b57c77102a3f71d0ce518341dbba8\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n    function allPairs(uint index) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n}\",\"keccak256\":\"0x85777f5e0acc60be6317ebb39c17d57b782a5de7807edd8822022506f25aa2b6\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IUniswapV2Pair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n}\",\"keccak256\":\"0x93df7f01fe5d7f487a2f5e08419d91d5b401862820bcc47f2f2168dbf83decd1\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IUniswapV2Router\\n * @dev Interface for Uniswap V2 Router\\n */\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n    \\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountOut);\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0xb930879e8a83af6bd8ee8adf881ea18768d465a91190255defd8acbfdad9e9bd\",\"license\":\"MIT\"},\"contracts/library/LaunchpadCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"../Launchpad.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../library/Power.sol\\\";\\n\\nlibrary LaunchPadCore {\\n\\n    /**\\n     * @dev Calculate purchase return using Bancor formula (improved version)\\n     */\\n\\n    uint32 public constant MAX_RESERVE_RATIO = 1000000;\\n\\n    function _calculatePurchaseReturn(\\n        uint256 _supply,\\n        uint256 _reserveBalance,\\n        uint32 _reserveRatio,\\n        uint256 _depositAmount\\n    ) internal pure returns (uint256) {\\n        if (_depositAmount == 0) return 0;\\n\\n        require(\\n            _supply > 0 &&\\n                _reserveRatio > 0 &&\\n                _reserveRatio <= MAX_RESERVE_RATIO,\\n            \\\"Invalid bonding curve parameters\\\"\\n        );\\n\\n        // Handle first purchase\\n        if (_reserveBalance == 0) {\\n            // Linear pricing for first purchase to bootstrap the curve\\n            return _depositAmount * (10 ** 12); // Convert USDC (6 decimals) to token scale (18 decimals)\\n        }\\n\\n        // Special case for 100% reserve ratio (linear bonding curve)\\n        if (_reserveRatio == MAX_RESERVE_RATIO) {\\n            return _supply * _depositAmount / _reserveBalance;\\n        }\\n\\n        // Calculate using Bancor power function\\n        uint256 result;\\n        uint8 precision;\\n        uint256 baseN = _depositAmount + _reserveBalance;\\n\\n        (result, precision) = PowerLib.power(\\n            baseN,\\n            _reserveBalance,\\n            _reserveRatio,\\n            MAX_RESERVE_RATIO\\n        );\\n\\n        uint256 newTokenSupply = _supply * result >> precision;\\n        return newTokenSupply > _supply ? newTokenSupply - _supply : 0;}\\n        /**\\n     * @dev Calculate exact USDC needed for remaining tokens (simplified for this example)\\n     */\\n    function _calculateExactUsdcForTokens(\\n        Launchpad.Campaign storage campaign,\\n        uint256 remainingTokens\\n    ) internal view returns (uint256) {\\n        // This is a simplified calculation - in production, you'd want more precise math\\n        uint256 avgPrice = campaign.targetAmount * (10 ** 18) / campaign.tokensForSale;\\n        return remainingTokens * avgPrice / (10 ** 18);\\n    }\\n\\n}\",\"keccak256\":\"0x4f7cf54dc8ce3d8e4764b159eb0298876d5f2ce4ea94b7e8ac20d6e06a0597dd\",\"license\":\"MIT\"},\"contracts/library/Math.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title Math Library\\n * @dev Mathematical operations with safety checks\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"Math: subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"Math: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on division by zero\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"Math: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"Math: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n        \\n        // Seven iterations should be enough\\n        result = (result + a / result) >> 1;\\n        result = (result + a / result) >> 1;\\n        result = (result + a / result) >> 1;\\n        result = (result + a / result) >> 1;\\n        result = (result + a / result) >> 1;\\n        result = (result + a / result) >> 1;\\n        result = (result + a / result) >> 1;\\n        \\n        return min(result, a / result);\\n    }\\n}\",\"keccak256\":\"0x6f1b61a296fee9395794e9bdc17fe959572e62e494573680c0fce65c38d70355\",\"license\":\"MIT\"},\"contracts/library/Power.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title Power Library by Bancor\\n * @dev https://github.com/bancorprotocol/contracts\\n *\\n * Modified from the original by Slava Balasanov & Tarrence van As\\n * Converted to library from Power.sol\\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements;\\n * and to You under the Apache License, Version 2.0.\\n */\\nlibrary PowerLib {\\n    string public constant VERSION = \\\"0.3\\\";\\n\\n    uint256 private constant ONE = 1;\\n    uint32 private constant MAX_WEIGHT = 1000000;\\n    uint8 private constant MIN_PRECISION = 32;\\n    uint8 private constant MAX_PRECISION = 127;\\n\\n    uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\\n    uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\\n    uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\\n\\n    uint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\\n    uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\\n\\n    uint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;\\n    uint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;\\n\\n    // Auto-generated maxExpArray\\n    function getMaxExpArray() internal pure returns (uint256[128] memory) {\\n        uint256[128] memory maxExpArray;\\n        maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;\\n        maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;\\n        maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;\\n        maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;\\n        maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;\\n        maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;\\n        maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;\\n        maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;\\n        maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;\\n        maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;\\n        maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;\\n        maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;\\n        maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;\\n        maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;\\n        maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;\\n        maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;\\n        maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;\\n        maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;\\n        maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;\\n        maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\\n        maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;\\n        maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;\\n        maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;\\n        maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;\\n        maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\\n        maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;\\n        maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;\\n        maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;\\n        maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;\\n        maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;\\n        maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;\\n        maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;\\n        maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;\\n        maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;\\n        maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;\\n        maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\\n        maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\\n        maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;\\n        maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;\\n        maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;\\n        maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;\\n        maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;\\n        maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;\\n        maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;\\n        maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;\\n        maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;\\n        maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\\n        maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\\n        maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\\n        maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;\\n        maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\\n        maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\\n        maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;\\n        maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;\\n        maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\\n        maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\\n        maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;\\n        maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\\n        maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\\n        maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;\\n        maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;\\n        maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;\\n        maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;\\n        maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;\\n        maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\\n        maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\\n        maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;\\n        maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\\n        maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\\n        maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\\n        maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\\n        maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\\n        maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\\n        maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\\n        maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\\n        maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\\n        maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\\n        maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\\n        maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\\n        maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\\n        maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\\n        maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\\n        maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\\n        maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\\n        maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\\n        maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\\n        maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\\n        maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\\n        maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\\n        maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\\n        maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\\n        maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\\n        maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\\n        maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\\n        maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\\n        maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\\n        return maxExpArray;\\n    }\\n\\n    function power(uint256 _baseN, uint256 _baseD, uint32 _expN, uint32 _expD) internal pure returns (uint256, uint8) {\\n        require(_baseN < MAX_NUM, \\\"baseN exceeds max value.\\\");\\n        require(_baseN >= _baseD, \\\"Bases < 1 are not supported.\\\");\\n\\n        uint256 baseLog;\\n        uint256 base = _baseN * FIXED_1 / _baseD;\\n        if (base < OPT_LOG_MAX_VAL) {\\n            baseLog = optimalLog(base);\\n        } else {\\n            baseLog = generalLog(base);\\n        }\\n\\n        uint256 baseLogTimesExp = baseLog * _expN / _expD;\\n        if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\\n            return (optimalExp(baseLogTimesExp), MAX_PRECISION);\\n        } else {\\n            uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\\n            return (generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision), precision);\\n        }\\n    }\\n\\n    function generalLog(uint256 _x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n        uint256 x = _x;\\n\\n        if (x >= FIXED_2) {\\n            uint8 count = floorLog2(x / FIXED_1);\\n            x >>= count;\\n            res = count * FIXED_1;\\n        }\\n\\n        if (x > FIXED_1) {\\n            for (uint8 i = MAX_PRECISION; i > 0; --i) {\\n                x = (x * x) / FIXED_1;\\n                if (x >= FIXED_2) {\\n                    x >>= 1;\\n                    res += ONE << (i - 1);\\n                }\\n            }\\n        }\\n\\n        return res * LN2_NUMERATOR / LN2_DENOMINATOR;\\n    }\\n\\n    function floorLog2(uint256 _n) internal pure returns (uint8) {\\n        uint8 res = 0;\\n        uint256 n = _n;\\n\\n        if (n < 256) {\\n            while (n > 1) {\\n                n >>= 1;\\n                res += 1;\\n            }\\n        } else {\\n            for (uint8 s = 128; s > 0; s >>= 1) {\\n                if (n >= (ONE << s)) {\\n                    n >>= s;\\n                    res |= s;\\n                }\\n            }\\n        }\\n\\n        return res;\\n    }\\n\\n    function findPositionInMaxExpArray(uint256 _x) internal pure returns (uint8) {\\n        uint8 lo = MIN_PRECISION;\\n        uint8 hi = MAX_PRECISION;\\n\\n        while (lo + 1 < hi) {\\n            uint8 mid = (lo + hi) / 2;\\n            if (getMaxExpArray()[mid] >= _x) {\\n                lo = mid;\\n            } else {\\n                hi = mid;\\n            }\\n        }\\n\\n        if (getMaxExpArray()[hi] >= _x) {\\n            return hi;\\n        }\\n        if (getMaxExpArray()[lo] >= _x) {\\n            return lo;\\n        }\\n\\n        revert(\\\"Value not found in maxExpArray\\\");\\n    }\\n\\n    function generalExp(uint256 _x, uint8 _precision) internal pure returns (uint256) {\\n        uint256 xi = _x;\\n        uint256 res = 0;\\n\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x3442c4e6074a82f1797f72ac0000000; // add x^02 * (33! / 02!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x116b96f757c380fb287fd0e40000000; // add x^03 * (33! / 03!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x045ae5bdd5f0e03eca1ff4390000000; // add x^04 * (33! / 04!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00defabf91302cd95b9ffda50000000; // add x^05 * (33! / 05!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x002529ca9832b22439efff9b8000000; // add x^06 * (33! / 06!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00054f1cf12bd04e516b6da88000000; // add x^07 * (33! / 07!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000a9e39e257a09ca2d6db51000000; // add x^08 * (33! / 08!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000012e066e7b839fa050c309000000; // add x^09 * (33! / 09!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000001e33d7d926c329a1ad1a800000; // add x^10 * (33! / 10!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000002bee513bdb4a6b19b5f800000; // add x^11 * (33! / 11!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000003a9316fa79b88eccf2a00000; // add x^12 * (33! / 12!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000048177ebe1fa812375200000; // add x^13 * (33! / 13!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000005263fe90242dcbacf00000; // add x^14 * (33! / 14!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000057e22099c030d94100000; // add x^15 * (33! / 15!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000057e22099c030d9410000; // add x^16 * (33! / 16!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000052b6b54569976310000; // add x^17 * (33! / 17!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000004985f67696bf748000; // add x^18 * (33! / 18!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000003dea12ea99e498000; // add x^19 * (33! / 19!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000031880f2214b6e000; // add x^20 * (33! / 20!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000025bcff56eb36000; // add x^21 * (33! / 21!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000001b722e10ab1000; // add x^22 * (33! / 22!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000001317c70077000; // add x^23 * (33! / 23!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000cba84aafa00; // add x^24 * (33! / 24!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000082573a0a00; // add x^25 * (33! / 25!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000005035ad900; // add x^26 * (33! / 26!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000000000002f881b00; // add x^27 * (33! / 27!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000001b29340; // add x^28 * (33! / 28!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000000000efc40; // add x^29 * (33! / 29!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000007fe0; // add x^30 * (33! / 30!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000420; // add x^31 * (33! / 31!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000021; // add x^32 * (33! / 32!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000001; // add x^33 * (33! / 33!)\\n\\n        return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision);\\n    }\\n\\n    function optimalLog(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n        uint256 w;\\n\\n        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\\n            res += 0x40000000000000000000000000000000;\\n            x = x * FIXED_1 / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\\n        }\\n        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\\n            res += 0x20000000000000000000000000000000;\\n            x = x * FIXED_1 / 0xa45af1e1f40c333b3de1db4dd55f29a7;\\n        }\\n        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\\n            res += 0x10000000000000000000000000000000;\\n            x = x * FIXED_1 / 0x910b022db7ae67ce76b441c27035c6a1;\\n        }\\n        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\\n            res += 0x08000000000000000000000000000000;\\n            x = x * FIXED_1 / 0x88415abbe9a76bead8d00cf112e4d4a8;\\n        }\\n        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\\n            res += 0x04000000000000000000000000000000;\\n            x = x * FIXED_1 / 0x84102b00893f64c705e841d5d4064bd3;\\n        }\\n        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\\n            res += 0x02000000000000000000000000000000;\\n            x = x * FIXED_1 / 0x8204055aaef1c8bd5c3259f4822735a2;\\n        }\\n        if (x >= 0x810100ab00222d861931c15e39b44e99) {\\n            res += 0x01000000000000000000000000000000;\\n            x = x * FIXED_1 / 0x810100ab00222d861931c15e39b44e99;\\n        }\\n        if (x >= 0x808040155aabbbe9451521693554f733) {\\n            res += 0x00800000000000000000000000000000;\\n            x = x * FIXED_1 / 0x808040155aabbbe9451521693554f733;\\n        }\\n\\n        z = y = x - FIXED_1;\\n        w = y * y / FIXED_1;\\n        res += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000;\\n        z = z * w / FIXED_1;\\n        res += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000;\\n        z = z * w / FIXED_1;\\n        res += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000;\\n        z = z * w / FIXED_1;\\n        res += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000;\\n        z = z * w / FIXED_1;\\n        res += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000;\\n        z = z * w / FIXED_1;\\n        res += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000;\\n        z = z * w / FIXED_1;\\n        res += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000;\\n        z = z * w / FIXED_1;\\n        res += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;\\n\\n        return res;\\n    }\\n\\n    function optimalExp(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n\\n        z = y = x % 0x10000000000000000000000000000000;\\n        z = z * y / FIXED_1;\\n        res += z\\n\\n * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x000000000001c638; // add y^16 * (20! / 16!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x000000000000017c; // add y^18 * (20! / 18!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x0000000000000014; // add y^19 * (20! / 19!)\\n        z = z * y / FIXED_1;\\n        res += z * 0x0000000000000001; // add y^20 * (20! / 20!)\\n        res = res / 0x21c3677c82b40000 + y + FIXED_1;\\n\\n        if ((x & 0x010000000000000000000000000000000) != 0) {\\n            res = res * 0x1c3d6a24ed82218787d624d3e5eba95f9 / 0x18ebef9eac820ae8682b9793ac6d1e776;\\n        }\\n        if ((x & 0x020000000000000000000000000000000) != 0) {\\n            res = res * 0x18ebef9eac820ae8682b9793ac6d1e778 / 0x1368b2fc6f9609fe7aceb46aa619baed4;\\n        }\\n        if ((x & 0x040000000000000000000000000000000) != 0) {\\n            res = res * 0x1368b2fc6f9609fe7aceb46aa619baed5 / 0x0bc5ab1b16779be3575bd8f0520a9f21f;\\n        }\\n        if ((x & 0x080000000000000000000000000000000) != 0) {\\n            res = res * 0x0bc5ab1b16779be3575bd8f0520a9f21e / 0x0454aaa8efe072e7f6ddbab84b40a55c9;\\n        }\\n        if ((x & 0x100000000000000000000000000000000) != 0) {\\n            res = res * 0x0454aaa8efe072e7f6ddbab84b40a55c5 / 0x00960aadc109e7a3bf4578099615711ea;\\n        }\\n        if ((x & 0x200000000000000000000000000000000) != 0) {\\n            res = res * 0x00960aadc109e7a3bf4578099615711d7 / 0x0002bf84208204f5977f9a8cf01fdce3d;\\n        }\\n        if ((x & 0x400000000000000000000000000000000) != 0) {\\n            res = res * 0x0002bf84208204f5977f9a8cf01fdc307 / 0x0000003c6ab775dd0b95b4cbee7e65d11;\\n        }\\n\\n        return res;\\n    }\\n}\",\"keccak256\":\"0xbb4808b71ba89a883182f3f8b0c931800e32d2e9cd72a459b74d1df82e13ec0d\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c918262fc206d146114b9575081630bf7d9101461121257816311eac855146111e95781631c1d6af7146111c0578163262b87b714610f63578163383dbe4414610c1b578163735de9f714610bf25781638bdb2afa14610bca5781639e1efff9146105a9578163c9fd20cf146103b0578163d5b8d84a1461017f57508063dab8ad0c14610118578063f04c54d4146100f05763fe40ac92146100be57600080fd5b346100ec57806003193601126100ec576020906100e56100dc611802565b602435906122e1565b9051908152f35b5080fd5b50346100ec57806003193601126100ec576020906100e561010f611802565b60243590612420565b50903461017c578160031936011261017c57610132611802565b916024359263ffffffff92838516850361017c575061016b93610154916120ea565b90929193825195869560608752606087019061167e565b931660208501521515908301520390f35b80fd5b8383346100ec576020918260031936011261017c576001600160a01b0393803585811691908290036103ac576001918683541690855197637274e30d60e01b895287898581865afa9889156103a2578699610367575b50859285805b6102d0575b506101f163ffffffff809516611e63565b99879587805b610215575b8c8c6102118d5192828493845283019061167e565b0390f35b86811687841681116102ca578b5190630be8d88160e21b8252838201528a81602481885afa9081156102c057878f918f89918f809661029b575b5050840151161461026c575b505061026690611e19565b886101f7565b9861028d61029392610266949b8b8416916102878383611b4c565b52611b4c565b50611e19565b97908d61025b565b6102b89296503d8091833e6102b081836118b1565b810190611966565b93388f61024f565b8c513d8d823e3d90fd5b506101fc565b63ffffffff808216908c16811161036157895190630be8d88160e21b8252878201528881602481865afa90811561035757848c8a949388938d9161033d575b5001511614610328575b61032290611e19565b906101db565b9461033561032291611e19565b959050610319565b61035191503d808f833e6102b081836118b1565b3861030f565b8a513d8b823e3d90fd5b506101e0565b9098508781813d831161039b575b61037f81836118b1565b8101031261039757610390906118d3565b97896101d5565b8580fd5b503d610375565b87513d88823e3d90fd5b8280fd5b9050346103ac57826003193601126103ac57600180548351637274e30d60e01b81528594859485948594859485936001600160a01b03909216916020828281865afa91821561059f578c92610560575b5063ffffffff9182169b93928392909190835b610440575b50505050505060c09750815196875260208701528501526060840152608083015260a0820152f35b9091939a988d93959c99828d169e8f11610557578d9e899e9d9e5190630be8d88160e21b8252858201528d816024818a5afa9d8e1561054c57809e610527575b505060608d015161049091611f61565b6101c08d0151909c90156104c657506104b46104ae6104ba92611f6e565b9a611f6e565b9c611e19565b93919085939d95610413565b6101a0810151919a9991156104eb57506104b46104e56104ba92611f6e565b99611f6e565b6101400151989a9098421115610510576104b461050a6104ba92611f6e565b9b611f6e565b99956104b46105216104ba92611f6e565b97611f6e565b60609e506104909291610543913d8091833e6102b081836118b1565b9d50908f610480565b8a51903d90823e3d90fd5b9b50989b610418565b9091506020813d8211610597575b8161057b602093836118b1565b810103126105935761058c906118d3565b9038610400565b8b80fd5b3d915061056e565b86513d8e823e3d90fd5b919050346103ac5760c03660031901126103ac576105c5611802565b906024938435906044359160a4356105db611db5565b6001548551637274e30d60e01b81526020976001600160a01b03959286169189818c81865afa9081156109f1578491610b95575b5063ffffffff809216918215918215610b89575b5050610b795784158015610b71575b610b615742841115610b515782908b8b8a519485938492630be8d88160e21b84528301525afa908115610b47578291610b2d575b506101a081015115610b1d57846102c08201511615610b0d57610160015186516370a0823160e01b808252338b83015291861693919089818d81885afa9081156109f1579086918591610adc575b5010610acc578560025416908851908152338b82015289818d81855afa9081156109f1579088918591610a9b575b5010610a8b578751636eb1769f60e11b80825233828d019081523060208201529091908b90829081906040010381895afa908115610a81579087918691610a4c575b5010610a3c57885190815233818c0190815230602082015290918a918391908290819060400103915afa908115610975579087918491610a0b575b50106109fb5761077184303386611c50565b6107818630338860025416611c50565b600354875163095ea7b360e01b8082529187166001600160a01b03168b8201908152602081018790528a9082908190604001038187895af19081156109f15784916109b8575b501561097f5760025460035489519283526001600160a01b03908816168b8301908152602081018990528a91839182900360400190829087908b165af1908115610975578391610940575b5015610908576060836101048b858e958a60035416908d8c600254169051988997889662e8e33760e81b88528701528501528a60448501528c6064850152606435608485015260843560a48501523360c485015260e48401525af190816108dd575b506108d6575092606497949261089261089d93601798963390611dd8565b339060025416611dd8565b5162461bcd60e51b8152938401528201527f4661696c656420746f20616464206c69717569646974790000000000000000006044820152fd5b6001815580f35b606090813d8111610901575b6108f381836118b1565b810103126100ec5738610874565b503d6108e9565b865162461bcd60e51b8152808a018990526013818c0152721554d110c8185c1c1c9bdd994819985a5b1959606a1b6044820152606490fd5b90508881813d831161096e575b61095781836118b1565b810103126103ac57610968906118f8565b38610812565b503d61094d565b88513d85823e3d90fd5b875162461bcd60e51b8152808b018a90526014818d015273151bdad95b88185c1c1c9bdd994819985a5b195960621b6044820152606490fd5b90508981813d83116109ea575b6109cf81836118b1565b810103126109e6576109e0906118f8565b386107c7565b8380fd5b503d6109c5565b89513d86823e3d90fd5b865163356680b760e01b81528990fd5b8092508a8092503d8311610a35575b610a2481836118b1565b810103126103ac578690513861075f565b503d610a1a565b885163356680b760e01b81528b90fd5b8092508c8092503d8311610a7a575b610a6581836118b1565b81010312610a765786905138610724565b8480fd5b503d610a5b565b8a513d87823e3d90fd5b875163356680b760e01b81528a90fd5b8092508b8092503d8311610ac5575b610ab481836118b1565b810103126109e657879051386106e2565b503d610aaa565b87516308aeed0f60e21b81528a90fd5b8092508b8092503d8311610b06575b610af581836118b1565b810103126109e657859051386106b4565b503d610aeb565b8651630e52390960e41b81528990fd5b865163605d489960e01b81528990fd5b610b4191503d8084833e6102b081836118b1565b38610666565b87513d84823e3d90fd5b8751631ab7da6b60e01b81528a90fd5b875163273e150360e21b81528a90fd5b508615610632565b8751639b35ed3b60e01b81528a90fd5b16821190503880610623565b90508981813d8311610bc3575b610bac81836118b1565b810103126109e657610bbd906118d3565b3861060f565b503d610ba2565b9050346103ac57826003193601126103ac575490516001600160a01b03909116815260209150f35b5050346100ec57816003193601126100ec5760035490516001600160a01b039091168152602090f35b839150346100ec57610c2c3661181a565b90610c3996939296611db5565b6001548451637274e30d60e01b81526001600160a01b039860209590928a169186818a81865afa908115610f59578a91610f20575b5063ffffffff809216918215918215610f14575b5050610f04578215610ef45742851115610ee45788906024885180948193630be8d88160e21b83528c8301525afa908115610eda578891610ec0575b506101a081015115610eb057886102c08201511615610ea057610160015185516370a0823160e01b81523388820152908916989085816024818d5afa908115610e96579083918a91610e61575b5010610e51578798610d238399979899303384611c50565b600354885163095ea7b360e01b81529083166001600160a01b03168a82019081526020810185905287908290819060400103818b865af18015610e4757908894939291610e05575b5090610dc19189805198610d7e8a611878565b60028a5236908a0137610d9088611b19565b528060025416610d9f88611b3c565b5260035416948851998a97889687956338ed173960e01b875233938701611c17565b03925af1908115610dfc5750610dda575b506001815580f35b610df5903d8084833e610ded81836118b1565b810190611b60565b5081610dd2565b513d84823e3d90fd5b919093508682813d8311610e40575b610e1e81836118b1565b81010312610e3c578793610e34610dc1936118f8565b509091610d6b565b8780fd5b503d610e14565b89513d8a823e3d90fd5b85516308aeed0f60e21b81528790fd5b809250878092503d8311610e8f575b610e7a81836118b1565b81010312610e8b578290518b610d0b565b8880fd5b503d610e70565b87513d8b823e3d90fd5b8551630e52390960e41b81528790fd5b855163605d489960e01b81528790fd5b610ed491503d808a833e6102b081836118b1565b89610cbe565b86513d8a823e3d90fd5b8651631ab7da6b60e01b81528890fd5b865163273e150360e21b81528890fd5b8651639b35ed3b60e01b81528890fd5b16821190508b80610c82565b90508681813d8311610f52575b610f3781836118b1565b81010312610f4e57610f48906118d3565b8b610c6e565b8980fd5b503d610f2d565b88513d8c823e3d90fd5b839150346100ec57610f743661181a565b90610f8196939296611db5565b6001548451637274e30d60e01b81526020946001600160a01b039283169186818a81865afa908115610f59578a9161118b575b5063ffffffff80921691821591821561117f575b5050610f04578915610ef45742851115610ee45788906024885180948193630be8d88160e21b83528c8301525afa908115610eda578891611165575b506101a081015115610eb057816102c08201511615610ea05761016082910151169781600254169186516370a0823160e01b815233898201528681602481875afa908115610f59579083918b91611134575b501061112457889961106e839a98999a303387611c50565b600354895163095ea7b360e01b81529083166001600160a01b03168b82019081526020810185905288908290819060400103818c895af18015610357579089949392916110e6575b50610dc19293948a8051996110ca8b611878565b60028b5236908b01376110dc89611b19565b52610d9f88611b3c565b9293508783813d831161111d575b6110fe81836118b1565b81010312610e8b578894611114610dc1946118f8565b509493926110b6565b503d6110f4565b86516308aeed0f60e21b81528890fd5b809250888092503d831161115e575b61114d81836118b1565b81010312610f4e578290518c611056565b503d611143565b61117991503d808a833e6102b081836118b1565b89611004565b16821190508b80610fc8565b90508681813d83116111b9575b6111a281836118b1565b81010312610f4e576111b3906118d3565b8b610fb4565b503d611198565b5050346100ec57806003193601126100ec576020906100e56111e0611802565b60243590611f7d565b5050346100ec57816003193601126100ec5760025490516001600160a01b039091168152602090f35b8383346100ec576020918260031936011261017c576001600160a01b03843581811681036103ac57600180548551637274e30d60e01b815291931686828981845afa9182156114af578592611478575b5084918480805b6113c5575b505061128063ffffffff809416611e63565b98869486805b61129d575b89518b815280610211818e018f61167e565b85811686851681116113bf578a5163046ebbcb60e41b815263ffffffff83168582019081526001600160a01b03851660208201528d9081908390819060400103818b5afa9182918d93611390575b50506113025750506112fc90611e19565b87611286565b6001600160801b031661131a575b506112fc90611e19565b8a9791975190630be8d88160e21b8252848201528981602481895afa908115611386579161028d611362928f6112fc958e8093611369575b50508a8416916102878383611b4c565b9690611310565b61137e9293503d8091833e6102b081836118b1565b90388e611352565b8b513d8c823e3d90fd5b6113b0929350803d106113b8575b6113a881836118b1565b810190611e44565b908f8e6112eb565b503d61139e565b5061128b565b63ffffffff8084169082161161147357885163046ebbcb60e41b815263ffffffff8216818d019081526001600160a01b03881660208201528b90829081906040010381885afa899181611454575b50611428575061142290611e19565b81611269565b6001600160801b031661143f575b61142290611e19565b9361144c61142291611e19565b949050611436565b61146c9192508c8d3d106113b8576113a881836118b1565b908d611413565b61126e565b9091508681813d83116114a8575b61149081836118b1565b81010312610a76576114a1906118d3565b9088611262565b503d611486565b86513d87823e3d90fd5b848492346100ec576020918260031936011261017c576001600160a01b038235818116939192918482036103ac57829683951561162a5750600193845416908851637274e30d60e01b815287818381865afa908115610a815785916115f5575b5085805b611536575b8a518a815263ffffffff8916818b01528b90f35b63ffffffff808316908216116115f0578a5163046ebbcb60e41b815263ffffffff82168482019081526001600160a01b03871660208201528a90829081906040010381885afa8791816115d1575b50611599575061159390611e19565b8661151d565b6001600160801b0316806115b2575b5061159390611e19565b6115c46115ca91611593939a9c611f61565b9a611e19565b97906115a8565b6115e99192508b3d8d116113b8576113a881836118b1565b908d611584565b611522565b90508781813d8311611623575b61160c81836118b1565b81010312610a765761161d906118d3565b8a611519565b503d611602565b63287170f960e01b8152fd5b60005b8381106116495750506000910152565b8181015183820152602001611639565b9060209161167281518092818552858086019101611636565b601f01601f1916010190565b908082519081815260208091019281808460051b8301019501936000915b8483106116ac5750505050505090565b9091929394958480600192601f1985820301865289519081518152848060a01b03918284820151168483015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e0808201519083015261010080820151908301526101208082015190830152610140808201519083015261016083818301511690830152610180808201511515908301526101a0808201511515908301526101c0808201511515908301526117b261179e61178a6101e080850151906102e08091880152860190611659565b610200808501519086830390870152611659565b610220808401519085830390860152611659565b9261024063ffffffff818401511690840152610260808301519084015261028080830151908401526102a0808301511515908401526102c08092015116910152980193019301919493929061169c565b6004359063ffffffff8216820361181557565b600080fd5b60809060031901126118155760043563ffffffff811681036118155790602435906044359060643590565b6102e0810190811067ffffffffffffffff82111761186257604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761186257604052565b611000810190811067ffffffffffffffff82111761186257604052565b90601f8019910116810190811067ffffffffffffffff82111761186257604052565b519063ffffffff8216820361181557565b51906001600160a01b038216820361181557565b5190811515820361181557565b67ffffffffffffffff811161186257601f01601f191660200190565b81601f8201121561181557805161193781611905565b9261194560405194856118b1565b81845260208284010111611815576119639160208085019101611636565b90565b9060208282031261181557815167ffffffffffffffff928382116118155701906102e082820312611815576040519261199e84611845565b825184526119ae602084016118e4565b602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e0850152610100808401519085015261012080840151908501526101408084015190850152610160611a1e8185016118e4565b90850152610180611a308185016118f8565b908501526101a0611a428185016118f8565b908501526101c0611a548185016118f8565b908501526101e0808401518281116118155783611a72918601611921565b90850152610200808401518281116118155783611a90918601611921565b90850152610220918284015191821161181557611aae918401611921565b90830152610240611ac08183016118d3565b90830152610260808201519083015261028080820151908301526102a0611ae88183016118f8565b90830152611afa6102c08092016118e4565b9082015290565b67ffffffffffffffff81116118625760051b60200190565b805115611b265760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015611b265760400190565b8051821015611b265760209160051b010190565b60209081818403126118155780519067ffffffffffffffff821161181557019180601f84011215611815578251611b9681611b01565b93611ba460405195866118b1565b818552838086019260051b820101928311611815578301905b828210611bcb575050505090565b81518152908301908301611bbd565b90815180825260208080930193019160005b828110611bfa575050505090565b83516001600160a01b031685529381019392810192600101611bec565b9192608093611c3c92979695978452602084015260a0604084015260a0830190611bda565b6001600160a01b0390951660608201520152565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff84111761186257611ca992604052611cab565b565b60018060a01b031690611cf5600080836020829551910182875af13d15611d4a573d90611cd782611905565b91611ce560405193846118b1565b82523d84602084013e5b84611d52565b8051918215159283611d24575b505050611d0c5750565b60249060405190635274afe760e01b82526004820152fd5b82935091602091928101031261017c57506020611d4191016118f8565b15388080611d02565b606090611cef565b90611d795750805115611d6757805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580611dac575b611d8a575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15611d82565b600260005414611dc6576002600055565b604051633ee5aeb560e01b8152600490fd5b60405163a9059cbb60e01b60208201526001600160a01b03929092166024830152604480830193909352918152611ca991611e146064836118b1565b611cab565b63ffffffff809116908114611e2e5760010190565b634e487b7160e01b600052601160045260246000fd5b9081602091031261181557516001600160801b03811681036118155790565b90611e6d82611b01565b604090611e7c825191826118b1565b8381528093611e8d601f1991611b01565b019160005b838110611e9f5750505050565b6020908251611ead81611845565b6000815282600081830152600085830152606060008184015260006080840152600060a0840152600060c0840152600060e08401526000610100840152600061012084015260006101408401526000610160840152600061018084015260006101a084015260006101c0840152806101e08401528061020084015261022083015260006102408301526000610260830152600061028083015260006102a083015260006102c0830152828601015201611e92565b91908201809211611e2e57565b6000198114611e2e5760010190565b600154604051637274e30d60e01b81526001600160a01b03909116929190602081600481875afa90811561206f57600091612099575b5063ffffffff8092169082821591821561208d575b505061207b57600090602460405180968193630be8d88160e21b835260048301525afa92831561206f57600093612054575b50610180830151158015612046575b8015612038575b612030578260c06119639401519161024060608301519201511691612514565b505050600090565b506101c08301511515612010565b506101a08301511515612009565b61206891933d8091833e6102b081836118b1565b9138611ffa565b6040513d6000823e3d90fd5b60405163b4fa3fb360e01b8152600490fd5b16821190508238611fc8565b906020823d82116120ca575b816120b2602093836118b1565b8101031261017c57506120c4906118d3565b38611fb3565b3d91506120a5565b91909163ffffffff80809416911601918211611e2e57565b909163ffffffff9283811693841580156122d7575b61207b576001805460408051637274e30d60e01b81526001600160a01b03909216969194909260049160208784818c5afa9687156122cc57600097612291575b508699868816978786169089821015612247575088039087821161222457818816111561223f5750935b8585169261217684611e63565b996000845b612198575b50505050505090612190916120d2565b161091929190565b8881168681101561223957858a6121af848b6120d2565b16018a8111612224578551630be8d88160e21b8152908b1685820152600081602481875afa908115612219576121fa928f89959361028d93600091612200575b506102878383611b4c565b9061217b565b612213913d8091833e6102b081836118b1565b386121ef565b86513d6000823e3d90fd5b601185634e487b7160e01b6000525260246000fd5b50612180565b905093612169565b9b505050505093505092935050815191602083019183831067ffffffffffffffff84111761227c575052600081529190600090565b604190634e487b7160e01b6000525260246000fd5b90966020823d82116122c4575b816122ab602093836118b1565b8101031261017c57506122bd906118d3565b953861213f565b3d915061229e565b85513d6000823e3d90fd5b50603285116120ff565b60015460408051630be8d88160e21b815263ffffffff90931660048401526000936001600160a01b03939290919085908490602490829088165afa92831561241657908593929184936123fa575b50846102c0840151161580156123f2575b6123ea57846123ab9561016083519561235887611878565b600287528436602089013701511661236f85611b19565b52806002541661237e85611b3c565b52600354169181519586948593849363d06ca61f60e01b8552600485015260248401526044830190611bda565b03915afa8291816123ce575b506123c0575090565b6123ca9150611b3c565b5190565b6123e39192503d8085833e610ded81836118b1565b90386123b7565b505050505090565b508115612340565b61240f9193503d8086833e6102b081836118b1565b913861232f565b81513d87823e3d90fd5b60015460408051630be8d88160e21b815263ffffffff90931660048401526000936001600160a01b03939290919085908490602490829088165afa92831561241657908593929184936124c5575b50846102c0840151161580156124bd575b6123ea57846123ab9561016083519561249787611878565b600287528436602089013782600254166124b088611b19565b5201511661237e85611b3c565b50811561247f565b6124da9193503d8086833e6102b081836118b1565b913861246e565b81810292918115918404141715611e2e57565b81156124fe570490565b634e487b7160e01b600052601260045260246000fd5b928015612619578315158061260a575b806125f7575b156125b357811561259b57620f424063ffffffff84161461258757612566928261255960ff9461255e94611f61565b612622565b9290846124e1565b91161c9060008183111561258157508103908111611e2e5790565b91505090565b612596919250611963936124e1565b6124f4565b9250505064e8d4a5100080820291820403611e2e5790565b606460405162461bcd60e51b815260206004820152602060248201527f496e76616c696420626f6e64696e6720637572766520706172616d65746572736044820152fd5b50620f424063ffffffff8416111561252a565b5063ffffffff83161515612524565b50505050600090565b909291600160811b90818310156137e5578483106137a0576000607f9584871b6001607f1b95808204871490151715613740579061265f916124f4565b9070015bf0a8b1457695355fb8ac404e7a79e38210156135c4575080916000916fd3094c70f034de4b96ff7d5b6f99fcd8808210156135a0575b50506fa45af1e1f40c333b3de1db4dd55f29a780841015613575575b506f910b022db7ae67ce76b441c27035c6a18084101561354a575b506f88415abbe9a76bead8d00cf112e4d4a88084101561351f575b506f84102b00893f64c705e841d5d4064bd3808410156134f4575b506f8204055aaef1c8bd5c3259f4822735a2808410156134c9575b506f810100ab00222d861931c15e39b44e998084101561349e575b506f808040155aabbbe9451521693554f73380841015613473575b506f7fffffffffffffffffffffffffffffff198301838111611e2e5761277d81806124e1565b881c92600160801b858103880191908211611e2e576127ad85916127a46127b394866124e1565b60801c90611f61565b926124e1565b881c906faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa908786830301918211611e2e576127ad85916127e66127ef94866124e1565b60811c90611f61565b881c906f99999999999999999999999999999999908786830301918211611e2e576127ad859161282f93612828600360801b91876124e1565b0490611f61565b881c906f92492492492492492492492492492492908786830301918211611e2e576127ad859161286261286b94866124e1565b60821c90611f61565b881c906f8e38e38e38e38e38e38e38e38e38e38e908786830301918211611e2e576127ad85916128a493612828600560801b91876124e1565b881c906f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b908786830301918211611e2e576127ad85916128dd93612828600360811b91876124e1565b881c926f89d89d89d89d89d89d89d89d89d89d898786820301908111611e2e5761291b9261291591600760801b9061282890886124e1565b936124e1565b871c856f8888888888888888888888888888888894850301938411611e2e5761295d61296693612954620f42409663ffffffff946124e1565b60831c90611f61565b915b16906124e1565b0490600160831b821015612ec9576000926f0fffffffffffffffffffffffffffffff831661299481806124e1565b871c6710e1b3be415a000090818102918183041481151715612ea157826129ba916124e1565b881c906705a0913f6b1e000090818302918383041483151715612eb5576127ad6129e5928592611f61565b881c90670168244fdac7800090818302918383041483151715612eb5576127ad612a10928592611f61565b881c90664807432bc1800090818302918383041483151715612eb5576127ad612a3a928592611f61565b881c90660c0135dca0400090818302918383041483151715612eb5576127ad612a64928592611f61565b881c906601b707b1cdc00090818302918383041483151715612eb5576127ad612a8e928592611f61565b881c906536e0f639b80090818302918383041483151715612eb5576127ad612ab7928592611f61565b881c90650618fee9f80090818302918383041483151715612eb5576127ad612ae0928592611f61565b881c90649c197dcc0090818302918383041483151715612eb5576127ad612b08928592611f61565b881c90640e30dce40090818302918383041483151715612eb5576127ad612b30928592611f61565b881c9064012ebd130090818302918383041483151715612eb5576127ad612b58928592611f61565b881c906317499f0090818302918383041483151715612eb5576127ad612b7f928592611f61565b881c906301a9d48090818302918383041483151715612eb5576127ad612ba6928592611f61565b881c90621c638090818302918383041483151715612eb5576127ad612bcc928592611f61565b881c906201c63890818302918383041483151715612eb5576127ad612bf2928592611f61565b881c90611ab890818302918383041483151715612eb5576127ad612c17928592611f61565b881c9061017c90818302918383041483151715612eb5576127ad612c3c928592611f61565b881c90601482029082820460141483151715612eb5576127ad612c60928592611f61565b881c9081800460011482151715612ea157612c88612c8e93926721c3677c82b4000092611f61565b04611f61565b93818501809511612e8d5750836001607c1b8416612e4c575b506001607d1b8316612e0e575b6001607e1b8316612dd1575b8216612d95575b600160801b8216612d59575b8116612d1e575b600160821b16612ce8579190565b6e2bf84208204f5977f9a8cf01fdc30790818102918183041490151715611e2e576d03c6ab775dd0b95b4cbee7e65d1190049190565b906f0960aadc109e7a3bf4578099615711d790818102918183041490151715611e2e576e2bf84208204f5977f9a8cf01fdce3d900490612cda565b916f454aaa8efe072e7f6ddbab84b40a55c590818102918183041490151715611e2e576f0960aadc109e7a3bf4578099615711ea900491612cd3565b916fbc5ab1b16779be3575bd8f0520a9f21e90818102918183041490151715611e2e576f454aaa8efe072e7f6ddbab84b40a55c9900491612cc7565b927001368b2fc6f9609fe7aceb46aa619baed590818102918183041490151715611e2e576fbc5ab1b16779be3575bd8f0520a9f21f900492612cc0565b9270018ebef9eac820ae8682b9793ac6d1e77890818102918183041490151715611e2e577001368b2fc6f9609fe7aceb46aa619baed4900492612cb4565b9093507001c3d6a24ed82218787d624d3e5eba95f990818102918183041490151715611e2e5770018ebef9eac820ae8682b9793ac6d1e77690049238612ca7565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b88526011600452602488fd5b50929050612ed68361384d565b9260ff841680920360ff8111611e2e5760ff161c90612ef582806124e1565b811c6f03442c4e6074a82f1797f72ac000000090818102918183041481151715611e2e5783612f23916124e1565b821c906f0116b96f757c380fb287fd0e40000000808302908382041483151715611e2e576127ad8591612f5593611f61565b821c906e45ae5bdd5f0e03eca1ff4390000000808302908382041483151715611e2e576127ad8591612f8693611f61565b821c906e0defabf91302cd95b9ffda50000000808302908382041483151715611e2e576127ad8591612fb793611f61565b821c906e02529ca9832b22439efff9b8000000808302908382041483151715611e2e576127ad8591612fe893611f61565b821c906d54f1cf12bd04e516b6da88000000808302908382041483151715611e2e576127ad859161301893611f61565b821c906d0a9e39e257a09ca2d6db51000000808302908382041483151715611e2e576127ad859161304893611f61565b821c906d012e066e7b839fa050c309000000808302908382041483151715611e2e576127ad859161307893611f61565b821c906c1e33d7d926c329a1ad1a800000808302908382041483151715611e2e576127ad85916130a793611f61565b821c906c02bee513bdb4a6b19b5f800000808302908382041483151715611e2e576127ad85916130d693611f61565b821c906b3a9316fa79b88eccf2a00000808302908382041483151715611e2e576127ad859161310493611f61565b821c906b048177ebe1fa812375200000808302908382041483151715611e2e576127ad859161313293611f61565b821c906a5263fe90242dcbacf00000808302908382041483151715611e2e576127ad859161315f93611f61565b821c906a057e22099c030d94100000808302908382041483151715611e2e576127ad859161318c93611f61565b821c906957e22099c030d9410000808302908382041483151715611e2e576127ad85916131b893611f61565b821c9069052b6b54569976310000808302908382041483151715611e2e576127ad85916131e493611f61565b821c90684985f67696bf748000808302908382041483151715611e2e576127ad859161320f93611f61565b821c906803dea12ea99e498000808302908382041483151715611e2e576127ad859161323a93611f61565b821c906731880f2214b6e000808302908382041483151715611e2e576127ad859161326493611f61565b821c9067025bcff56eb36000808302908382041483151715611e2e576127ad859161328e93611f61565b821c90661b722e10ab1000808302908382041483151715611e2e576127ad85916132b793611f61565b821c906601317c70077000808302908382041483151715611e2e576127ad85916132e093611f61565b821c90650cba84aafa00808302908382041483151715611e2e576127ad859161330893611f61565b821c906482573a0a00808302908382041483151715611e2e576127ad859161332f93611f61565b821c906405035ad900808302908382041483151715611e2e576127ad859161335693611f61565b821c90632f881b00808302908382041483151715611e2e576127ad859161337c93611f61565b821c906301b29340808302908382041483151715611e2e576127ad85916133a293611f61565b821c90620efc40808302908382041483151715611e2e576127ad85916133c793611f61565b821c90617fe0808302908382041483151715611e2e576127ad85916133eb93611f61565b821c90610420808302908382041483151715611e2e576127ad859161340f93611f61565b821c906021820282810460211483151715611e2e576127ad859161343293611f61565b821c9081800460011482151715611e2e5761346f936f0688589cc0e9505e2f2fee5580000000612c8860019461346794611f61565b911b90611f61565b9190565b909291600160771b8101908110611e2e579180881b90808204871490151715611e2e57049138612757565b909291600160781b8101908110611e2e579180881b90808204871490151715611e2e5704913861273c565b909291600160791b8101908110611e2e579180881b90808204871490151715611e2e57049138612721565b9092916001607a1b8101908110611e2e579180881b90808204871490151715611e2e57049138612706565b9092916001607b1b8101908110611e2e579180881b90808204871490151715611e2e570491386126eb565b9092916001607c1b8101908110611e2e579180881b90808204871490151715611e2e570491386126d0565b9092916001607d1b8101908110611e2e579180881b90808204871490151715611e2e570491386126b5565b9193506001607e1b925080881b90801590820487141715611e2e5704913880612699565b908190600160801b9080828110156136d7575b5086811161362b575b50506f03f80fe03f80fe03f80fe03f80fe03f891828102928184041490151715612e8d5750620f42409163ffffffff6f05b9de1d10bf4103d647b0955897ba8061296693049161295f565b909197929596835b60ff928382169081156136c6578061364a916124e1565b9384871c9486861015613681575b50505060ff16801561366d5760001901613633565b634e487b7160e01b8a52601160045260248afd5b929960809390931c945090600019018181116136b2579160016136a99260ff94161b90611f61565b97903880613658565b634e487b7160e01b8c52601160045260248cfd5b5050509695929791505038806135e0565b959296935050959284881c95809761010088106000146137545797965b60018082111561370f571c966137099061382a565b966136f4565b50509194969093969592955b60ff841690811c93891b60ff607f1b16908015908204881417156137405792386135d7565b634e487b7160e01b83526011600452602483fd5b96949795939291908960805b60ff81168015613790576001811b891015613782575b5060011c168a90613760565b978199981c97179738613776565b505050929691959390945061371b565b60405162461bcd60e51b815260206004820152601c60248201527f4261736573203c203120617265206e6f7420737570706f727465642e000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f626173654e2065786365656473206d61782076616c75652e00000000000000006044820152606490fd5b60ff60019116019060ff8211611e2e57565b906080811015611b265760051b0190565b906020607f9182915b61385f8161382a565b60ff80918186169182911610156138bc57818316019081116138a75760011c841690856138938361388e613937565b61383c565b511061389f5750613856565b925091613856565b60246000634e487b7160e01b81526011600452fd5b505092509290816138d86138ce613937565b60ff84169061383c565b51101561258157506138eb6138ce613937565b5110156119635760405162461bcd60e51b815260206004820152601e60248201527f56616c7565206e6f7420666f756e6420696e206d6178457870417272617900006044820152606490fd5b60405161394381611894565b61100080913690376040519061395882611894565b368237701c35fedd14ffffffffffffffffffffffff610400820152701b0ce43b323fffffffffffffffffffffff6104208201527019f0028ec1ffffffffffffffffffffffff6104408201527018ded91f0e7fffffffffffffffffffffff6104608201527017d8ec7f0417ffffffffffffffffffffff6104808201527016ddc6556cdbffffffffffffffffffffff6104a08201527015ecf52776a1ffffffffffffffffffffff6104c08201527015060c256cb2ffffffffffffffffffffff6104e0820152701428a2f98d72ffffffffffffffffffffff6105008201527013545598e5c23fffffffffffffffffffff610520820152701288c4161ce1dfffffffffffffffffffff6105408201527011c592761c666fffffffffffffffffffff61056082015270110a688680a757ffffffffffffffffffff610580820152701056f1b5bedf77ffffffffffffffffffff6105a0820152700faadceceeff8bffffffffffffffffffff6105c0820152700f05dc6b27edadffffffffffffffffffff6105e0820152700e67a5a25da4107fffffffffffffffffff610600820152700dcff115b14eedffffffffffffffffffff610620820152700d3e7a392431239fffffffffffffffffff610640820152700cb2ff529eb71e4fffffffffffffffffff610660820152700c2d415c3db974afffffffffffffffffff610680820152700bad03e7d883f69bffffffffffffffffff6106a0820152700b320d03b2c343d5ffffffffffffffffff6106c0820152700abc25204e02828dffffffffffffffffff6106e0820152700a4b16f74ee4bb207fffffffffffffffff6107008201527009deaf736ac1f569ffffffffffffffffff610720820152700976bd9952c7aa957fffffffffffffffff6107408201527009131271922eaa606fffffffffffffffff6107608201527008b380f3558668c46fffffffffffffffff610780820152700857ddf0117efa215bffffffffffffffff6107a08201527007ffffffffffffffffffffffffffffffff6107c08201527007abbf6f6abb9d087fffffffffffffffff6107e082015270075af62cbac95f7dfa7fffffffffffffff61080082015270070d7fb7452e187ac13fffffffffffffff6108208201527006c3390ecc8af379295fffffffffffffff61084082015270067c00a3b07ffc01fd6fffffffffffffff610860820152700637b647c39cbb9d3d27ffffffffffffff6108808201527005f63b1fc104dbd39587ffffffffffffff6108a08201527005b771955b36e12f7235ffffffffffffff6108c082015270057b3d49dda84556d6f6ffffffffffffff6108e082015270054183095b2c8ececf30ffffffffffffff61090082015270050a28be635ca2b888f77fffffffffffff6109208201527004d5156639708c9db33c3fffffffffffff6109408201527004a23105873875bd52dfdfffffffffffff610960820152700471649d87199aa990756fffffffffffff6109808201527004429a21a029d4c1457cfbffffffffffff6109a0820152700415bc6d6fb7dd71af2cb3ffffffffffff6109c08201527003eab73b3bbfe282243ce1ffffffffffff6109e08201527003c1771ac9fb6b4c18e229ffffffffffff610a00820152700399e96897690418f785257fffffffffff610a20820152700373fc456c53bb779bf0ea9fffffffffff610a4082015270034f9e8e490c48e67e6ab8bfffffffffff610a6082015270032cbfd4a7adc790560b3337ffffffffff610a8082015270030b50570f6e5d2acca94613ffffffffff610aa08201527002eb40f9f620fda6b56c2861ffffffffff610ac08201527002cc8340ecb0d0f520a6af58ffffffffff610ae08201527002af09481380a0a35cf1ba02ffffffffff610b00820152700292c5bdd3b92ec810287b1b3fffffffff610b20820152700277abdcdab07d5a77ac6d6b9fffffffff610b4082015270025daf6654b1eaa55fd64df5efffffffff610b60820152700244c49c648baa98192dce88b7ffffffff610b8082015270022ce03cd5619a311b2471268bffffffff610ba0820152700215f77c045fbe885654a44a0fffffffff610bc08201527001ffffffffffffffffffffffffffffffff610be08201527001eaefdbdaaee7421fc4d3ede5ffffffff610c008201527001d6bd8b2eb257df7e8ca57b09bfffffff610c208201527001c35fedd14b861eb0443f7f133fffffff610c408201527001b0ce43b322bcde4a56e8ada5afffffff610c6082015270019f0028ec1fff007f5a195a39dfffffff610c8082015270018ded91f0e72ee74f49b15ba527ffffff610ca082015270017d8ec7f04136f4e5615fd41a63ffffff610cc082015270016ddc6556cdb84bdc8d12d22e6fffffff610ce082015270015ecf52776a1155b5bd8395814f7fffff610d0082015270015060c256cb23b3b3cc3754cf40ffffff610d208201527001428a2f98d728ae223ddab715be3fffff610d4082015270013545598e5c23276ccf0ede68034fffff610d608201527001288c4161ce1d6f54b7f61081194fffff610d8082015270011c592761c666aa641d5a01a40f17ffff610da0820152700110a688680a7530515f3e6e6cfdcdffff610dc08201527001056f1b5bedf75c6bcb2ce8aed428ffff610de08201526ffaadceceeff8a0890f3875f008277fff610e008201526ff05dc6b27edad306388a600f6ba0bfff610e208201526fe67a5a25da41063de1495d5b18cdbfff610e408201526fdcff115b14eedde6fc3aa5353f2e4fff610e608201526fd3e7a3924312399f9aae2e0f868f8fff610e808201526fcb2ff529eb71e41582cccd5a1ee26fff610ea08201526fc2d415c3db974ab32a51840c0b67edff610ec08201526fbad03e7d883f69ad5b0a186184e06bff610ee08201526fb320d03b2c343d4829abd6075f0cc5ff610f008201526fabc25204e02828d73c6e80bcdb1a95bf610f208201526fa4b16f74ee4bb2040a1ec6c15fbbf2df610f408201526f9deaf736ac1f569deb1b5ae3f36c130f610f608201526f976bd9952c7aa957f5937d790ef65037610f808201526f9131271922eaa6064b73a22d0bd4f2bf610fa08201526f8b380f3558668c46c91c49a2f8e967b9610fc08201526f857ddf0117efa215952912839f6473e6610fe08201529056fea26469706673582212206b855085b00e9aee09f2a2ba9702450bec17750e773c0c3eee3d4a68b9d9f1c564736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addLiquidityToPool(uint32,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Add liquidity to existing pool (for users after campaign completion)",
        "params": {
          "_campaignId": "ID of the campaign",
          "_deadline": "Transaction deadline",
          "_minTokenLiquidity": "Minimum tokens for liquidity",
          "_minUsdcLiquidity": "Minimum USDC for liquidity",
          "_tokenAmount": "Amount of tokens to add",
          "_usdcAmount": "Amount of USDC to add"
        }
      },
      "getAllCampaignsPaginated(uint32,uint32)": {
        "details": "Get all campaigns with pagination",
        "params": {
          "_limit": "Number of campaigns to return (max 50)",
          "_offset": "Starting index for pagination (0-based)"
        },
        "returns": {
          "campaignsLocal": "Array of campaign info",
          "hasMore": "Whether there are more campaigns after this page",
          "total": "Total number of campaigns"
        }
      },
      "getCampaignsByCreator(address)": {
        "details": "Get campaigns created by a user by iterating through all campaigns This is less gas efficient but works without modifying the parent contract"
      },
      "getSummaryStats()": {
        "details": "Get summary statistics",
        "returns": {
          "activeCampaigns": "Number of active campaigns  ",
          "cancelledCampaigns": "Number of cancelled campaigns",
          "completedCampaigns": "Number of completed campaigns",
          "expiredCampaigns": "Number of expired campaigns",
          "totalCampaigns": "Total number of campaigns",
          "totalFundingRaised": "Total USDC raised across all campaigns"
        }
      },
      "getSwapAmountOut(uint32,uint256)": {
        "details": "Get expected swap output for debugging",
        "params": {
          "_campaignId": "ID of the campaign",
          "_tokenAmountIn": "Amount of tokens to swap"
        },
        "returns": {
          "expectedUsdcOut": "Expected USDC output"
        }
      },
      "getTokenAmountOut(uint32,uint256)": {
        "details": "Get expected token output when swapping USDC",
        "params": {
          "_campaignId": "ID of the campaign",
          "_usdcAmountIn": "Amount of USDC to swap"
        },
        "returns": {
          "expectedTokenOut": "Expected token output"
        }
      },
      "getUserTotalInvestment(address)": {
        "details": "Get user's total investment across all campaigns",
        "params": {
          "_user": "The user's address"
        },
        "returns": {
          "campaignsParticipated": "Number of campaigns the user participated in",
          "totalInvestment": "Total USDC amount invested by the user"
        }
      },
      "previewPurchase(uint32,uint256)": {
        "details": "Preview tokens received for USDC amount"
      },
      "swapTokenForUsdc(uint32,uint256,uint256,uint256)": {
        "details": "Swap campaign token for USDC using Uniswap pool",
        "params": {
          "_campaignId": "ID of the campaign",
          "_deadline": "Transaction deadline",
          "_minUsdcOut": "Minimum USDC expected (for slippage protection)",
          "_tokenAmount": "Amount of tokens to swap"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1966,
        "contract": "contracts/LaunchpadV2.sol:LaunchpadV2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3787,
        "contract": "contracts/LaunchpadV2.sol:LaunchpadV2",
        "label": "parentContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IParentContract)3778"
      },
      {
        "astId": 3790,
        "contract": "contracts/LaunchpadV2.sol:LaunchpadV2",
        "label": "usdcToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1274"
      },
      {
        "astId": 3793,
        "contract": "contracts/LaunchpadV2.sol:LaunchpadV2",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IUniswapV2Router)7837"
      },
      {
        "astId": 3796,
        "contract": "contracts/LaunchpadV2.sol:LaunchpadV2",
        "label": "uniswapFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IUniswapV2Factory)7581"
      }
    ],
    "types": {
      "t_contract(IERC20)1274": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IParentContract)3778": {
        "encoding": "inplace",
        "label": "contract IParentContract",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Factory)7581": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router)7837": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}