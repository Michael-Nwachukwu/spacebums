{
  "address": "0x56d522a352204a827100E0b3440621395a703c2B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeRemaining",
          "type": "uint256"
        }
      ],
      "name": "ClaimTooSoon",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "faucetBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestedAmount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientFaucetBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLAIM_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "drip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getNextClaimTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastClaimTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcClaimAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawRemainingTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2bc3d46c9172e5579709fdfd9e908f0ffc308db569f877a4637a9d02cfb76f5",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x7FBbE68068A3Aa7E479A1E51e792F4C2073b018f",
    "contractAddress": "0x56d522a352204a827100E0b3440621395a703c2B",
    "transactionIndex": 0,
    "gasUsed": "5556251",
    "logsBloom": "0x
    "blockHash": "0x832de85ca221905abc4839fb5cdda2f479b6e23df76d184f9966458db322b36a",
    "transactionHash": "0xb2bc3d46c9172e5579709fdfd9e908f0ffc308db569f877a4637a9d02cfb76f5",
    "logs": [],
    "blockNumber": 175617965,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf2A558c41e9A5505d2E5614a4AAb85f397816d00"
  ],
  "numDeployments": 1,
  "solcInputHash": "59364b0673da4202ec665adbb0e52d42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeRemaining\",\"type\":\"uint256\"}],\"name\":\"ClaimTooSoon\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"faucetBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"name\":\"InsufficientFaucetBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"drip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNextClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract for distributing tokens to users at regular intervals.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract, setting the token to be distributed.\",\"params\":{\"_usdcTokenAddress\":\"The address of the ERC20 token to be distributed.\"}},\"drip(address)\":{\"details\":\"Allows users to claim tokens. Users can only claim once every CLAIM_INTERVAL.\"},\"getNextClaimTime(address)\":{\"details\":\"Returns the timestamp when a user can next claim tokens.\",\"params\":{\"_user\":\"The address of the user to check.\"},\"returns\":{\"_0\":\"The timestamp when the user can next claim tokens.\"}},\"withdrawRemainingTokens(address,address)\":{\"details\":\"Allows the contract owner to withdraw all remaining tokens from the contract.\",\"params\":{\"_to\":\"The address to send the remaining tokens to.\",\"_token\":\"The address of the token to withdraw.\"}}},\"title\":\"Faucet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"drip(address)\":{\"notice\":\"This function will revert if:  - The sender is the zero address  - The claim interval has not passed since the last claim  - The faucet doesn't have enough balance to fulfill the claim\"},\"withdrawRemainingTokens(address,address)\":{\"notice\":\"This function will revert if:  - The `to` address is the zero address  - The token transfer fails\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Faucet.sol\":\"Faucet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/Faucet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Faucet\\n * @dev A contract for distributing tokens to users at regular intervals.\\n */\\ncontract Faucet {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public usdcToken;\\n\\n    uint256 public usdcClaimAmount = 30 * 10 ** 6;\\n\\n    uint256 public constant CLAIM_INTERVAL = 24 hours;\\n\\n    address owner;\\n\\n    mapping(address => uint256) public lastClaimTime;\\n\\n    /* Events */\\n    event TokensClaimed(address indexed user);\\n\\n    /* Custom Errors */\\n    error ZeroAddress();\\n    error ClaimTooSoon(uint256 timeRemaining);\\n    error InsufficientFaucetBalance(uint256 faucetBalance, uint256 requestedAmount);\\n\\n    /**\\n     * @dev Initializes the contract, setting the token to be distributed.\\n     * @param _usdcTokenAddress The address of the ERC20 token to be distributed.\\n     */\\n    constructor(address _usdcTokenAddress) {\\n        if (_usdcTokenAddress == address(0)) revert ZeroAddress();\\n        usdcToken = IERC20(_usdcTokenAddress);\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows users to claim tokens. Users can only claim once every CLAIM_INTERVAL.\\n     * @notice This function will revert if:\\n     *  - The sender is the zero address\\n     *  - The claim interval has not passed since the last claim\\n     *  - The faucet doesn't have enough balance to fulfill the claim\\n     */\\n    function drip(address _to) external {\\n        if (msg.sender == address(0)) revert ZeroAddress();\\n\\n        uint256 nextClaimTime = lastClaimTime[_to] + CLAIM_INTERVAL;\\n        if (block.timestamp < nextClaimTime) {\\n            revert ClaimTooSoon(nextClaimTime - block.timestamp);\\n        }\\n\\n        usdcToken.safeTransfer(_to, usdcClaimAmount);\\n\\n        lastClaimTime[_to] = block.timestamp;\\n        emit TokensClaimed(_to);\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp when a user can next claim tokens.\\n     * @param _user The address of the user to check.\\n     * @return The timestamp when the user can next claim tokens.\\n     */\\n    function getNextClaimTime(address _user) external view returns (uint256) {\\n        return lastClaimTime[_user] + CLAIM_INTERVAL;\\n    }\\n\\n    /**\\n     * @dev Allows the contract owner to withdraw all remaining tokens from the contract.\\n     * @param _to The address to send the remaining tokens to.\\n     * @param _token The address of the token to withdraw.\\n     * @notice This function will revert if:\\n     *  - The `to` address is the zero address\\n     *  - The token transfer fails\\n     */\\n    function withdrawRemainingTokens(address _to, address _token) external onlyOwner {\\n        if (_to == address(0)) revert ZeroAddress();\\n        if (_token == address(0)) revert ZeroAddress();\\n\\n        uint256 balance = usdcToken.balanceOf(address(this));\\n        if (balance > 0) {\\n            usdcToken.safeTransfer(_to, balance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x379397e6781d3e50c220327cd1d16db53b27a3d49db11eba2feb01c4c2acb56a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461009c57601f61060838819003918201601f19168301916001600160401b038311848410176100a15780849260209460405283398101031261009c57516001600160a01b0381169081900361009c576301c9c380600155801561008a5760018060a01b0319908160005416176000553390600254161760025560405161055090816100b88239f35b60405163d92e233d60e01b8152600490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826311eac8551461032f5750816349d3a0c11461031157816367a5cd061461021d578163884331ec146101fe57816393c30c0f146101a457816394e326f7146100ac575063b77cf9c61461007257600080fd5b346100a85760203660031901126100a85760209181906001600160a01b03610098610353565b1681526003845220549051908152f35b5080fd5b919050346101a057806003193601126101a0576100c7610353565b6001600160a01b036024358181169081900361019c578160025416330361019c578183161561018c571561017d57845416928251906370a0823160e01b82523090820152602081602481875afa9283156101745750849261013d575b508161012d578380f35b610136926103a6565b3880808380f35b9091506020813d821161016c575b816101586020938361036e565b8101031261016857519038610123565b8380fd5b3d915061014b565b513d86823e3d90fd5b50505163d92e233d60e01b8152fd5b5050505163d92e233d60e01b8152fd5b8580fd5b8280fd5b8383346100a85760203660031901126100a8576001600160a01b036101c7610353565b168252600360205280822054916201518083018093116101eb576020838351908152f35b634e487b7160e01b815260118452602490fd5b5050346100a857816003193601126100a8576020906001549051908152f35b919050346101a05760203660031901126101a057610239610353565b3315610303576001600160a01b0381811680865260036020528386205490949062015180808201918281116102f0578242106102b95750505050906102859185541690600154916103a6565b818352600360205242908320557fb638240958296a5b145c2f18c8ec62f72a20911efab2d38fb48c76695373761f8280a280f35b6024945086918991429003019283116102de575051630854f3dd60e41b815291820152fd5b634e487b7160e01b8152601184528490fd5b634e487b7160e01b895260118452602489fd5b505163d92e233d60e01b8152fd5b5050346100a857816003193601126100a85760209051620151808152f35b8490346100a857816003193601126100a85790546001600160a01b03168152602090f35b600435906001600160a01b038216820361036957565b600080fd5b90601f8019910116810190811067ffffffffffffffff82111761039057604052565b634e487b7160e01b600052604160045260246000fd5b60405163a9059cbb60e01b602082019081526001600160a01b039384166024830152604480830195909552938152929167ffffffffffffffff916080850183811186821017610390576040521692600080938192519082875af13d156104aa573d918211610496579061043b916040519161042b6020601f19601f840116018461036e565b82523d84602084013e5b846104b7565b90815191821515928361046b575b5050506104535750565b60249060405190635274afe760e01b82526004820152fd5b8192935090602091810103126100a85760200151908115918215036104935750388080610449565b80fd5b634e487b7160e01b83526041600452602483fd5b61043b9150606090610435565b906104de57508051156104cc57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610511575b6104ef575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156104e756fea26469706673582212204bea9b3ae7c443a5760db57f0e7c4da4ef642f5fd61650f7c6c7078162242eb864736f6c63430008140033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826311eac8551461032f5750816349d3a0c11461031157816367a5cd061461021d578163884331ec146101fe57816393c30c0f146101a457816394e326f7146100ac575063b77cf9c61461007257600080fd5b346100a85760203660031901126100a85760209181906001600160a01b03610098610353565b1681526003845220549051908152f35b5080fd5b919050346101a057806003193601126101a0576100c7610353565b6001600160a01b036024358181169081900361019c578160025416330361019c578183161561018c571561017d57845416928251906370a0823160e01b82523090820152602081602481875afa9283156101745750849261013d575b508161012d578380f35b610136926103a6565b3880808380f35b9091506020813d821161016c575b816101586020938361036e565b8101031261016857519038610123565b8380fd5b3d915061014b565b513d86823e3d90fd5b50505163d92e233d60e01b8152fd5b5050505163d92e233d60e01b8152fd5b8580fd5b8280fd5b8383346100a85760203660031901126100a8576001600160a01b036101c7610353565b168252600360205280822054916201518083018093116101eb576020838351908152f35b634e487b7160e01b815260118452602490fd5b5050346100a857816003193601126100a8576020906001549051908152f35b919050346101a05760203660031901126101a057610239610353565b3315610303576001600160a01b0381811680865260036020528386205490949062015180808201918281116102f0578242106102b95750505050906102859185541690600154916103a6565b818352600360205242908320557fb638240958296a5b145c2f18c8ec62f72a20911efab2d38fb48c76695373761f8280a280f35b6024945086918991429003019283116102de575051630854f3dd60e41b815291820152fd5b634e487b7160e01b8152601184528490fd5b634e487b7160e01b895260118452602489fd5b505163d92e233d60e01b8152fd5b5050346100a857816003193601126100a85760209051620151808152f35b8490346100a857816003193601126100a85790546001600160a01b03168152602090f35b600435906001600160a01b038216820361036957565b600080fd5b90601f8019910116810190811067ffffffffffffffff82111761039057604052565b634e487b7160e01b600052604160045260246000fd5b60405163a9059cbb60e01b602082019081526001600160a01b039384166024830152604480830195909552938152929167ffffffffffffffff916080850183811186821017610390576040521692600080938192519082875af13d156104aa573d918211610496579061043b916040519161042b6020601f19601f840116018461036e565b82523d84602084013e5b846104b7565b90815191821515928361046b575b5050506104535750565b60249060405190635274afe760e01b82526004820152fd5b8192935090602091810103126100a85760200151908115918215036104935750388080610449565b80fd5b634e487b7160e01b83526041600452602483fd5b61043b9150606090610435565b906104de57508051156104cc57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610511575b6104ef575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156104e756fea26469706673582212204bea9b3ae7c443a5760db57f0e7c4da4ef642f5fd61650f7c6c7078162242eb864736f6c63430008140033",
  "devdoc": {
    "details": "A contract for distributing tokens to users at regular intervals.",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Initializes the contract, setting the token to be distributed.",
        "params": {
          "_usdcTokenAddress": "The address of the ERC20 token to be distributed."
        }
      },
      "drip(address)": {
        "details": "Allows users to claim tokens. Users can only claim once every CLAIM_INTERVAL."
      },
      "getNextClaimTime(address)": {
        "details": "Returns the timestamp when a user can next claim tokens.",
        "params": {
          "_user": "The address of the user to check."
        },
        "returns": {
          "_0": "The timestamp when the user can next claim tokens."
        }
      },
      "withdrawRemainingTokens(address,address)": {
        "details": "Allows the contract owner to withdraw all remaining tokens from the contract.",
        "params": {
          "_to": "The address to send the remaining tokens to.",
          "_token": "The address of the token to withdraw."
        }
      }
    },
    "title": "Faucet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "drip(address)": {
        "notice": "This function will revert if:  - The sender is the zero address  - The claim interval has not passed since the last claim  - The faucet doesn't have enough balance to fulfill the claim"
      },
      "withdrawRemainingTokens(address,address)": {
        "notice": "This function will revert if:  - The `to` address is the zero address  - The token transfer fails"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2675,
        "contract": "contracts/Faucet.sol:Faucet",
        "label": "usdcToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)715"
      },
      {
        "astId": 2682,
        "contract": "contracts/Faucet.sol:Faucet",
        "label": "usdcClaimAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2687,
        "contract": "contracts/Faucet.sol:Faucet",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2691,
        "contract": "contracts/Faucet.sol:Faucet",
        "label": "lastClaimTime",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)715": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}