{
  "address": "0x125933626e9AAadCDe4D776e2fC31d2e715Bc1d3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x89b61f0b93d81944f5d0cb0aa41ed59d790417561afe4e33a14459928e25da39",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x7FBbE68068A3Aa7E479A1E51e792F4C2073b018f",
    "contractAddress": "0x125933626e9AAadCDe4D776e2fC31d2e715Bc1d3",
    "transactionIndex": 5,
    "gasUsed": "16957210",
    "logsBloom": "0x
    "blockHash": "0x7ec8500ea0258c6d4b3a8adc64c2a58cdabcc55ea3073a2bffbef7c7e984d5e9",
    "transactionHash": "0x89b61f0b93d81944f5d0cb0aa41ed59d790417561afe4e33a14459928e25da39",
    "logs": [],
    "blockNumber": 165927403,
    "cumulativeGasUsed": "550425",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA5f8f44614D6ADAcF924bc3143E0356d9A37A748"
  ],
  "numDeployments": 1,
  "solcInputHash": "50f148701f10ff3011b07be7eaa091fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bumdex/BumdexRouter.sol\":\"BumdexRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/bumdex/BumdexFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BumdexPair.sol\\\";\\n\\ncontract BumdexFactory {\\n    mapping(address => mapping(address => address)) public getPair;\\n    address[] public allPairs;\\n    \\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n    \\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n    \\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\n        require(tokenA != tokenB, 'IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'PAIR_EXISTS');\\n        \\n        bytes memory bytecode = type(BumdexPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        \\n        BumdexPair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair;\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n}\\n\",\"keccak256\":\"0xcb35a2700c83a1428eb25b9690f8576ea546011478d6a3d41a7dc35d9a7630aa\",\"license\":\"MIT\"},\"contracts/bumdex/BumdexPair.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract BumdexPair is IERC20 {\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    \\n    address public factory;\\n    address public token0;\\n    address public token1;\\n    \\n    uint112 private reserve0;\\n    uint112 private reserve1;\\n    uint32 private blockTimestampLast;\\n    \\n    uint256 public kLast;\\n    \\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n    \\n    // ERC-20 Implementation\\n    string public constant name = \\\"Bumdex LP Token\\\";\\n    string public constant symbol = \\\"BLP\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    \\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n    \\n    constructor() {\\n        factory = msg.sender;\\n    }\\n    \\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, 'FORBIDDEN');\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n    \\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n    \\n    function _safeTransfer(address token, address to, uint256 value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FAILED');\\n    }\\n    \\n    function _update(uint256 balance0, uint256 balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        require(balance0 <= type(uint112).max && balance1 <= type(uint112).max, 'OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n    \\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0 - _reserve0;\\n        uint256 amount1 = balance1 - _reserve1;\\n        \\n        uint256 _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = min(amount0 * _totalSupply / _reserve0, amount1 * _totalSupply / _reserve1);\\n        }\\n        require(liquidity > 0, 'INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n        \\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        kLast = uint256(reserve0) * reserve1;\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n    \\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n        \\n        uint256 _totalSupply = totalSupply;\\n        amount0 = liquidity * balance0 / _totalSupply;\\n        amount1 = liquidity * balance1 / _totalSupply;\\n        require(amount0 > 0 && amount1 > 0, 'INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n        \\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        kLast = uint256(reserve0) * reserve1;\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n    \\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'INSUFFICIENT_LIQUIDITY');\\n        \\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, 'INVALID_TO');\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'INSUFFICIENT_INPUT_AMOUNT');\\n        {\\n            uint256 balance0Adjusted = balance0 * 1000 - amount0In * 3;\\n            uint256 balance1Adjusted = balance1 * 1000 - amount1In * 3;\\n            require(balance0Adjusted * balance1Adjusted >= uint256(_reserve0) * _reserve1 * 1000**2, 'K');\\n        }\\n        \\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n    \\n    // Helper functions\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n    \\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n    \\n    // ERC-20 functions\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply += value;\\n        balanceOf[to] += value;\\n        emit Transfer(address(0), to, value);\\n    }\\n    \\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] -= value;\\n        totalSupply -= value;\\n        emit Transfer(from, address(0), value);\\n    }\\n    \\n    function approve(address spender, uint256 value) external returns (bool) {\\n        allowance[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n    \\n    function transfer(address to, uint256 value) external returns (bool) {\\n        balanceOf[msg.sender] -= value;\\n        balanceOf[to] += value;\\n        emit Transfer(msg.sender, to, value);\\n        return true;\\n    }\\n    \\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= value;\\n        }\\n        balanceOf[from] -= value;\\n        balanceOf[to] += value;\\n        emit Transfer(from, to, value);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xf7f373d9921be6f8986fa64356cbe279cd0e434f6392f93c5a7c5d3336a2baa8\",\"license\":\"MIT\"},\"contracts/bumdex/BumdexRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BumdexPair.sol\\\";\\nimport \\\"./BumdexFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract BumdexRouter {\\n    address public immutable factory;\\n    \\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, 'EXPIRED');\\n        _;\\n    }\\n    \\n    constructor(address _factory) {\\n        factory = _factory;\\n    }\\n    \\n    // Add liquidity\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256 amountA, uint256 amountB, uint256 liquidity) {\\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\n        address pair = pairFor(tokenA, tokenB);\\n        _safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n        _safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n        liquidity = BumdexPair(pair).mint(to);\\n    }\\n    \\n    function _addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin\\n    ) internal returns (uint256 amountA, uint256 amountB) {\\n        if (BumdexFactory(factory).getPair(tokenA, tokenB) == address(0)) {\\n            BumdexFactory(factory).createPair(tokenA, tokenB);\\n        }\\n        (uint256 reserveA, uint256 reserveB) = getReserves(tokenA, tokenB);\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint256 amountBOptimal = quote(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                require(amountBOptimal >= amountBMin, 'INSUFFICIENT_B_AMOUNT');\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint256 amountAOptimal = quote(amountBDesired, reserveB, reserveA);\\n                assert(amountAOptimal <= amountADesired);\\n                require(amountAOptimal >= amountAMin, 'INSUFFICIENT_A_AMOUNT');\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n    }\\n    \\n    // Remove liquidity\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) public ensure(deadline) returns (uint256 amountA, uint256 amountB) {\\n        address pair = pairFor(tokenA, tokenB);\\n        BumdexPair(pair).transferFrom(msg.sender, pair, liquidity);\\n        (uint256 amount0, uint256 amount1) = BumdexPair(pair).burn(to);\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        require(amountA >= amountAMin, 'INSUFFICIENT_A_AMOUNT');\\n        require(amountB >= amountBMin, 'INSUFFICIENT_B_AMOUNT');\\n    }\\n    \\n    // Swap functions\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = getAmountsOut(amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'INSUFFICIENT_OUTPUT_AMOUNT');\\n        _safeTransferFrom(\\n            path[0], msg.sender, pairFor(path[0], path[1]), amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n    }\\n    \\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = getAmountsIn(amountOut, path);\\n        require(amounts[0] <= amountInMax, 'EXCESSIVE_INPUT_AMOUNT');\\n        _safeTransferFrom(\\n            path[0], msg.sender, pairFor(path[0], path[1]), amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n    }\\n    \\n    // Internal functions\\n    function _swap(uint256[] memory amounts, address[] memory path, address _to) internal {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0,) = sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? pairFor(output, path[i + 2]) : _to;\\n            BumdexPair(pairFor(input, output)).swap(\\n                amount0Out, amount1Out, to, new bytes(0)\\n            );\\n        }\\n    }\\n    \\n    // Library functions\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'ZERO_ADDRESS');\\n    }\\n    \\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = BumdexFactory(factory).getPair(token0, token1);\\n        require(pair != address(0), 'PAIR_DOES_NOT_EXIST');\\n    }\\n    \\n    function getReserves(address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1,) = BumdexPair(pairFor(tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n    \\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, 'INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'INSUFFICIENT_LIQUIDITY');\\n        amountB = amountA * reserveB / reserveA;\\n    }\\n    \\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, 'INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'INSUFFICIENT_LIQUIDITY');\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n    \\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, 'INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'INSUFFICIENT_LIQUIDITY');\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = (reserveOut - amountOut) * 997;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n    \\n    function getAmountsOut(uint256 amountIn, address[] memory path) public view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, 'INVALID_PATH');\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n    \\n    function getAmountsIn(uint256 amountOut, address[] memory path) public view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, 'INVALID_PATH');\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n    \\n    function _safeTransferFrom(address token, address from, address to, uint256 value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FROM_FAILED');\\n    }\\n}\\n\",\"keccak256\":\"0x041881880fa2d6d1055901dea5b63de7008f3e22b2fa37ce492dde5f66050043\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03461007757601f61142a38819003918201601f19168301916001600160401b0383118484101761007c5780849260209460405283398101031261007757516001600160a01b0381168103610077576080526040516113979081610093823960805181818160ea015281816103820152610d030152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c80631f00ca74146106d257806338ed1739146106695780638803dbee14610548578063baa2abde146103b1578063c45a01551461036d578063d06ca61f1461033d5763e8e337001461006e57600080fd5b346103395761010036600319011261033957610088610739565b91610091610754565b916044359060643560c43560018060a01b0392888483168093036103365787946100bf4260e43510156108b4565b875163e6a4390560e01b81526001600160a01b03808c168583019081529716602088810191909152967f0000000000000000000000000000000000000000000000000000000000000000831691908890829081906040010381855afa90811561032c5791838c928695948b9998979161030f575b501615610281575b50610146908c610dba565b9690801580610279575b156101fd57506024949596506101859080999c8d9c5b61017e6101738284610cca565b9e8f8094339061123e565b339061123e565b8851998a9586946335313c2160e11b8652850152165af19384156101f35786946101bc575b50606095508251948552840152820152f35b9080945081813d83116101ec575b6101d481836106e9565b810103126101e857606095505192386101aa565b8580fd5b503d6101ca565b83513d88823e3d90fd5b61020888828c610ef7565b9782891161023357505050610185602494959661022960a43582101561094d565b80999c8d9c610166565b9194965091949650610246925083610ef7565b9586116102665791896024926101858796956102296084358b1015610909565b634e487b7160e01b8a526001835260248afd5b508715610150565b8a516364e329cb60e11b81526001600160a01b03808f16828801908152931660208401529596949593949293929183919082908790829060400103925af1801561030557908795949392916102d8575b8a9061013b565b6102f790863d88116102fe575b6102ef81836106e9565b8101906108ea565b50386102d1565b503d6102e5565b89513d85823e3d90fd5b6103269150893d8b116102fe576102ef81836106e9565b38610133565b8a513d86823e3d90fd5b80fd5b8280fd5b505034610369576103659061035a610354366107c8565b90610fd2565b90519182918261080c565b0390f35b5080fd5b505034610369578160031936011261036957517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b508290346103695760e0366003190112610369576103cd610739565b6103d5610754565b926001600160a01b039060a43582811690819003610369576103fb4260c43510156108b4565b6104058685610cca565b87516323b872dd60e01b8152338188019081526001600160a01b0383166020828101919091526044356040830152928616979290829081906060010381878b5af1801561053e57916024918a9493610510575b50848451988994859363226bf2d160e21b85528401525af194851561050457819482966104ca575b509061048d839285610c2c565b509050169116146000146104c557905b6104ab606435831015610909565b6104b960843582101561094d565b82519182526020820152f35b61049d565b87809297508196503d83116104fd575b6104e481836106e9565b810103126103365783516020909401519461048d610480565b503d6104da565b508551903d90823e3d90fd5b6105309060203d8111610537575b61052881836106e9565b810190610991565b508a610458565b503d61051e565b89513d86823e3d90fd5b509190346103695761058361057261055f36610847565b98939896929590969491944211156108b4565b61057d36858761076a565b90611117565b9561058d876109a9565b511161062d57811561061a576105a283610a2c565b906105ac84610a2c565b9083600110156106075761036588886105fd896105f78a8a6105f08b6105de8c6105d860208701610a2c565b90610cca565b6105e78a6109a9565b5191339061123e565b369161076a565b84610a65565b519182918261080c565b634e487b7160e01b815260328952602490fd5b634e487b7160e01b815260328752602490fd5b845162461bcd60e51b81526020818901526016602482015275115610d154d4d2559157d25394155517d05353d5539560521b6044820152606490fd5b509190346103695761068b61068061055f36610847565b61035436858761076a565b95865160001981019081116106bf57906106a86106b092896109cc565b5110156109e0565b811561061a576105a283610a2c565b634e487b7160e01b835260118952602483fd5b505034610369576103659061035a61057d366107c8565b90601f8019910116810190811067ffffffffffffffff82111761070b57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161070b5760051b60200190565b600435906001600160a01b038216820361074f57565b600080fd5b602435906001600160a01b038216820361074f57565b929161077582610721565b9161078360405193846106e9565b829481845260208094019160051b810192831161074f57905b8282106107a95750505050565b81356001600160a01b038116810361074f57815290830190830161079c565b90604060031983011261074f57600435916024359067ffffffffffffffff821161074f578060238301121561074f578160246108099360040135910161076a565b90565b6020908160408183019282815285518094520193019160005b828110610833575050505090565b835185529381019392810192600101610825565b9060a060031983011261074f57600435916024359160443567ffffffffffffffff9283821161074f578060238301121561074f57816004013593841161074f5760248460051b8301011161074f5760240191906064356001600160a01b038116810361074f579060843590565b156108bb57565b60405162461bcd60e51b81526020600482015260076024820152661156141254915160ca1b6044820152606490fd5b9081602091031261074f57516001600160a01b038116810361074f5790565b1561091057565b60405162461bcd60e51b8152602060048201526015602482015274125394d551919250d251539517d057d05353d55395605a1b6044820152606490fd5b1561095457565b60405162461bcd60e51b8152602060048201526015602482015274125394d551919250d251539517d097d05353d55395605a1b6044820152606490fd5b9081602091031261074f5751801515810361074f5790565b8051156109b65760200190565b634e487b7160e01b600052603260045260246000fd5b80518210156109b65760209160051b010190565b156109e757565b60405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e540000000000006044820152606490fd5b356001600160a01b038116810361074f5790565b6000198114610a4f5760010190565b634e487b7160e01b600052601160045260246000fd5b92919260005b82516000198101908111610a4f57811015610c25576001600160a01b0380610a9383866109cc565b51169060018301808411610a4f5781610aac82886109cc565b51169082610ac5610abd8487610c2c565b5092886109cc565b5191168403610c1d57600090915b87516001198101908111610a4f578490871015610c11575060028601808711610a4f578491610b1183610b09610b17948d6109cc565b511682610cca565b96610cca565b1692604093845160208082019367ffffffffffffffff948381108682111761070b57885260008352833b1561074f5797919290875198899363022c0d9f60e01b855260049788860152602498898601521660448401526080606484015283519081608485015260005b828110610bfa575050600080945083918260a49183838284010152601f801991011681010301925af18015610bef57610bc7575b5050505050610bc290610a40565b610a6b565b8411610bdc57505052610bc238808080610bb4565b604190634e487b7160e01b600052526000fd5b84513d6000823e3d90fd5b8086018201518b820160a401528a94508101610b80565b90610b17908b96610cca565b600091610ad3565b5050509050565b90916001600160a01b0391828416838216808214610c8f571015610c8a57925b91831615610c5657565b60405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b6044820152606490fd5b610c4c565b60405162461bcd60e51b81526020600482015260136024820152724944454e544943414c5f41444452455353455360681b6044820152606490fd5b90610cd491610c2c565b60405163e6a4390560e01b81526001600160a01b039283166004820152908216602482015291906020836044817f000000000000000000000000000000000000000000000000000000000000000085165afa928315610d9a57600093610d7a575b50821615610d3f57565b60405162461bcd60e51b81526020600482015260136024820152721410525497d113d154d7d393d517d1561254d5606a1b6044820152606490fd5b610d9391935060203d81116102fe576102ef81836106e9565b9138610d35565b6040513d6000823e3d90fd5b51906001600160701b038216820361074f57565b600490610ddf6060610dcc8584610c2c565b50946001600160a01b0392839185610cca565b1660405194858092630240bc6b60e21b82525afa928315610d9a576000908194610e27575b5081906001600160701b0380911694169416911614600014610e235791565b9091565b93506060843d8211610e77575b81610e41606093836106e9565b8101031261033657610e5284610da6565b906040610e6160208701610da6565b95015163ffffffff811603610336575081610e04565b3d9150610e34565b15610e8657565b60405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b6044820152606490fd5b81810292918115918404141715610a4f57565b8115610ee1570490565b634e487b7160e01b600052601260045260246000fd5b8015610f2a5761080992610f1c9183151580610f21575b610f1790610e7f565b610ec4565b610ed7565b50811515610f0e565b60405162461bcd60e51b8152602060048201526013602482015272125394d551919250d251539517d05353d55395606a1b6044820152606490fd5b15610f6c57565b60405162461bcd60e51b815260206004820152600c60248201526b0929cac82989288bea082a8960a31b6044820152606490fd5b90610faa82610721565b610fb760405191826106e9565b8281528092610fc8601f1991610721565b0190602036910137565b919091610fe3600284511015610f65565b610fed8351610fa0565b90610ff7826109a9565b5260005b83516000198101908111610a4f57811015611112576001600160a01b03908161102482876109cc565b5116916001820192838311610a4f576110499161104185896109cc565b511690610dba565b929061105583866109cc565b5180156110cd578115948515806110c4575b61107090610e7f565b6103e580830292830403610a4f576110889082610ec4565b946103e8808402938404141715610a4f578101809111610a4f576110b26110b9916110bf95610ed7565b91856109cc565b52610a40565b610ffb565b50801515611067565b60405162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e54000000000000006044820152606490fd5b509150565b919091611128600284511015610f65565b6111328351610fa0565b9283519160001992838101908111610a4f5761114e90866109cc565b528051828101908111610a4f57805b61116657505050565b828101818111611220576111936001600160a01b038061118684876109cc565b51169061104185876109cc565b906111c06111a1858a6109cc565b5180926111af8215156109e0565b8015158061123557610f1790610e7f565b916103e8928381029381850414901517156112205781810391818311611220576103e58084029384041491141715611220576111fb91610ed7565b90600182018092116112205761121190876109cc565b5280156112205782018061115d565b60246000634e487b7160e01b81526011600452fd5b50841515610f0e565b6040516323b872dd60e01b60208083019182526001600160a01b0394851660248401529490931660448201526064808201959095529384529192601f199291906112896084826106e9565b600092839283809351925af1913d15611358573d67ffffffffffffffff8111611344576112c08560405193601f84011601836106e9565b81528091843d92013e5b81611314575b50156112d95750565b6064906040519062461bcd60e51b8252600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152fd5b8051801592508390831561132c575b505050386112d0565b61133c9350820181019101610991565b388281611323565b634e487b7160e01b83526041600452602483fd5b505060606112ca56fea26469706673582212205e1e91d8f875a5bb71a0a17d5f0bbbe7246e3d874158d8e1152e44ab97a96c1564736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}