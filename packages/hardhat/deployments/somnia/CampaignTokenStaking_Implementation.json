{
  "address": "0xf57FF8CA5Ee4f6CFAe92D04d4564487B297f5271",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CampaignNotCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRewardsAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingNotEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingPeriodNotEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "campaignId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "campaignId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "campaignId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "campaignId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "apy",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minStakingPeriod",
          "type": "uint256"
        }
      ],
      "name": "StakingPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "campaignId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newApy",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "StakingPoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "campaignId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "campaignId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensUnstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_APY",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_STAKING_PERIOD",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_STAKING_PERIOD",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "_amount",
          "type": "uint128"
        }
      ],
      "name": "addRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "_amount",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "_duration",
          "type": "uint64"
        }
      ],
      "name": "calculateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "_apy",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_minStakingPeriod",
          "type": "uint64"
        }
      ],
      "name": "createStakingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        }
      ],
      "name": "getPoolStakers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        }
      ],
      "name": "getStakingPoolInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "totalStaked",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewardPool",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "apy",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "minStakingPeriod",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "emergencyMode",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stakerCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserStakeInfo",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewards",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "stakingTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "timeToUnlock",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserStakingPools",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasStaked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_launchpad",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchpad",
      "outputs": [
        {
          "internalType": "contract ILaunchpad",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolStakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "_emergencyMode",
          "type": "bool"
        }
      ],
      "name": "setEmergencyMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "_amount",
          "type": "uint128"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPoolCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "stakingPools",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "totalStaked",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewardPool",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "apy",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "minStakingPeriod",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "campaignId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "emergencyMode",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "_amount",
          "type": "uint128"
        }
      ],
      "name": "unstakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_campaignId",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "_apy",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "updateStakingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakes",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewards",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "stakingTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "lastRewardUpdate",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userStakingPools",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b00253fb590f4fc0eb3cc16a00b926271539d23f212ad76abe0325e1e581c5d",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x7FBbE68068A3Aa7E479A1E51e792F4C2073b018f",
    "contractAddress": "0xf57FF8CA5Ee4f6CFAe92D04d4564487B297f5271",
    "transactionIndex": 0,
    "gasUsed": "32064509",
    "logsBloom": "0x
    "blockHash": "0xf9eb3f301606443aff08cadb073cc951eba0e25d82f75f19427fff4caefa1cef",
    "transactionHash": "0x4b00253fb590f4fc0eb3cc16a00b926271539d23f212ad76abe0325e1e581c5d",
    "logs": [],
    "blockNumber": 170135009,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fc0ab6cbadd5d167b3b90b530f2d1da6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CampaignNotCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewardsAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingPeriodNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"campaignId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"campaignId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"campaignId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"campaignId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStakingPeriod\",\"type\":\"uint256\"}],\"name\":\"StakingPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"campaignId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newApy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"StakingPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"campaignId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"campaignId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensUnstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_APY\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STAKING_PERIOD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKING_PERIOD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_apy\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_minStakingPeriod\",\"type\":\"uint64\"}],\"name\":\"createStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"}],\"name\":\"getPoolStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"}],\"name\":\"getStakingPoolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"totalStaked\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardPool\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"apy\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minStakingPeriod\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"emergencyMode\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakerCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakeInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewards\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"stakingTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeToUnlock\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakingPools\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_launchpad\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpad\",\"outputs\":[{\"internalType\":\"contract ILaunchpad\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolStakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_emergencyMode\",\"type\":\"bool\"}],\"name\":\"setEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"stakingPools\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"totalStaked\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardPool\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"apy\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minStakingPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"campaignId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"emergencyMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_campaignId\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_apy\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewards\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"stakingTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardUpdate\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakingPools\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"addRewards(uint32,uint128)\":{\"params\":{\"_amount\":\"Amount of tokens to add as rewards\",\"_campaignId\":\"The campaign ID\"}},\"calculateRewards(uint32,uint128,uint64)\":{\"params\":{\"_amount\":\"Amount to stake\",\"_campaignId\":\"The campaign ID\",\"_duration\":\"Duration to stake for\"}},\"claimRewards(uint32)\":{\"params\":{\"_campaignId\":\"The campaign ID\"}},\"createStakingPool(uint32,uint64,uint64)\":{\"params\":{\"_apy\":\"Annual percentage yield in basis points (e.g., 1000 = 10%)\",\"_campaignId\":\"The campaign ID\",\"_minStakingPeriod\":\"Minimum staking period in seconds\"}},\"emergencyWithdraw(uint32)\":{\"params\":{\"_campaignId\":\"The campaign ID\"}},\"getPoolStakers(uint32)\":{\"params\":{\"_campaignId\":\"The campaign ID\"}},\"getStakingPoolInfo(uint32)\":{\"params\":{\"_campaignId\":\"The campaign ID\"}},\"getUserStakeInfo(uint32,address)\":{\"params\":{\"_campaignId\":\"The campaign ID\",\"_user\":\"User address\"},\"returns\":{\"amount\":\"Amount staked\",\"rewards\":\"Current rewards\",\"stakingTime\":\"When user started staking\",\"timeToUnlock\":\"Time until user can unstake\"}},\"getUserStakingPools(address)\":{\"params\":{\"_user\":\"User address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setEmergencyMode(uint32,bool)\":{\"params\":{\"_campaignId\":\"The campaign ID\",\"_emergencyMode\":\"Whether to enable emergency mode\"}},\"stakeTokens(uint32,uint128)\":{\"params\":{\"_amount\":\"Amount of tokens to stake\",\"_campaignId\":\"The campaign ID\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstakeTokens(uint32,uint128)\":{\"params\":{\"_amount\":\"Amount of tokens to unstake (0 = unstake all)\",\"_campaignId\":\"The campaign ID\"}},\"updateStakingPool(uint32,uint64,bool)\":{\"params\":{\"_apy\":\"New APY in basis points\",\"_campaignId\":\"The campaign ID\",\"_enabled\":\"Whether staking is enabled\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRewards(uint32,uint128)\":{\"notice\":\"Add rewards to a staking pool\"},\"calculateRewards(uint32,uint128,uint64)\":{\"notice\":\"Calculate potential rewards for a given amount and time\"},\"claimRewards(uint32)\":{\"notice\":\"Claim accumulated rewards without unstaking\"},\"createStakingPool(uint32,uint64,uint64)\":{\"notice\":\"Creates a staking pool for a completed campaign\"},\"emergencyWithdraw(uint32)\":{\"notice\":\"Emergency withdraw without rewards (in case of emergency mode)\"},\"getPoolStakers(uint32)\":{\"notice\":\"Get all stakers in a pool\"},\"getStakingPoolInfo(uint32)\":{\"notice\":\"Get staking pool information\"},\"getUserStakeInfo(uint32,address)\":{\"notice\":\"Get user's stake information for a campaign\"},\"getUserStakingPools(address)\":{\"notice\":\"Get all campaigns a user has staked in\"},\"setEmergencyMode(uint32,bool)\":{\"notice\":\"Enable emergency mode for a pool (owner only)\"},\"stakeTokens(uint32,uint128)\":{\"notice\":\"Stake tokens in a specific campaign's pool\"},\"unstakeTokens(uint32,uint128)\":{\"notice\":\"Unstake tokens and claim rewards\"},\"updateStakingPool(uint32,uint64,bool)\":{\"notice\":\"Update staking pool parameters (owner only)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CampaignTokenStaking.sol\":\"CampaignTokenStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/CampaignTokenStaking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title TokenStaking Contract\\n * @dev Allows users to stake tokens from completed launchpad campaigns and earn rewards\\n */\\n\\ninterface ILaunchpad {\\n    function campaigns(\\n        uint256 campaignId\\n    )\\n        external\\n        view\\n        returns (\\n            address creator,\\n            address token,\\n            address uniswapPair,\\n            uint128 targetAmount,\\n            uint128 amountRaised,\\n            uint64 deadline,\\n            uint32 reserveRatio,\\n            uint32 blockNumberCreated,\\n            bool isActive,\\n            bool isFundingComplete,\\n            bool isCancelled,\\n            bool isPromoted\\n        );\\n\\n    function campaignCount() external view returns (uint32);\\n}\\n\\ncontract CampaignTokenStaking is Initializable, ReentrancyGuardUpgradeable, OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom errors\\n    error InvalidInput();\\n    error Unauthorized();\\n    error CampaignNotCompleted();\\n    error StakingNotEnabled();\\n    error InsufficientBalance();\\n    error NoRewardsAvailable();\\n    error StakingPeriodNotEnded();\\n\\n    // Events\\n    event StakingPoolCreated(uint32 indexed campaignId, address indexed token, uint256 apy, uint256 minStakingPeriod);\\n    event TokensStaked(uint32 indexed campaignId, address indexed user, uint256 amount, uint256 timestamp);\\n    event TokensUnstaked(\\n        uint32 indexed campaignId,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 rewards,\\n        uint256 timestamp\\n    );\\n    event RewardsClaimed(uint32 indexed campaignId, address indexed user, uint256 rewards, uint256 timestamp);\\n    event StakingPoolUpdated(uint32 indexed campaignId, uint256 newApy, bool enabled);\\n    event RewardsAdded(uint32 indexed campaignId, uint256 amount);\\n    event EmergencyWithdraw(uint32 indexed campaignId, address indexed user, uint256 amount);\\n\\n    // Staking pool structure\\n    struct StakingPool {\\n        IERC20 stakingToken; // Token to be staked\\n        uint128 totalStaked; // Total amount staked in this pool\\n        uint128 rewardPool; // Available rewards for distribution\\n        uint64 apy; // Annual percentage yield (in basis points, e.g., 1000 = 10%)\\n        uint64 minStakingPeriod; // Minimum staking period in seconds\\n        uint32 campaignId; // Associated campaign ID\\n        bool enabled; // Whether staking is enabled for this pool\\n        bool emergencyMode; // Emergency mode for immediate withdrawals\\n    }\\n\\n    // User stake information\\n    struct UserStake {\\n        uint128 amount; // Amount staked by user\\n        uint128 rewards; // Accumulated rewards\\n        uint64 stakingTime; // When user started staking\\n        uint64 lastRewardUpdate; // Last time rewards were calculated\\n    }\\n\\n    // Constants\\n    uint64 public constant MAX_APY = 10000; // 100% APY max\\n    uint64 public constant MIN_STAKING_PERIOD = 1 days;\\n    uint64 public constant MAX_STAKING_PERIOD = 365 days;\\n    uint16 public constant BASIS_POINTS = 10000;\\n    uint256 public constant SECONDS_PER_YEAR = 365 * 24 * 60 * 60;\\n\\n    // State variables\\n    ILaunchpad public launchpad;\\n    uint32 public stakingPoolCount;\\n\\n    // Mappings\\n    mapping(uint32 => StakingPool) public stakingPools; // campaignId => StakingPool\\n    mapping(uint32 => mapping(address => UserStake)) public userStakes; // campaignId => user => UserStake\\n    mapping(address => uint32[]) public userStakingPools; // user => campaignIds they've staked in\\n    mapping(uint32 => address[]) public poolStakers; // campaignId => list of stakers\\n    mapping(uint32 => mapping(address => bool)) public hasStaked; // campaignId => user => hasStaked\\n\\n    modifier validCampaign(uint32 _campaignId) {\\n        if (_campaignId == 0 || _campaignId > launchpad.campaignCount()) revert InvalidInput();\\n        _;\\n    }\\n\\n    modifier campaignCompleted(uint32 _campaignId) {\\n        (, , , , , , , , , bool isFundingComplete, bool isCancelled, ) = launchpad.campaigns(_campaignId);\\n        if (!isFundingComplete || isCancelled) revert CampaignNotCompleted();\\n        _;\\n    }\\n\\n    modifier stakingEnabled(uint32 _campaignId) {\\n        if (!stakingPools[_campaignId].enabled) revert StakingNotEnabled();\\n        _;\\n    }\\n\\n    function initialize(address _launchpad, address _owner) public initializer {\\n        if (_launchpad == address(0) || _owner == address(0)) revert InvalidInput();\\n\\n        __ReentrancyGuard_init();\\n        __Ownable_init(_owner);\\n\\n        launchpad = ILaunchpad(_launchpad);\\n    }\\n\\n    /**\\n     * @notice Creates a staking pool for a completed campaign\\n     * @param _campaignId The campaign ID\\n     * @param _apy Annual percentage yield in basis points (e.g., 1000 = 10%)\\n     * @param _minStakingPeriod Minimum staking period in seconds\\n     */\\n    function createStakingPool(\\n        uint32 _campaignId,\\n        uint64 _apy,\\n        uint64 _minStakingPeriod\\n    ) external onlyOwner validCampaign(_campaignId) campaignCompleted(_campaignId) {\\n        if (_apy == 0 || _apy > MAX_APY) revert InvalidInput();\\n        if (_minStakingPeriod < MIN_STAKING_PERIOD || _minStakingPeriod > MAX_STAKING_PERIOD) revert InvalidInput();\\n        if (address(stakingPools[_campaignId].stakingToken) != address(0)) revert InvalidInput(); // Pool already exists\\n\\n        // Get token address from launchpad\\n        (, address tokenAddress, , , , , , , , , , ) = launchpad.campaigns(_campaignId);\\n\\n        StakingPool storage pool = stakingPools[_campaignId];\\n        pool.stakingToken = IERC20(tokenAddress);\\n        pool.apy = _apy;\\n        pool.minStakingPeriod = _minStakingPeriod;\\n        pool.campaignId = _campaignId;\\n        pool.enabled = true;\\n\\n        stakingPoolCount++;\\n\\n        emit StakingPoolCreated(_campaignId, tokenAddress, _apy, _minStakingPeriod);\\n    }\\n\\n    /**\\n     * @notice Stake tokens in a specific campaign's pool\\n     * @param _campaignId The campaign ID\\n     * @param _amount Amount of tokens to stake\\n     */\\n    function stakeTokens(\\n        uint32 _campaignId,\\n        uint128 _amount\\n    ) external nonReentrant validCampaign(_campaignId) stakingEnabled(_campaignId) {\\n        if (_amount == 0) revert InvalidInput();\\n\\n        StakingPool storage pool = stakingPools[_campaignId];\\n        UserStake storage userStake = userStakes[_campaignId][msg.sender];\\n\\n        // Check user balance\\n        if (pool.stakingToken.balanceOf(msg.sender) < _amount) revert InsufficientBalance();\\n\\n        // Update rewards before changing stake amount\\n        _updateUserRewards(_campaignId, msg.sender);\\n\\n        // Transfer tokens to contract\\n        pool.stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // Update user stake\\n        if (userStake.amount == 0) {\\n            userStake.stakingTime = uint64(block.timestamp);\\n            userStake.lastRewardUpdate = uint64(block.timestamp);\\n\\n            // Add user to staking pools if first time\\n            if (!hasStaked[_campaignId][msg.sender]) {\\n                hasStaked[_campaignId][msg.sender] = true;\\n                userStakingPools[msg.sender].push(_campaignId);\\n                poolStakers[_campaignId].push(msg.sender);\\n            }\\n        }\\n\\n        userStake.amount += _amount;\\n        pool.totalStaked += _amount;\\n\\n        emit TokensStaked(_campaignId, msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Unstake tokens and claim rewards\\n     * @param _campaignId The campaign ID\\n     * @param _amount Amount of tokens to unstake (0 = unstake all)\\n     */\\n    function unstakeTokens(uint32 _campaignId, uint128 _amount) external nonReentrant validCampaign(_campaignId) {\\n        StakingPool storage pool = stakingPools[_campaignId];\\n        UserStake storage userStake = userStakes[_campaignId][msg.sender];\\n\\n        if (userStake.amount == 0) revert InsufficientBalance();\\n\\n        // Check minimum staking period (unless emergency mode)\\n        if (!pool.emergencyMode && block.timestamp < userStake.stakingTime + pool.minStakingPeriod) {\\n            revert StakingPeriodNotEnded();\\n        }\\n\\n        // If amount is 0, unstake everything\\n        if (_amount == 0 || _amount > userStake.amount) {\\n            _amount = userStake.amount;\\n        }\\n\\n        // Update rewards before unstaking\\n        _updateUserRewards(_campaignId, msg.sender);\\n\\n        // Calculate and transfer rewards\\n        uint128 rewards = userStake.rewards;\\n        if (rewards > 0 && rewards <= pool.rewardPool) {\\n            userStake.rewards = 0;\\n            pool.rewardPool -= rewards;\\n            pool.stakingToken.safeTransfer(msg.sender, rewards);\\n        } else if (rewards > pool.rewardPool) {\\n            // Transfer available rewards only\\n            userStake.rewards -= pool.rewardPool;\\n            rewards = pool.rewardPool;\\n            pool.rewardPool = 0;\\n            if (rewards > 0) {\\n                pool.stakingToken.safeTransfer(msg.sender, rewards);\\n            }\\n        }\\n\\n        // Update stake amounts\\n        userStake.amount -= _amount;\\n        pool.totalStaked -= _amount;\\n\\n        // Transfer staked tokens back to user\\n        pool.stakingToken.safeTransfer(msg.sender, _amount);\\n\\n        emit TokensUnstaked(_campaignId, msg.sender, _amount, rewards, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Claim accumulated rewards without unstaking\\n     * @param _campaignId The campaign ID\\n     */\\n    function claimRewards(uint32 _campaignId) external nonReentrant validCampaign(_campaignId) {\\n        StakingPool storage pool = stakingPools[_campaignId];\\n        UserStake storage userStake = userStakes[_campaignId][msg.sender];\\n\\n        if (userStake.amount == 0) revert InsufficientBalance();\\n\\n        // Update rewards\\n        _updateUserRewards(_campaignId, msg.sender);\\n\\n        uint128 rewards = userStake.rewards;\\n        if (rewards == 0) revert NoRewardsAvailable();\\n        if (rewards > pool.rewardPool) {\\n            rewards = pool.rewardPool;\\n        }\\n\\n        userStake.rewards -= rewards;\\n        pool.rewardPool -= rewards;\\n\\n        pool.stakingToken.safeTransfer(msg.sender, rewards);\\n\\n        emit RewardsClaimed(_campaignId, msg.sender, rewards, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Add rewards to a staking pool\\n     * @param _campaignId The campaign ID\\n     * @param _amount Amount of tokens to add as rewards\\n     */\\n    function addRewards(uint32 _campaignId, uint128 _amount) external validCampaign(_campaignId) {\\n        if (_amount == 0) revert InvalidInput();\\n\\n        StakingPool storage pool = stakingPools[_campaignId];\\n\\n        pool.stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        pool.rewardPool += _amount;\\n\\n        emit RewardsAdded(_campaignId, _amount);\\n    }\\n\\n    /**\\n     * @notice Update staking pool parameters (owner only)\\n     * @param _campaignId The campaign ID\\n     * @param _apy New APY in basis points\\n     * @param _enabled Whether staking is enabled\\n     */\\n    function updateStakingPool(\\n        uint32 _campaignId,\\n        uint64 _apy,\\n        bool _enabled\\n    ) external onlyOwner validCampaign(_campaignId) {\\n        if (_apy > MAX_APY) revert InvalidInput();\\n\\n        StakingPool storage pool = stakingPools[_campaignId];\\n        pool.apy = _apy;\\n        pool.enabled = _enabled;\\n\\n        emit StakingPoolUpdated(_campaignId, _apy, _enabled);\\n    }\\n\\n    /**\\n     * @notice Enable emergency mode for a pool (owner only)\\n     * @param _campaignId The campaign ID\\n     * @param _emergencyMode Whether to enable emergency mode\\n     */\\n    function setEmergencyMode(uint32 _campaignId, bool _emergencyMode) external onlyOwner validCampaign(_campaignId) {\\n        stakingPools[_campaignId].emergencyMode = _emergencyMode;\\n    }\\n\\n    /**\\n     * @notice Emergency withdraw without rewards (in case of emergency mode)\\n     * @param _campaignId The campaign ID\\n     */\\n    function emergencyWithdraw(uint32 _campaignId) external nonReentrant validCampaign(_campaignId) {\\n        StakingPool storage pool = stakingPools[_campaignId];\\n        UserStake storage userStake = userStakes[_campaignId][msg.sender];\\n\\n        if (!pool.emergencyMode) revert InvalidInput();\\n        if (userStake.amount == 0) revert InsufficientBalance();\\n\\n        uint128 amount = userStake.amount;\\n\\n        // Reset user stake\\n        userStake.amount = 0;\\n        userStake.rewards = 0;\\n\\n        // Update pool total\\n        pool.totalStaked -= amount;\\n\\n        // Transfer tokens back\\n        pool.stakingToken.safeTransfer(msg.sender, amount);\\n\\n        emit EmergencyWithdraw(_campaignId, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Internal function to update user rewards\\n     * @param _campaignId The campaign ID\\n     * @param _user User address\\n     */\\n    function _updateUserRewards(uint32 _campaignId, address _user) internal {\\n        StakingPool storage pool = stakingPools[_campaignId];\\n        UserStake storage userStake = userStakes[_campaignId][_user];\\n\\n        if (userStake.amount == 0) return;\\n\\n        uint256 timeStaked = block.timestamp - userStake.lastRewardUpdate;\\n        if (timeStaked == 0) return;\\n\\n        // Calculate rewards: (amount * apy * timeStaked) / (BASIS_POINTS * SECONDS_PER_YEAR)\\n        uint256 rewardEarned = (uint256(userStake.amount) * pool.apy * timeStaked) / (BASIS_POINTS * SECONDS_PER_YEAR);\\n\\n        userStake.rewards += uint128(rewardEarned);\\n        userStake.lastRewardUpdate = uint64(block.timestamp);\\n    }\\n\\n    // View functions\\n\\n    /**\\n     * @notice Get user's stake information for a campaign\\n     * @param _campaignId The campaign ID\\n     * @param _user User address\\n     * @return amount Amount staked\\n     * @return rewards Current rewards\\n     * @return stakingTime When user started staking\\n     * @return timeToUnlock Time until user can unstake\\n     */\\n    function getUserStakeInfo(\\n        uint32 _campaignId,\\n        address _user\\n    ) external view returns (uint128 amount, uint128 rewards, uint64 stakingTime, uint64 timeToUnlock) {\\n        UserStake memory userStake = userStakes[_campaignId][_user];\\n        StakingPool memory pool = stakingPools[_campaignId];\\n\\n        amount = userStake.amount;\\n        stakingTime = userStake.stakingTime;\\n\\n        // Calculate current rewards\\n        if (amount > 0) {\\n            uint256 timeStaked = block.timestamp - userStake.lastRewardUpdate;\\n            uint256 newRewards = (uint256(amount) * pool.apy * timeStaked) / (BASIS_POINTS * SECONDS_PER_YEAR);\\n            rewards = userStake.rewards + uint128(newRewards);\\n        }\\n\\n        // Calculate time to unlock\\n        uint64 unlockTime = stakingTime + pool.minStakingPeriod;\\n        timeToUnlock = block.timestamp >= unlockTime ? 0 : unlockTime - uint64(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Get staking pool information\\n     * @param _campaignId The campaign ID\\n     */\\n    function getStakingPoolInfo(\\n        uint32 _campaignId\\n    )\\n        external\\n        view\\n        returns (\\n            address stakingToken,\\n            uint128 totalStaked,\\n            uint128 rewardPool,\\n            uint64 apy,\\n            uint64 minStakingPeriod,\\n            bool enabled,\\n            bool emergencyMode,\\n            uint256 stakerCount\\n        )\\n    {\\n        StakingPool memory pool = stakingPools[_campaignId];\\n\\n        return (\\n            address(pool.stakingToken),\\n            pool.totalStaked,\\n            pool.rewardPool,\\n            pool.apy,\\n            pool.minStakingPeriod,\\n            pool.enabled,\\n            pool.emergencyMode,\\n            poolStakers[_campaignId].length\\n        );\\n    }\\n\\n    /**\\n     * @notice Get all campaigns a user has staked in\\n     * @param _user User address\\n     */\\n    function getUserStakingPools(address _user) external view returns (uint32[] memory) {\\n        return userStakingPools[_user];\\n    }\\n\\n    /**\\n     * @notice Get all stakers in a pool\\n     * @param _campaignId The campaign ID\\n     */\\n    function getPoolStakers(uint32 _campaignId) external view returns (address[] memory) {\\n        return poolStakers[_campaignId];\\n    }\\n\\n    /**\\n     * @notice Calculate potential rewards for a given amount and time\\n     * @param _campaignId The campaign ID\\n     * @param _amount Amount to stake\\n     * @param _duration Duration to stake for\\n     */\\n    function calculateRewards(uint32 _campaignId, uint128 _amount, uint64 _duration) external view returns (uint256) {\\n        StakingPool memory pool = stakingPools[_campaignId];\\n        return (uint256(_amount) * pool.apy * _duration) / (BASIS_POINTS * SECONDS_PER_YEAR);\\n    }\\n}\\n\",\"keccak256\":\"0x43ec76e23136d5683045a31bd755dfab0dba641bfcf7a0e409d1a4bd98b878ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657612595908161001c8239f35b600080fdfe60808060405260048036101561001457600080fd5b60003560e01c91826302669b5214611e855750816309e50fdd14611de25781630e0342ce14611abc5781632dd96be914611a95578163366ecb3d1461194c5781633d92f4e21461032457816345dcb904146118ee578163485cc955146117595781635260ffd91461170057816367db4c9a1461163e57816369bb2056146115e15781636dc835731461124d5781636f47999b14611075578163715018a61461100b5781637b3d035414610f815781638da5cb5b14610f4b578163a7cb932614610e6a578163b237013b14610d77578163c140db9814610c88578163c743dabb14610c6a578163cac33fdc14610305578163d04d0f5614610a53578163db288f5914610756578163de186413146105b1578163e085825514610341578163e1f1c4a714610324578163e6a69ab814610305578163e9f9695714610190575063f2fde38b1461016057600080fd5b3461018b57602036600319011261018b5761018961017c611ee8565b610184611f7b565b611fb4565b005b600080fd5b3461018b57604036600319011261018b576101a9611ea9565b906101b2611f65565b63ffffffff809316928315908115610280575b50610270576001600160801b03811691821561026157507f077e724263b798a6f4bfc1c44e800962141af23891d3fb7e194ce415687cc2519161025860209285600052600184526102386001604060002061022c86838060a01b0383541630903390612217565b0191825460801c6121b6565b81546001600160801b031660809190911b6001600160801b031916179055565b604051908152a2005b60405163b4fa3fb360e01b8152fd5b5060405163b4fa3fb360e01b8152fd5b600054604051637274e30d60e01b81529192506020908290869082906001600160a01b03165afa9081156102f9576000916102c0575b50168311846101c5565b90506020813d82116102f1575b816102da6020938361209b565b8101031261018b576102eb906120bc565b856102b6565b3d91506102cd565b6040513d6000823e3d90fd5b3461018b57600036600319011261018b5760206040516301e133808152f35b3461018b57600036600319011261018b5760206040516127108152f35b3461018b57604036600319011261018b5761035a611ea9565b610362611efe565b60009263ffffffff8093169182600052600260205260406000209060018060a01b031660005260205260406000209260405193608085018581106001600160401b0382111761059c5760405260018154916001600160801b0383168752602087019260801c83520154936001600160401b03851660408701526001600160401b03606087019560401c1685526000526001602052604060002060026040519161040a83612069565b60018060a01b03815416835260018101546001600160801b038116602085015260801c604084015201549060e060ff60608301936001600160401b038116855260808401966001600160401b038260401c1688528160801c1660a0850152818160a01c16151560c085015260a81c1615159101526001600160401b0360406001600160801b03885116970151169486610543575b5050506104b66001600160401b0380925116846123a7565b16428111610509575050610505906000905b60405194859485929093606092959460808501966001600160801b0380921686521660208501526001600160401b03809216604085015216910152565b0390f35b6001600160401b0342169003906001600160401b03821161052e5750610505916104c8565b601190634e487b7160e01b6000525260246000fd5b6001600160401b039397506104b6926001600160801b038064496cebb80061058988966105848d8961057b816105959b51164261242a565b93511690612437565b612437565b049251169116906121b6565b969261049e565b604184634e487b7160e01b6000525260246000fd5b3461018b5760208060031936011261018b576105cb611ea9565b906105d46121e7565b63ffffffff8092169182159081156106e2575b506106d15781600052600181526040600020600282526040600020336000528252604060002060ff600283015460a81c16156106c0576001600160801b0390818154169586156106b157507fdb334580ee57cc6c0cf241d0f61fa5f09ac1cfa03d31894c5f1ee86418d7822393926106949260008893556001820190815490610672858284166123c2565b6001600160801b031990921691161790555433906001600160a01b03166123db565b6040519384523393a3600160008051602061254083398151915255005b604051631e9acf1760e31b8152fd5b60405163b4fa3fb360e01b81528590fd5b60405163b4fa3fb360e01b81528390fd5b600054604051637274e30d60e01b815291925083908290879082906001600160a01b03165afa9081156102f957600091610721575b50168211846105e7565b90508281813d831161074f575b610738818361209b565b8101031261018b57610749906120bc565b85610717565b503d61072e565b3461018b57604036600319011261018b5761076f611ea9565b90610778611f65565b6107806121e7565b63ffffffff908184169182159081156109da575b506106d1578092826000526001948560205260406000209060026020526040600020336000526020526040600020926001600160801b0394858554169182156106b15760028501548a60ff8260a81c161591826109b1575b50506109a257508516818115918215610998575b505061098e575b5061081390339061244a565b82825460801c918215158061097e575b156108fb5783826108b194955416815561084789830161023887825460801c6123c2565b8154610861908685169033906001600160a01b03166123db565b805490836108718a8285166123c2565b166001600160801b031980931617905588820190815490846108958b8285166123c2565b16911617905554951694859033906001600160a01b03166123db565b6040519384521660208301524260408301527f0ae5642d8815a80fe7af32409806aa2301711612d3f5f48c5aab677332273d9e60603393a360008051602061254083398151915255005b87810193845460801c808511610918575b506108b1939450610861565b610928610948916108b1966123c2565b82546001600160801b031660809190911b6001600160801b031916178255565b845494838660801c9616905584610961575b849361090c565b815461097990869033906001600160a01b03166123db565b61095a565b508781015460801c831115610823565b9550610813610807565b119050818a610800565b60405163e733132560e01b8152fd5b908801546001600160401b0392506109d09160401c83169083166123a7565b1642108a8c6107ec565b600054604051637274e30d60e01b81529192506020908290879082906001600160a01b03165afa9081156102f957600091610a1a575b5016821185610794565b90506020813d8211610a4b575b81610a346020938361209b565b8101031261018b57610a45906120bc565b86610a10565b3d9150610a27565b3461018b5760208060031936011261018b576001600160a01b03610a75611ee8565b166000526003815260406000206040518081848085549384815201809560005281600020936000905b806007830110610bfa57610afb95549184828210610be4575b828210610bcc575b828210610bb3575b828210610b9a575b828210610b81575b828210610b68575b828210610b4f575b5010610b41575b509050939293038361209b565b604051928392818401908285525180915260408401929160005b828110610b2457505050500390f35b835163ffffffff1685528695509381019392810192600101610b15565b60e01c815201859087610aee565b6001919463ffffffff8560c01c16815201930184610ae7565b6001919463ffffffff8560a01c16815201930184610adf565b6001919463ffffffff8560801c16815201930184610ad7565b6001919463ffffffff8560601c16815201930184610acf565b6001919463ffffffff8560401c16815201930184610ac7565b6001919463ffffffff85831c16815201930184610abf565b6001919463ffffffff8516815201930184610ab7565b925092506001610100600892865463ffffffff808216835280828d1c168c840152808260401c16604084015260608183821c169084015260808183821c169084015260a08183821c169084015260c09082821c169083015260e01c60e08201520194019201928492938792610a9e565b3461018b57600036600319011261018b576020604051620151808152f35b3461018b57604036600319011261018b57610ca1611ea9565b6024359182151580930361018b57610cb7611f7b565b63ffffffff809216918215908115610cfe575b5061026157506000908152600160205260409020600201805460ff60a81b191660a89290921b60ff60a81b16919091179055005b600054604051637274e30d60e01b81529192506020908290859082906001600160a01b03165afa9081156102f957600091610d3e575b5016821184610cca565b90506020813d8211610d6f575b81610d586020938361209b565b8101031261018b57610d69906120bc565b85610d34565b3d9150610d4b565b3461018b57602036600319011261018b576101009063ffffffff9060e082610d9d611ea9565b16806000526001602052604060002093604051610db981612069565b60018060a01b038654169586825260018101549560026001600160801b0388169788602086015260801c928360408601520154946001600160401b0393848716948560608301528760401c16958660808301528760801c1660a082015260ff808860a01c161515978860c084015260a81c161515978891015260005260205260406000205495604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152f35b3461018b57606036600319011261018b57602064496cebb800610f42610e8e611ea9565b610e96611f65565b610f3a610ea1611ed2565b9263ffffffff80911660005260018752604060002060405193610ec385612069565b60018060a01b03825416855260026001830154926001600160801b03938481168c89015260801c604088015201549460e060ff6001600160401b039788811696876060860152898260401c1660808601528160801c1660a0850152818160a01c16151560c085015260a81c16151591015216612437565b911690612437565b04604051908152f35b3461018b57600036600319011261018b57600080516020612520833981519152546040516001600160a01b039091168152602090f35b3461018b57604036600319011261018b57610f9a611ea9565b63ffffffff610fa7611efe565b911660009081526002602090815260408083206001600160a01b03909416835292815290829020805460019091015483516001600160801b0383168152608092831c938101939093526001600160401b0380821684860152931c9092166060820152f35b3461018b57600036600319011261018b57611024611f7b565b60008051602061252083398151915280546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461018b5760208060031936011261018b5761108f611ea9565b6110976121e7565b63ffffffff908181169182159081156111d9575b506111c85781600052600183526040600020926002815260406000209033600052526040600020926001600160801b039182855416156111b7576110f090339061244a565b835460801c93849585156111a857506001820190815460801c80871161119e575b5090611129611137926102388861114c98999a6123c2565b61023887825460801c6123c2565b549084169033906001600160a01b03166123db565b604080516001600160801b0393909316835242602084015233927f7ba7a770bf3c52ce3b87ea1bc63697c8be16a35b49798460e4d7b2dc63a97ec49190a3600160008051602061254083398151915255005b9550611129611111565b60405163afb0be3360e01b8152fd5b604051631e9acf1760e31b81528690fd5b60405163b4fa3fb360e01b81528490fd5b600054604051637274e30d60e01b815291925085908290889082906001600160a01b03165afa9081156102f957600091611218575b50168211856110ab565b90508481813d8311611246575b61122f818361209b565b8101031261018b57611240906120bc565b8661120e565b503d611225565b3461018b57604036600319011261018b57611266611ea9565b9061126f611f65565b906112786121e7565b63ffffffff908184169182158015611567575b610270578260005260019460209086825260ff60026040600020015460a01c1615611556576001600160801b0392838716948515610261578660005288845260406000209360028152604060002033600052815260406000209660018060a01b039460248387895416604051928380926370a0823160e01b8252338a8301525afa80156102f9578391600091611525575b5010611514578b96959493929161133761134492339061244a565b8587541630903390612217565b86885416156113e6575b5050505083549383611362888288166121b6565b166001600160801b03198096161790550191825491611383868285166121b6565b1691161790557f1cf04f1cefae2fa881fb53d338793ba18f37cf9bc8370933663e2a8e86a34352604051806113d13395429083602090939291936001600160801b0360408201951681520152565b0390a360008051602061254083398151915255005b87860180546001600160801b031916426001600160401b0381169190911760409190911b67ffffffffffffffff60401b161790558860005260058152604060002033600052815260ff6040600020541661134e579091929394508760005260058152604060002033600052815260406000208a60ff198254161790556003815260406000209283546801000000000000000094858210156114ff5781611493918e87969594018155611f14565b819291549060031b918c831b921b191617905588600052526040600020908154928310156114ea5750816114ce918a80969594018155611f4d565b819291549060031b9133831b921b19161790558780808061134e565b604190634e487b7160e01b6000525260246000fd5b604185634e487b7160e01b6000525260246000fd5b604051631e9acf1760e31b81528490fd5b809250858092503d831161154f575b61153e818361209b565b8101031261018b578290518e61131c565b503d611534565b60405163a3df9bcf60e01b81528490fd5b50600054604051637274e30d60e01b8152906020908290859082906001600160a01b03165afa80156102f95782916000916115a6575b5016831161128b565b9150506020813d82116115d9575b816115c16020938361209b565b8101031261018b576115d382916120bc565b8761159d565b3d91506115b4565b3461018b57604036600319011261018b576115fa611ea9565b9063ffffffff60243592166000526020526040600020805482101561018b5760209161162591611f4d565b905460405160039290921b1c6001600160a01b03168152f35b3461018b576020908160031936011261018b5763ffffffff61165e611ea9565b166000528152604060002060405190818382549182815201908192600052846000209060005b868282106116e357868661169a8288038361209b565b604051928392818401908285525180915260408401929160005b8281106116c357505050500390f35b83516001600160a01b0316855286955093810193928101926001016116b4565b83546001600160a01b031685529093019260019283019201611684565b3461018b57604036600319011261018b57611719611ea9565b63ffffffff611726611efe565b9116600052600560205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461018b57604036600319011261018b57611772611ee8565b9061177b611efe565b917ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009283549260ff8460401c1615936001600160401b038116801590816118e6575b60011490816118dc575b1590816118d3575b506118c35767ffffffffffffffff1981166001178655846118a4575b506001600160a01b03928316928315908115611899575b50610261575061183e90611814612028565b61181c612028565b600160008051602061254083398151915255611836612028565b610184612028565b6bffffffffffffffffffffffff60a01b600054161760005561185c57005b68ff00000000000000001981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b905082161586611802565b68ffffffffffffffffff191668010000000000000001178555856117eb565b5060405163f92ee8a960e01b8152fd5b905015876117cf565b303b1591506117c7565b8691506117bd565b3461018b57604036600319011261018b57611907611ee8565b6001600160a01b0316600090815260036020526040902080546024359081101561018b5761193c63ffffffff91602093611f14565b90549060031b1c16604051908152f35b3461018b57606036600319011261018b57611965611ea9565b9061196e611ebc565b6044359081151580920361018b57611984611f7b565b63ffffffff809416938415908115611a1c575b506106d1576001600160401b031691612710831161026157507f60d7d831c21ff35d25fd0390bd3dab275aeac6738b358fffbe53c10d9cca5179916040918460005260016020526002836000200180548360ff60a01b8460a01b169174ff000000000000000000000000ffffffffffffffff19161717905582519182526020820152a2005b600054604051637274e30d60e01b81529192506020908290879082906001600160a01b03165afa9081156102f957600091611a5c575b5016841185611997565b90506020813d8211611a8d575b81611a766020938361209b565b8101031261018b57611a87906120bc565b86611a52565b3d9150611a69565b3461018b57600036600319011261018b57602063ffffffff60005460a01c16604051908152f35b3461018b57606036600319011261018b57611ad5611ea9565b90611ade611ebc565b611ae6611ed2565b92611aef611f7b565b63ffffffff928382169384158015611d68575b61027057600054604051630506586f60e21b808252848201889052610180989095909290916001600160a01b03918216908a81602481855afa9081156102f957600090600092611d3d575b5015908115611d35575b50611d24576001600160401b038098169788158015611d19575b611cfb578416966201518088108015611d0c575b611cfb578960005260016020528260406000205416611cfb578a9060246040518094819382528d8b8301525afa998a156102f95760009a611cb9575b50506002611c2c9189600052600160205260406000209a16998a6bffffffffffffffffffffffff60a01b8254161781550192876001600160401b0319855416178455839067ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b815464ffffffffff60801b191660809190911b63ffffffff60801b1617600160a01b1790556000549160a083901c821691821461052e575063ffffffff60a01b19909116600190910160a01b63ffffffff60a01b16176000556040805192835260208301919091527f207ac0e869fc34ff7b195d58dcebf6679d65538406e7edc06ac05d9a4b10984f91a3005b611c2c929a5060029181611ce192903d10611cf4575b611cd9818361209b565b810190612102565b5050505050505050505090509991611bc1565b503d611ccf565b60405163b4fa3fb360e01b81528790fd5b506301e133808811611b85565b506127108911611b71565b604051631a9cf8fb60e11b81528690fd5b90508b611b57565b9050611d5691508b3d8d11611cf457611cd9818361209b565b5099509750505050505050508c611b4d565b50600054604051637274e30d60e01b8152906020908290859082906001600160a01b03165afa80156102f9578291600091611da7575b50168511611b02565b9150506020813d8211611dda575b81611dc26020938361209b565b8101031261018b57611dd482916120bc565b88611d9e565b3d9150611db5565b3461018b57602036600319011261018b5761010063ffffffff80611e04611ea9565b16600052600160205260ff604060002060018060a01b038154169260026001830154920154916040519485526001600160801b038116602086015260801c60408501526001600160401b0380831660608601528260401c1660808501528160801c1660a0840152818160a01c16151560c084015260a81c16151560e0820152f35b3461018b57600036600319011261018b576000546001600160a01b03168152602090f35b6004359063ffffffff8216820361018b57565b602435906001600160401b038216820361018b57565b604435906001600160401b038216820361018b57565b600435906001600160a01b038216820361018b57565b602435906001600160a01b038216820361018b57565b9190918054831015611f3757600052601c60206000208360031c019260021b1690565b634e487b7160e01b600052603260045260246000fd5b8054821015611f375760005260206000200190600090565b602435906001600160801b038216820361018b57565b600080516020612520833981519152546001600160a01b03163303611f9c57565b60405163118cdaa760e01b8152336004820152602490fd5b6001600160a01b0390811690811561200f5760008051602061252083398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b604051631e4fbdf760e01b815260006004820152602490fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c161561205757565b604051631afcd79f60e31b8152600490fd5b61010081019081106001600160401b0382111761208557604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b0382111761208557604052565b519063ffffffff8216820361018b57565b51906001600160a01b038216820361018b57565b51906001600160801b038216820361018b57565b5190811515820361018b57565b91908261018091031261018b57612118826120cd565b91612125602082016120cd565b91612132604083016120cd565b9161213f606082016120e1565b9161214c608083016120e1565b9160a08101516001600160401b038116810361018b579161216f60c083016120bc565b9161217c60e082016120bc565b9161218a61010083016120f5565b9161219861012082016120f5565b916121b36101606121ac61014085016120f5565b93016120f5565b90565b9190916001600160801b03808094169116019182116121d157565b634e487b7160e01b600052601160045260246000fd5b60008051602061254083398151915260028154146122055760029055565b604051633ee5aeb560e01b8152600490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b038411176120855761226f92604052612271565b565b60018060a01b031690600080826020829451910182865af13d15612338573d906001600160401b03821161232457906122cc91604051916122bc6020601f19601f840116018461209b565b82523d84602084013e5b84612344565b80519182151592836122fb575b5050506122e35750565b60249060405190635274afe760e01b82526004820152fd5b8293509160209192810103126123215750602061231891016120f5565b153880806122d9565b80fd5b634e487b7160e01b83526041600452602483fd5b6122cc906060906122c6565b9061236b575080511561235957805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061239e575b61237c575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15612374565b9190916001600160401b03808094169116019182116121d157565b6001600160801b0391821690821603919082116121d157565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448083019390935291815260808101916001600160401b038311828410176120855761226f92604052612271565b919082039182116121d157565b818102929181159184041417156121d157565b63ffffffff166000526001602052604060002090600260205260406000209060018060a01b0316600052602052604060002080546001600160801b03918282169081156125185760018101936001600160401b03936124af85875460401c164261242a565b91821561250e5764496cebb8006124da610238946105846124e5988a600261226f9e01541690612437565b04169060801c6121b6565b421667ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b5050505050505050565b505050505056fe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a26469706673582212204724db838409d7878add4e2de63f5b21183dd2d29df9d2e76edfdc9d9994851164736f6c63430008140033",
  "deployedBytecode": "0x60808060405260048036101561001457600080fd5b60003560e01c91826302669b5214611e855750816309e50fdd14611de25781630e0342ce14611abc5781632dd96be914611a95578163366ecb3d1461194c5781633d92f4e21461032457816345dcb904146118ee578163485cc955146117595781635260ffd91461170057816367db4c9a1461163e57816369bb2056146115e15781636dc835731461124d5781636f47999b14611075578163715018a61461100b5781637b3d035414610f815781638da5cb5b14610f4b578163a7cb932614610e6a578163b237013b14610d77578163c140db9814610c88578163c743dabb14610c6a578163cac33fdc14610305578163d04d0f5614610a53578163db288f5914610756578163de186413146105b1578163e085825514610341578163e1f1c4a714610324578163e6a69ab814610305578163e9f9695714610190575063f2fde38b1461016057600080fd5b3461018b57602036600319011261018b5761018961017c611ee8565b610184611f7b565b611fb4565b005b600080fd5b3461018b57604036600319011261018b576101a9611ea9565b906101b2611f65565b63ffffffff809316928315908115610280575b50610270576001600160801b03811691821561026157507f077e724263b798a6f4bfc1c44e800962141af23891d3fb7e194ce415687cc2519161025860209285600052600184526102386001604060002061022c86838060a01b0383541630903390612217565b0191825460801c6121b6565b81546001600160801b031660809190911b6001600160801b031916179055565b604051908152a2005b60405163b4fa3fb360e01b8152fd5b5060405163b4fa3fb360e01b8152fd5b600054604051637274e30d60e01b81529192506020908290869082906001600160a01b03165afa9081156102f9576000916102c0575b50168311846101c5565b90506020813d82116102f1575b816102da6020938361209b565b8101031261018b576102eb906120bc565b856102b6565b3d91506102cd565b6040513d6000823e3d90fd5b3461018b57600036600319011261018b5760206040516301e133808152f35b3461018b57600036600319011261018b5760206040516127108152f35b3461018b57604036600319011261018b5761035a611ea9565b610362611efe565b60009263ffffffff8093169182600052600260205260406000209060018060a01b031660005260205260406000209260405193608085018581106001600160401b0382111761059c5760405260018154916001600160801b0383168752602087019260801c83520154936001600160401b03851660408701526001600160401b03606087019560401c1685526000526001602052604060002060026040519161040a83612069565b60018060a01b03815416835260018101546001600160801b038116602085015260801c604084015201549060e060ff60608301936001600160401b038116855260808401966001600160401b038260401c1688528160801c1660a0850152818160a01c16151560c085015260a81c1615159101526001600160401b0360406001600160801b03885116970151169486610543575b5050506104b66001600160401b0380925116846123a7565b16428111610509575050610505906000905b60405194859485929093606092959460808501966001600160801b0380921686521660208501526001600160401b03809216604085015216910152565b0390f35b6001600160401b0342169003906001600160401b03821161052e5750610505916104c8565b601190634e487b7160e01b6000525260246000fd5b6001600160401b039397506104b6926001600160801b038064496cebb80061058988966105848d8961057b816105959b51164261242a565b93511690612437565b612437565b049251169116906121b6565b969261049e565b604184634e487b7160e01b6000525260246000fd5b3461018b5760208060031936011261018b576105cb611ea9565b906105d46121e7565b63ffffffff8092169182159081156106e2575b506106d15781600052600181526040600020600282526040600020336000528252604060002060ff600283015460a81c16156106c0576001600160801b0390818154169586156106b157507fdb334580ee57cc6c0cf241d0f61fa5f09ac1cfa03d31894c5f1ee86418d7822393926106949260008893556001820190815490610672858284166123c2565b6001600160801b031990921691161790555433906001600160a01b03166123db565b6040519384523393a3600160008051602061254083398151915255005b604051631e9acf1760e31b8152fd5b60405163b4fa3fb360e01b81528590fd5b60405163b4fa3fb360e01b81528390fd5b600054604051637274e30d60e01b815291925083908290879082906001600160a01b03165afa9081156102f957600091610721575b50168211846105e7565b90508281813d831161074f575b610738818361209b565b8101031261018b57610749906120bc565b85610717565b503d61072e565b3461018b57604036600319011261018b5761076f611ea9565b90610778611f65565b6107806121e7565b63ffffffff908184169182159081156109da575b506106d1578092826000526001948560205260406000209060026020526040600020336000526020526040600020926001600160801b0394858554169182156106b15760028501548a60ff8260a81c161591826109b1575b50506109a257508516818115918215610998575b505061098e575b5061081390339061244a565b82825460801c918215158061097e575b156108fb5783826108b194955416815561084789830161023887825460801c6123c2565b8154610861908685169033906001600160a01b03166123db565b805490836108718a8285166123c2565b166001600160801b031980931617905588820190815490846108958b8285166123c2565b16911617905554951694859033906001600160a01b03166123db565b6040519384521660208301524260408301527f0ae5642d8815a80fe7af32409806aa2301711612d3f5f48c5aab677332273d9e60603393a360008051602061254083398151915255005b87810193845460801c808511610918575b506108b1939450610861565b610928610948916108b1966123c2565b82546001600160801b031660809190911b6001600160801b031916178255565b845494838660801c9616905584610961575b849361090c565b815461097990869033906001600160a01b03166123db565b61095a565b508781015460801c831115610823565b9550610813610807565b119050818a610800565b60405163e733132560e01b8152fd5b908801546001600160401b0392506109d09160401c83169083166123a7565b1642108a8c6107ec565b600054604051637274e30d60e01b81529192506020908290879082906001600160a01b03165afa9081156102f957600091610a1a575b5016821185610794565b90506020813d8211610a4b575b81610a346020938361209b565b8101031261018b57610a45906120bc565b86610a10565b3d9150610a27565b3461018b5760208060031936011261018b576001600160a01b03610a75611ee8565b166000526003815260406000206040518081848085549384815201809560005281600020936000905b806007830110610bfa57610afb95549184828210610be4575b828210610bcc575b828210610bb3575b828210610b9a575b828210610b81575b828210610b68575b828210610b4f575b5010610b41575b509050939293038361209b565b604051928392818401908285525180915260408401929160005b828110610b2457505050500390f35b835163ffffffff1685528695509381019392810192600101610b15565b60e01c815201859087610aee565b6001919463ffffffff8560c01c16815201930184610ae7565b6001919463ffffffff8560a01c16815201930184610adf565b6001919463ffffffff8560801c16815201930184610ad7565b6001919463ffffffff8560601c16815201930184610acf565b6001919463ffffffff8560401c16815201930184610ac7565b6001919463ffffffff85831c16815201930184610abf565b6001919463ffffffff8516815201930184610ab7565b925092506001610100600892865463ffffffff808216835280828d1c168c840152808260401c16604084015260608183821c169084015260808183821c169084015260a08183821c169084015260c09082821c169083015260e01c60e08201520194019201928492938792610a9e565b3461018b57600036600319011261018b576020604051620151808152f35b3461018b57604036600319011261018b57610ca1611ea9565b6024359182151580930361018b57610cb7611f7b565b63ffffffff809216918215908115610cfe575b5061026157506000908152600160205260409020600201805460ff60a81b191660a89290921b60ff60a81b16919091179055005b600054604051637274e30d60e01b81529192506020908290859082906001600160a01b03165afa9081156102f957600091610d3e575b5016821184610cca565b90506020813d8211610d6f575b81610d586020938361209b565b8101031261018b57610d69906120bc565b85610d34565b3d9150610d4b565b3461018b57602036600319011261018b576101009063ffffffff9060e082610d9d611ea9565b16806000526001602052604060002093604051610db981612069565b60018060a01b038654169586825260018101549560026001600160801b0388169788602086015260801c928360408601520154946001600160401b0393848716948560608301528760401c16958660808301528760801c1660a082015260ff808860a01c161515978860c084015260a81c161515978891015260005260205260406000205495604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152f35b3461018b57606036600319011261018b57602064496cebb800610f42610e8e611ea9565b610e96611f65565b610f3a610ea1611ed2565b9263ffffffff80911660005260018752604060002060405193610ec385612069565b60018060a01b03825416855260026001830154926001600160801b03938481168c89015260801c604088015201549460e060ff6001600160401b039788811696876060860152898260401c1660808601528160801c1660a0850152818160a01c16151560c085015260a81c16151591015216612437565b911690612437565b04604051908152f35b3461018b57600036600319011261018b57600080516020612520833981519152546040516001600160a01b039091168152602090f35b3461018b57604036600319011261018b57610f9a611ea9565b63ffffffff610fa7611efe565b911660009081526002602090815260408083206001600160a01b03909416835292815290829020805460019091015483516001600160801b0383168152608092831c938101939093526001600160401b0380821684860152931c9092166060820152f35b3461018b57600036600319011261018b57611024611f7b565b60008051602061252083398151915280546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461018b5760208060031936011261018b5761108f611ea9565b6110976121e7565b63ffffffff908181169182159081156111d9575b506111c85781600052600183526040600020926002815260406000209033600052526040600020926001600160801b039182855416156111b7576110f090339061244a565b835460801c93849585156111a857506001820190815460801c80871161119e575b5090611129611137926102388861114c98999a6123c2565b61023887825460801c6123c2565b549084169033906001600160a01b03166123db565b604080516001600160801b0393909316835242602084015233927f7ba7a770bf3c52ce3b87ea1bc63697c8be16a35b49798460e4d7b2dc63a97ec49190a3600160008051602061254083398151915255005b9550611129611111565b60405163afb0be3360e01b8152fd5b604051631e9acf1760e31b81528690fd5b60405163b4fa3fb360e01b81528490fd5b600054604051637274e30d60e01b815291925085908290889082906001600160a01b03165afa9081156102f957600091611218575b50168211856110ab565b90508481813d8311611246575b61122f818361209b565b8101031261018b57611240906120bc565b8661120e565b503d611225565b3461018b57604036600319011261018b57611266611ea9565b9061126f611f65565b906112786121e7565b63ffffffff908184169182158015611567575b610270578260005260019460209086825260ff60026040600020015460a01c1615611556576001600160801b0392838716948515610261578660005288845260406000209360028152604060002033600052815260406000209660018060a01b039460248387895416604051928380926370a0823160e01b8252338a8301525afa80156102f9578391600091611525575b5010611514578b96959493929161133761134492339061244a565b8587541630903390612217565b86885416156113e6575b5050505083549383611362888288166121b6565b166001600160801b03198096161790550191825491611383868285166121b6565b1691161790557f1cf04f1cefae2fa881fb53d338793ba18f37cf9bc8370933663e2a8e86a34352604051806113d13395429083602090939291936001600160801b0360408201951681520152565b0390a360008051602061254083398151915255005b87860180546001600160801b031916426001600160401b0381169190911760409190911b67ffffffffffffffff60401b161790558860005260058152604060002033600052815260ff6040600020541661134e579091929394508760005260058152604060002033600052815260406000208a60ff198254161790556003815260406000209283546801000000000000000094858210156114ff5781611493918e87969594018155611f14565b819291549060031b918c831b921b191617905588600052526040600020908154928310156114ea5750816114ce918a80969594018155611f4d565b819291549060031b9133831b921b19161790558780808061134e565b604190634e487b7160e01b6000525260246000fd5b604185634e487b7160e01b6000525260246000fd5b604051631e9acf1760e31b81528490fd5b809250858092503d831161154f575b61153e818361209b565b8101031261018b578290518e61131c565b503d611534565b60405163a3df9bcf60e01b81528490fd5b50600054604051637274e30d60e01b8152906020908290859082906001600160a01b03165afa80156102f95782916000916115a6575b5016831161128b565b9150506020813d82116115d9575b816115c16020938361209b565b8101031261018b576115d382916120bc565b8761159d565b3d91506115b4565b3461018b57604036600319011261018b576115fa611ea9565b9063ffffffff60243592166000526020526040600020805482101561018b5760209161162591611f4d565b905460405160039290921b1c6001600160a01b03168152f35b3461018b576020908160031936011261018b5763ffffffff61165e611ea9565b166000528152604060002060405190818382549182815201908192600052846000209060005b868282106116e357868661169a8288038361209b565b604051928392818401908285525180915260408401929160005b8281106116c357505050500390f35b83516001600160a01b0316855286955093810193928101926001016116b4565b83546001600160a01b031685529093019260019283019201611684565b3461018b57604036600319011261018b57611719611ea9565b63ffffffff611726611efe565b9116600052600560205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461018b57604036600319011261018b57611772611ee8565b9061177b611efe565b917ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009283549260ff8460401c1615936001600160401b038116801590816118e6575b60011490816118dc575b1590816118d3575b506118c35767ffffffffffffffff1981166001178655846118a4575b506001600160a01b03928316928315908115611899575b50610261575061183e90611814612028565b61181c612028565b600160008051602061254083398151915255611836612028565b610184612028565b6bffffffffffffffffffffffff60a01b600054161760005561185c57005b68ff00000000000000001981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b905082161586611802565b68ffffffffffffffffff191668010000000000000001178555856117eb565b5060405163f92ee8a960e01b8152fd5b905015876117cf565b303b1591506117c7565b8691506117bd565b3461018b57604036600319011261018b57611907611ee8565b6001600160a01b0316600090815260036020526040902080546024359081101561018b5761193c63ffffffff91602093611f14565b90549060031b1c16604051908152f35b3461018b57606036600319011261018b57611965611ea9565b9061196e611ebc565b6044359081151580920361018b57611984611f7b565b63ffffffff809416938415908115611a1c575b506106d1576001600160401b031691612710831161026157507f60d7d831c21ff35d25fd0390bd3dab275aeac6738b358fffbe53c10d9cca5179916040918460005260016020526002836000200180548360ff60a01b8460a01b169174ff000000000000000000000000ffffffffffffffff19161717905582519182526020820152a2005b600054604051637274e30d60e01b81529192506020908290879082906001600160a01b03165afa9081156102f957600091611a5c575b5016841185611997565b90506020813d8211611a8d575b81611a766020938361209b565b8101031261018b57611a87906120bc565b86611a52565b3d9150611a69565b3461018b57600036600319011261018b57602063ffffffff60005460a01c16604051908152f35b3461018b57606036600319011261018b57611ad5611ea9565b90611ade611ebc565b611ae6611ed2565b92611aef611f7b565b63ffffffff928382169384158015611d68575b61027057600054604051630506586f60e21b808252848201889052610180989095909290916001600160a01b03918216908a81602481855afa9081156102f957600090600092611d3d575b5015908115611d35575b50611d24576001600160401b038098169788158015611d19575b611cfb578416966201518088108015611d0c575b611cfb578960005260016020528260406000205416611cfb578a9060246040518094819382528d8b8301525afa998a156102f95760009a611cb9575b50506002611c2c9189600052600160205260406000209a16998a6bffffffffffffffffffffffff60a01b8254161781550192876001600160401b0319855416178455839067ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b815464ffffffffff60801b191660809190911b63ffffffff60801b1617600160a01b1790556000549160a083901c821691821461052e575063ffffffff60a01b19909116600190910160a01b63ffffffff60a01b16176000556040805192835260208301919091527f207ac0e869fc34ff7b195d58dcebf6679d65538406e7edc06ac05d9a4b10984f91a3005b611c2c929a5060029181611ce192903d10611cf4575b611cd9818361209b565b810190612102565b5050505050505050505090509991611bc1565b503d611ccf565b60405163b4fa3fb360e01b81528790fd5b506301e133808811611b85565b506127108911611b71565b604051631a9cf8fb60e11b81528690fd5b90508b611b57565b9050611d5691508b3d8d11611cf457611cd9818361209b565b5099509750505050505050508c611b4d565b50600054604051637274e30d60e01b8152906020908290859082906001600160a01b03165afa80156102f9578291600091611da7575b50168511611b02565b9150506020813d8211611dda575b81611dc26020938361209b565b8101031261018b57611dd482916120bc565b88611d9e565b3d9150611db5565b3461018b57602036600319011261018b5761010063ffffffff80611e04611ea9565b16600052600160205260ff604060002060018060a01b038154169260026001830154920154916040519485526001600160801b038116602086015260801c60408501526001600160401b0380831660608601528260401c1660808501528160801c1660a0840152818160a01c16151560c084015260a81c16151560e0820152f35b3461018b57600036600319011261018b576000546001600160a01b03168152602090f35b6004359063ffffffff8216820361018b57565b602435906001600160401b038216820361018b57565b604435906001600160401b038216820361018b57565b600435906001600160a01b038216820361018b57565b602435906001600160a01b038216820361018b57565b9190918054831015611f3757600052601c60206000208360031c019260021b1690565b634e487b7160e01b600052603260045260246000fd5b8054821015611f375760005260206000200190600090565b602435906001600160801b038216820361018b57565b600080516020612520833981519152546001600160a01b03163303611f9c57565b60405163118cdaa760e01b8152336004820152602490fd5b6001600160a01b0390811690811561200f5760008051602061252083398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b604051631e4fbdf760e01b815260006004820152602490fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c161561205757565b604051631afcd79f60e31b8152600490fd5b61010081019081106001600160401b0382111761208557604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b0382111761208557604052565b519063ffffffff8216820361018b57565b51906001600160a01b038216820361018b57565b51906001600160801b038216820361018b57565b5190811515820361018b57565b91908261018091031261018b57612118826120cd565b91612125602082016120cd565b91612132604083016120cd565b9161213f606082016120e1565b9161214c608083016120e1565b9160a08101516001600160401b038116810361018b579161216f60c083016120bc565b9161217c60e082016120bc565b9161218a61010083016120f5565b9161219861012082016120f5565b916121b36101606121ac61014085016120f5565b93016120f5565b90565b9190916001600160801b03808094169116019182116121d157565b634e487b7160e01b600052601160045260246000fd5b60008051602061254083398151915260028154146122055760029055565b604051633ee5aeb560e01b8152600490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b038411176120855761226f92604052612271565b565b60018060a01b031690600080826020829451910182865af13d15612338573d906001600160401b03821161232457906122cc91604051916122bc6020601f19601f840116018461209b565b82523d84602084013e5b84612344565b80519182151592836122fb575b5050506122e35750565b60249060405190635274afe760e01b82526004820152fd5b8293509160209192810103126123215750602061231891016120f5565b153880806122d9565b80fd5b634e487b7160e01b83526041600452602483fd5b6122cc906060906122c6565b9061236b575080511561235957805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061239e575b61237c575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15612374565b9190916001600160401b03808094169116019182116121d157565b6001600160801b0391821690821603919082116121d157565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448083019390935291815260808101916001600160401b038311828410176120855761226f92604052612271565b919082039182116121d157565b818102929181159184041417156121d157565b63ffffffff166000526001602052604060002090600260205260406000209060018060a01b0316600052602052604060002080546001600160801b03918282169081156125185760018101936001600160401b03936124af85875460401c164261242a565b91821561250e5764496cebb8006124da610238946105846124e5988a600261226f9e01541690612437565b04169060801c6121b6565b421667ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b5050505050505050565b505050505056fe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a26469706673582212204724db838409d7878add4e2de63f5b21183dd2d29df9d2e76edfdc9d9994851164736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "addRewards(uint32,uint128)": {
        "params": {
          "_amount": "Amount of tokens to add as rewards",
          "_campaignId": "The campaign ID"
        }
      },
      "calculateRewards(uint32,uint128,uint64)": {
        "params": {
          "_amount": "Amount to stake",
          "_campaignId": "The campaign ID",
          "_duration": "Duration to stake for"
        }
      },
      "claimRewards(uint32)": {
        "params": {
          "_campaignId": "The campaign ID"
        }
      },
      "createStakingPool(uint32,uint64,uint64)": {
        "params": {
          "_apy": "Annual percentage yield in basis points (e.g., 1000 = 10%)",
          "_campaignId": "The campaign ID",
          "_minStakingPeriod": "Minimum staking period in seconds"
        }
      },
      "emergencyWithdraw(uint32)": {
        "params": {
          "_campaignId": "The campaign ID"
        }
      },
      "getPoolStakers(uint32)": {
        "params": {
          "_campaignId": "The campaign ID"
        }
      },
      "getStakingPoolInfo(uint32)": {
        "params": {
          "_campaignId": "The campaign ID"
        }
      },
      "getUserStakeInfo(uint32,address)": {
        "params": {
          "_campaignId": "The campaign ID",
          "_user": "User address"
        },
        "returns": {
          "amount": "Amount staked",
          "rewards": "Current rewards",
          "stakingTime": "When user started staking",
          "timeToUnlock": "Time until user can unstake"
        }
      },
      "getUserStakingPools(address)": {
        "params": {
          "_user": "User address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setEmergencyMode(uint32,bool)": {
        "params": {
          "_campaignId": "The campaign ID",
          "_emergencyMode": "Whether to enable emergency mode"
        }
      },
      "stakeTokens(uint32,uint128)": {
        "params": {
          "_amount": "Amount of tokens to stake",
          "_campaignId": "The campaign ID"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstakeTokens(uint32,uint128)": {
        "params": {
          "_amount": "Amount of tokens to unstake (0 = unstake all)",
          "_campaignId": "The campaign ID"
        }
      },
      "updateStakingPool(uint32,uint64,bool)": {
        "params": {
          "_apy": "New APY in basis points",
          "_campaignId": "The campaign ID",
          "_enabled": "Whether staking is enabled"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRewards(uint32,uint128)": {
        "notice": "Add rewards to a staking pool"
      },
      "calculateRewards(uint32,uint128,uint64)": {
        "notice": "Calculate potential rewards for a given amount and time"
      },
      "claimRewards(uint32)": {
        "notice": "Claim accumulated rewards without unstaking"
      },
      "createStakingPool(uint32,uint64,uint64)": {
        "notice": "Creates a staking pool for a completed campaign"
      },
      "emergencyWithdraw(uint32)": {
        "notice": "Emergency withdraw without rewards (in case of emergency mode)"
      },
      "getPoolStakers(uint32)": {
        "notice": "Get all stakers in a pool"
      },
      "getStakingPoolInfo(uint32)": {
        "notice": "Get staking pool information"
      },
      "getUserStakeInfo(uint32,address)": {
        "notice": "Get user's stake information for a campaign"
      },
      "getUserStakingPools(address)": {
        "notice": "Get all campaigns a user has staked in"
      },
      "setEmergencyMode(uint32,bool)": {
        "notice": "Enable emergency mode for a pool (owner only)"
      },
      "stakeTokens(uint32,uint128)": {
        "notice": "Stake tokens in a specific campaign's pool"
      },
      "unstakeTokens(uint32,uint128)": {
        "notice": "Unstake tokens and claim rewards"
      },
      "updateStakingPool(uint32,uint64,bool)": {
        "notice": "Update staking pool parameters (owner only)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2447,
        "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
        "label": "launchpad",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ILaunchpad)2308"
      },
      {
        "astId": 2449,
        "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
        "label": "stakingPoolCount",
        "offset": 20,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 2454,
        "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
        "label": "stakingPools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_struct(StakingPool)2414_storage)"
      },
      {
        "astId": 2461,
        "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
        "label": "userStakes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_mapping(t_address,t_struct(UserStake)2423_storage))"
      },
      {
        "astId": 2466,
        "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
        "label": "userStakingPools",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_uint32)dyn_storage)"
      },
      {
        "astId": 2471,
        "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
        "label": "poolStakers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2477,
        "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
        "label": "hasStaked",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint32,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1515": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILaunchpad)2308": {
        "encoding": "inplace",
        "label": "contract ILaunchpad",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint32)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserStake)2423_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CampaignTokenStaking.UserStake)",
        "numberOfBytes": "32",
        "value": "t_struct(UserStake)2423_storage"
      },
      "t_mapping(t_uint32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_struct(UserStake)2423_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => struct CampaignTokenStaking.UserStake))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserStake)2423_storage)"
      },
      "t_mapping(t_uint32,t_struct(StakingPool)2414_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct CampaignTokenStaking.StakingPool)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingPool)2414_storage"
      },
      "t_struct(StakingPool)2414_storage": {
        "encoding": "inplace",
        "label": "struct CampaignTokenStaking.StakingPool",
        "members": [
          {
            "astId": 2399,
            "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
            "label": "stakingToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1515"
          },
          {
            "astId": 2401,
            "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
            "label": "totalStaked",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 2403,
            "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
            "label": "rewardPool",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 2405,
            "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
            "label": "apy",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 2407,
            "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
            "label": "minStakingPeriod",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 2409,
            "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
            "label": "campaignId",
            "offset": 16,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 2411,
            "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
            "label": "enabled",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2413,
            "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
            "label": "emergencyMode",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserStake)2423_storage": {
        "encoding": "inplace",
        "label": "struct CampaignTokenStaking.UserStake",
        "members": [
          {
            "astId": 2416,
            "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2418,
            "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
            "label": "rewards",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2420,
            "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
            "label": "stakingTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 2422,
            "contract": "contracts/CampaignTokenStaking.sol:CampaignTokenStaking",
            "label": "lastRewardUpdate",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}